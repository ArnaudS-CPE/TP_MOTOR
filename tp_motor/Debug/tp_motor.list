
tp_motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a48  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  08008be8  08008be8  00009be8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009038  08009038  0000b1d8  2**0
                  CONTENTS
  4 .ARM          00000008  08009038  08009038  0000a038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009040  08009040  0000b1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009040  08009040  0000a040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009044  08009044  0000a044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08009048  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000304  200001d8  08009220  0000b1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004dc  08009220  0000b4dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001167a  00000000  00000000  0000b208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b9a  00000000  00000000  0001c882  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001050  00000000  00000000  0001f420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cb8  00000000  00000000  00020470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018fb9  00000000  00000000  00021128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000150f5  00000000  00000000  0003a0e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000934dd  00000000  00000000  0004f1d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e26b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054e0  00000000  00000000  000e26f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000e7bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008bd0 	.word	0x08008bd0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	08008bd0 	.word	0x08008bd0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cac:	f000 b96a 	b.w	8000f84 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	460c      	mov	r4, r1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d14e      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd4:	4694      	mov	ip, r2
 8000cd6:	458c      	cmp	ip, r1
 8000cd8:	4686      	mov	lr, r0
 8000cda:	fab2 f282 	clz	r2, r2
 8000cde:	d962      	bls.n	8000da6 <__udivmoddi4+0xde>
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0320 	rsb	r3, r2, #32
 8000ce6:	4091      	lsls	r1, r2
 8000ce8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf0:	4319      	orrs	r1, r3
 8000cf2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfa:	fa1f f68c 	uxth.w	r6, ip
 8000cfe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d06:	fb07 1114 	mls	r1, r7, r4, r1
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb04 f106 	mul.w	r1, r4, r6
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d1e:	f080 8112 	bcs.w	8000f46 <__udivmoddi4+0x27e>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 810f 	bls.w	8000f46 <__udivmoddi4+0x27e>
 8000d28:	3c02      	subs	r4, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a59      	subs	r1, r3, r1
 8000d2e:	fa1f f38e 	uxth.w	r3, lr
 8000d32:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d36:	fb07 1110 	mls	r1, r7, r0, r1
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb00 f606 	mul.w	r6, r0, r6
 8000d42:	429e      	cmp	r6, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x94>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d4e:	f080 80fc 	bcs.w	8000f4a <__udivmoddi4+0x282>
 8000d52:	429e      	cmp	r6, r3
 8000d54:	f240 80f9 	bls.w	8000f4a <__udivmoddi4+0x282>
 8000d58:	4463      	add	r3, ip
 8000d5a:	3802      	subs	r0, #2
 8000d5c:	1b9b      	subs	r3, r3, r6
 8000d5e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d62:	2100      	movs	r1, #0
 8000d64:	b11d      	cbz	r5, 8000d6e <__udivmoddi4+0xa6>
 8000d66:	40d3      	lsrs	r3, r2
 8000d68:	2200      	movs	r2, #0
 8000d6a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d905      	bls.n	8000d82 <__udivmoddi4+0xba>
 8000d76:	b10d      	cbz	r5, 8000d7c <__udivmoddi4+0xb4>
 8000d78:	e9c5 0100 	strd	r0, r1, [r5]
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e7f5      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000d82:	fab3 f183 	clz	r1, r3
 8000d86:	2900      	cmp	r1, #0
 8000d88:	d146      	bne.n	8000e18 <__udivmoddi4+0x150>
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	d302      	bcc.n	8000d94 <__udivmoddi4+0xcc>
 8000d8e:	4290      	cmp	r0, r2
 8000d90:	f0c0 80f0 	bcc.w	8000f74 <__udivmoddi4+0x2ac>
 8000d94:	1a86      	subs	r6, r0, r2
 8000d96:	eb64 0303 	sbc.w	r3, r4, r3
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	2d00      	cmp	r5, #0
 8000d9e:	d0e6      	beq.n	8000d6e <__udivmoddi4+0xa6>
 8000da0:	e9c5 6300 	strd	r6, r3, [r5]
 8000da4:	e7e3      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000da6:	2a00      	cmp	r2, #0
 8000da8:	f040 8090 	bne.w	8000ecc <__udivmoddi4+0x204>
 8000dac:	eba1 040c 	sub.w	r4, r1, ip
 8000db0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db4:	fa1f f78c 	uxth.w	r7, ip
 8000db8:	2101      	movs	r1, #1
 8000dba:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dc2:	fb08 4416 	mls	r4, r8, r6, r4
 8000dc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dca:	fb07 f006 	mul.w	r0, r7, r6
 8000dce:	4298      	cmp	r0, r3
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x11c>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x11a>
 8000ddc:	4298      	cmp	r0, r3
 8000dde:	f200 80cd 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000de2:	4626      	mov	r6, r4
 8000de4:	1a1c      	subs	r4, r3, r0
 8000de6:	fa1f f38e 	uxth.w	r3, lr
 8000dea:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dee:	fb08 4410 	mls	r4, r8, r0, r4
 8000df2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000df6:	fb00 f707 	mul.w	r7, r0, r7
 8000dfa:	429f      	cmp	r7, r3
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x148>
 8000dfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000e02:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e06:	d202      	bcs.n	8000e0e <__udivmoddi4+0x146>
 8000e08:	429f      	cmp	r7, r3
 8000e0a:	f200 80b0 	bhi.w	8000f6e <__udivmoddi4+0x2a6>
 8000e0e:	4620      	mov	r0, r4
 8000e10:	1bdb      	subs	r3, r3, r7
 8000e12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e16:	e7a5      	b.n	8000d64 <__udivmoddi4+0x9c>
 8000e18:	f1c1 0620 	rsb	r6, r1, #32
 8000e1c:	408b      	lsls	r3, r1
 8000e1e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e22:	431f      	orrs	r7, r3
 8000e24:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e28:	fa04 f301 	lsl.w	r3, r4, r1
 8000e2c:	ea43 030c 	orr.w	r3, r3, ip
 8000e30:	40f4      	lsrs	r4, r6
 8000e32:	fa00 f801 	lsl.w	r8, r0, r1
 8000e36:	0c38      	lsrs	r0, r7, #16
 8000e38:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e3c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e40:	fa1f fc87 	uxth.w	ip, r7
 8000e44:	fb00 441e 	mls	r4, r0, lr, r4
 8000e48:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e4c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e50:	45a1      	cmp	r9, r4
 8000e52:	fa02 f201 	lsl.w	r2, r2, r1
 8000e56:	d90a      	bls.n	8000e6e <__udivmoddi4+0x1a6>
 8000e58:	193c      	adds	r4, r7, r4
 8000e5a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e5e:	f080 8084 	bcs.w	8000f6a <__udivmoddi4+0x2a2>
 8000e62:	45a1      	cmp	r9, r4
 8000e64:	f240 8081 	bls.w	8000f6a <__udivmoddi4+0x2a2>
 8000e68:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e6c:	443c      	add	r4, r7
 8000e6e:	eba4 0409 	sub.w	r4, r4, r9
 8000e72:	fa1f f983 	uxth.w	r9, r3
 8000e76:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e7a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e7e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e82:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e86:	45a4      	cmp	ip, r4
 8000e88:	d907      	bls.n	8000e9a <__udivmoddi4+0x1d2>
 8000e8a:	193c      	adds	r4, r7, r4
 8000e8c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e90:	d267      	bcs.n	8000f62 <__udivmoddi4+0x29a>
 8000e92:	45a4      	cmp	ip, r4
 8000e94:	d965      	bls.n	8000f62 <__udivmoddi4+0x29a>
 8000e96:	3b02      	subs	r3, #2
 8000e98:	443c      	add	r4, r7
 8000e9a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e9e:	fba0 9302 	umull	r9, r3, r0, r2
 8000ea2:	eba4 040c 	sub.w	r4, r4, ip
 8000ea6:	429c      	cmp	r4, r3
 8000ea8:	46ce      	mov	lr, r9
 8000eaa:	469c      	mov	ip, r3
 8000eac:	d351      	bcc.n	8000f52 <__udivmoddi4+0x28a>
 8000eae:	d04e      	beq.n	8000f4e <__udivmoddi4+0x286>
 8000eb0:	b155      	cbz	r5, 8000ec8 <__udivmoddi4+0x200>
 8000eb2:	ebb8 030e 	subs.w	r3, r8, lr
 8000eb6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eba:	fa04 f606 	lsl.w	r6, r4, r6
 8000ebe:	40cb      	lsrs	r3, r1
 8000ec0:	431e      	orrs	r6, r3
 8000ec2:	40cc      	lsrs	r4, r1
 8000ec4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ec8:	2100      	movs	r1, #0
 8000eca:	e750      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000ecc:	f1c2 0320 	rsb	r3, r2, #32
 8000ed0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ed4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ed8:	fa24 f303 	lsr.w	r3, r4, r3
 8000edc:	4094      	lsls	r4, r2
 8000ede:	430c      	orrs	r4, r1
 8000ee0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ee4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ee8:	fa1f f78c 	uxth.w	r7, ip
 8000eec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ef0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ef4:	0c23      	lsrs	r3, r4, #16
 8000ef6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000efa:	fb00 f107 	mul.w	r1, r0, r7
 8000efe:	4299      	cmp	r1, r3
 8000f00:	d908      	bls.n	8000f14 <__udivmoddi4+0x24c>
 8000f02:	eb1c 0303 	adds.w	r3, ip, r3
 8000f06:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f0a:	d22c      	bcs.n	8000f66 <__udivmoddi4+0x29e>
 8000f0c:	4299      	cmp	r1, r3
 8000f0e:	d92a      	bls.n	8000f66 <__udivmoddi4+0x29e>
 8000f10:	3802      	subs	r0, #2
 8000f12:	4463      	add	r3, ip
 8000f14:	1a5b      	subs	r3, r3, r1
 8000f16:	b2a4      	uxth	r4, r4
 8000f18:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f1c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f24:	fb01 f307 	mul.w	r3, r1, r7
 8000f28:	42a3      	cmp	r3, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x276>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f34:	d213      	bcs.n	8000f5e <__udivmoddi4+0x296>
 8000f36:	42a3      	cmp	r3, r4
 8000f38:	d911      	bls.n	8000f5e <__udivmoddi4+0x296>
 8000f3a:	3902      	subs	r1, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	1ae4      	subs	r4, r4, r3
 8000f40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f44:	e739      	b.n	8000dba <__udivmoddi4+0xf2>
 8000f46:	4604      	mov	r4, r0
 8000f48:	e6f0      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e706      	b.n	8000d5c <__udivmoddi4+0x94>
 8000f4e:	45c8      	cmp	r8, r9
 8000f50:	d2ae      	bcs.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f52:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f56:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f5a:	3801      	subs	r0, #1
 8000f5c:	e7a8      	b.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f5e:	4631      	mov	r1, r6
 8000f60:	e7ed      	b.n	8000f3e <__udivmoddi4+0x276>
 8000f62:	4603      	mov	r3, r0
 8000f64:	e799      	b.n	8000e9a <__udivmoddi4+0x1d2>
 8000f66:	4630      	mov	r0, r6
 8000f68:	e7d4      	b.n	8000f14 <__udivmoddi4+0x24c>
 8000f6a:	46d6      	mov	lr, sl
 8000f6c:	e77f      	b.n	8000e6e <__udivmoddi4+0x1a6>
 8000f6e:	4463      	add	r3, ip
 8000f70:	3802      	subs	r0, #2
 8000f72:	e74d      	b.n	8000e10 <__udivmoddi4+0x148>
 8000f74:	4606      	mov	r6, r0
 8000f76:	4623      	mov	r3, r4
 8000f78:	4608      	mov	r0, r1
 8000f7a:	e70f      	b.n	8000d9c <__udivmoddi4+0xd4>
 8000f7c:	3e02      	subs	r6, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	e730      	b.n	8000de4 <__udivmoddi4+0x11c>
 8000f82:	bf00      	nop

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <DriveSyst>:
Xyz acc;

int mode;


void DriveSyst(void){
 8000f88:	b5b0      	push	{r4, r5, r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
	encoder = Encoder_Read();
 8000f8e:	f000 f883 	bl	8001098 <Encoder_Read>
 8000f92:	eef0 6a40 	vmov.f32	s13, s0
 8000f96:	eeb0 7a60 	vmov.f32	s14, s1
 8000f9a:	eef0 7a41 	vmov.f32	s15, s2
 8000f9e:	4b32      	ldr	r3, [pc, #200]	@ (8001068 <DriveSyst+0xe0>)
 8000fa0:	edc3 6a00 	vstr	s13, [r3]
 8000fa4:	ed83 7a01 	vstr	s14, [r3, #4]
 8000fa8:	edc3 7a02 	vstr	s15, [r3, #8]

	switch(mode){
 8000fac:	4b2f      	ldr	r3, [pc, #188]	@ (800106c <DriveSyst+0xe4>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2b02      	cmp	r3, #2
 8000fb2:	d010      	beq.n	8000fd6 <DriveSyst+0x4e>
 8000fb4:	2b02      	cmp	r3, #2
 8000fb6:	dc46      	bgt.n	8001046 <DriveSyst+0xbe>
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d002      	beq.n	8000fc2 <DriveSyst+0x3a>
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d005      	beq.n	8000fcc <DriveSyst+0x44>
 8000fc0:	e041      	b.n	8001046 <DriveSyst+0xbe>
		case 0: //vitesse
			pid.input.feedback = encoder.d_angle;
 8000fc2:	4b29      	ldr	r3, [pc, #164]	@ (8001068 <DriveSyst+0xe0>)
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	4a2a      	ldr	r2, [pc, #168]	@ (8001070 <DriveSyst+0xe8>)
 8000fc8:	6193      	str	r3, [r2, #24]
			break;
 8000fca:	e03c      	b.n	8001046 <DriveSyst+0xbe>
		case 1: //position
			pid.input.feedback = encoder.angle_abs;
 8000fcc:	4b26      	ldr	r3, [pc, #152]	@ (8001068 <DriveSyst+0xe0>)
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	4a27      	ldr	r2, [pc, #156]	@ (8001070 <DriveSyst+0xe8>)
 8000fd2:	6193      	str	r3, [r2, #24]
			break;
 8000fd4:	e037      	b.n	8001046 <DriveSyst+0xbe>
		case 2: //accelerometre
			acc = MPU6050_Read_Accel();
 8000fd6:	f000 fd23 	bl	8001a20 <MPU6050_Read_Accel>
 8000fda:	eef0 6a40 	vmov.f32	s13, s0
 8000fde:	eeb0 7a60 	vmov.f32	s14, s1
 8000fe2:	eef0 7a41 	vmov.f32	s15, s2
 8000fe6:	4b23      	ldr	r3, [pc, #140]	@ (8001074 <DriveSyst+0xec>)
 8000fe8:	edc3 6a00 	vstr	s13, [r3]
 8000fec:	ed83 7a01 	vstr	s14, [r3, #4]
 8000ff0:	edc3 7a02 	vstr	s15, [r3, #8]
			pid.input.feedback = encoder.angle_abs;
 8000ff4:	4b1c      	ldr	r3, [pc, #112]	@ (8001068 <DriveSyst+0xe0>)
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	4a1d      	ldr	r2, [pc, #116]	@ (8001070 <DriveSyst+0xe8>)
 8000ffa:	6193      	str	r3, [r2, #24]
			//pid.input.order = M_PI * acc.y + M_PI;
			pid.input.order = atan2(acc.y, acc.z) + (M_PI/2);
 8000ffc:	4b1d      	ldr	r3, [pc, #116]	@ (8001074 <DriveSyst+0xec>)
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff faa9 	bl	8000558 <__aeabi_f2d>
 8001006:	4604      	mov	r4, r0
 8001008:	460d      	mov	r5, r1
 800100a:	4b1a      	ldr	r3, [pc, #104]	@ (8001074 <DriveSyst+0xec>)
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff faa2 	bl	8000558 <__aeabi_f2d>
 8001014:	4602      	mov	r2, r0
 8001016:	460b      	mov	r3, r1
 8001018:	ec43 2b11 	vmov	d1, r2, r3
 800101c:	ec45 4b10 	vmov	d0, r4, r5
 8001020:	f007 fb6c 	bl	80086fc <atan2>
 8001024:	ec51 0b10 	vmov	r0, r1, d0
 8001028:	a30d      	add	r3, pc, #52	@ (adr r3, 8001060 <DriveSyst+0xd8>)
 800102a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800102e:	f7ff f935 	bl	800029c <__adddf3>
 8001032:	4602      	mov	r2, r0
 8001034:	460b      	mov	r3, r1
 8001036:	4610      	mov	r0, r2
 8001038:	4619      	mov	r1, r3
 800103a:	f7ff fddd 	bl	8000bf8 <__aeabi_d2f>
 800103e:	4603      	mov	r3, r0
 8001040:	4a0b      	ldr	r2, [pc, #44]	@ (8001070 <DriveSyst+0xe8>)
 8001042:	6153      	str	r3, [r2, #20]
			break;
 8001044:	bf00      	nop
	}

	float consigne = PID_Execute(&pid);
 8001046:	480a      	ldr	r0, [pc, #40]	@ (8001070 <DriveSyst+0xe8>)
 8001048:	f000 fdb5 	bl	8001bb6 <PID_Execute>
 800104c:	ed87 0a01 	vstr	s0, [r7, #4]
	Motor_Pwm_Update(consigne);
 8001050:	ed97 0a01 	vldr	s0, [r7, #4]
 8001054:	f000 fbda 	bl	800180c <Motor_Pwm_Update>
}
 8001058:	bf00      	nop
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bdb0      	pop	{r4, r5, r7, pc}
 8001060:	54442d18 	.word	0x54442d18
 8001064:	3ff921fb 	.word	0x3ff921fb
 8001068:	20000224 	.word	0x20000224
 800106c:	2000023c 	.word	0x2000023c
 8001070:	200001f4 	.word	0x200001f4
 8001074:	20000230 	.word	0x20000230

08001078 <Encoder_Init>:

Encoder_Feedback_t enc = {0.0f, 0.0f, 0.0f};



void Encoder_Init (void){
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
	//printf("init_encoder");
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800107c:	213c      	movs	r1, #60	@ 0x3c
 800107e:	4805      	ldr	r0, [pc, #20]	@ (8001094 <Encoder_Init+0x1c>)
 8001080:	f003 fcb0 	bl	80049e4 <HAL_TIM_Encoder_Start>
	htim3.Instance->CNT = 32767;
 8001084:	4b03      	ldr	r3, [pc, #12]	@ (8001094 <Encoder_Init+0x1c>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800108c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	200002fc 	.word	0x200002fc

08001098 <Encoder_Read>:




Encoder_Feedback_t Encoder_Read (void){
 8001098:	b5b0      	push	{r4, r5, r7, lr}
 800109a:	b08a      	sub	sp, #40	@ 0x28
 800109c:	af00      	add	r7, sp, #0

	uint32_t val = htim3.Instance->CNT;
 800109e:	4b6e      	ldr	r3, [pc, #440]	@ (8001258 <Encoder_Read+0x1c0>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010a4:	627b      	str	r3, [r7, #36]	@ 0x24

	enc.angle_abs = enc.angle_abs + (float)((32767.0 - (float)val) * (float)M_PI * 2.0 / 24.0) / 75.0;
 80010a6:	4b6d      	ldr	r3, [pc, #436]	@ (800125c <Encoder_Read+0x1c4>)
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff fa54 	bl	8000558 <__aeabi_f2d>
 80010b0:	4604      	mov	r4, r0
 80010b2:	460d      	mov	r5, r1
 80010b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010b6:	ee07 3a90 	vmov	s15, r3
 80010ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010be:	ee17 0a90 	vmov	r0, s15
 80010c2:	f7ff fa49 	bl	8000558 <__aeabi_f2d>
 80010c6:	4602      	mov	r2, r0
 80010c8:	460b      	mov	r3, r1
 80010ca:	a15b      	add	r1, pc, #364	@ (adr r1, 8001238 <Encoder_Read+0x1a0>)
 80010cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80010d0:	f7ff f8e2 	bl	8000298 <__aeabi_dsub>
 80010d4:	4602      	mov	r2, r0
 80010d6:	460b      	mov	r3, r1
 80010d8:	4610      	mov	r0, r2
 80010da:	4619      	mov	r1, r3
 80010dc:	a358      	add	r3, pc, #352	@ (adr r3, 8001240 <Encoder_Read+0x1a8>)
 80010de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e2:	f7ff fa91 	bl	8000608 <__aeabi_dmul>
 80010e6:	4602      	mov	r2, r0
 80010e8:	460b      	mov	r3, r1
 80010ea:	4610      	mov	r0, r2
 80010ec:	4619      	mov	r1, r3
 80010ee:	4602      	mov	r2, r0
 80010f0:	460b      	mov	r3, r1
 80010f2:	f7ff f8d3 	bl	800029c <__adddf3>
 80010f6:	4602      	mov	r2, r0
 80010f8:	460b      	mov	r3, r1
 80010fa:	4610      	mov	r0, r2
 80010fc:	4619      	mov	r1, r3
 80010fe:	f04f 0200 	mov.w	r2, #0
 8001102:	4b57      	ldr	r3, [pc, #348]	@ (8001260 <Encoder_Read+0x1c8>)
 8001104:	f7ff fbaa 	bl	800085c <__aeabi_ddiv>
 8001108:	4602      	mov	r2, r0
 800110a:	460b      	mov	r3, r1
 800110c:	4610      	mov	r0, r2
 800110e:	4619      	mov	r1, r3
 8001110:	f7ff fd72 	bl	8000bf8 <__aeabi_d2f>
 8001114:	4603      	mov	r3, r0
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff fa1e 	bl	8000558 <__aeabi_f2d>
 800111c:	a34a      	add	r3, pc, #296	@ (adr r3, 8001248 <Encoder_Read+0x1b0>)
 800111e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001122:	f7ff fb9b 	bl	800085c <__aeabi_ddiv>
 8001126:	4602      	mov	r2, r0
 8001128:	460b      	mov	r3, r1
 800112a:	4620      	mov	r0, r4
 800112c:	4629      	mov	r1, r5
 800112e:	f7ff f8b5 	bl	800029c <__adddf3>
 8001132:	4602      	mov	r2, r0
 8001134:	460b      	mov	r3, r1
 8001136:	4610      	mov	r0, r2
 8001138:	4619      	mov	r1, r3
 800113a:	f7ff fd5d 	bl	8000bf8 <__aeabi_d2f>
 800113e:	4603      	mov	r3, r0
 8001140:	4a46      	ldr	r2, [pc, #280]	@ (800125c <Encoder_Read+0x1c4>)
 8001142:	6053      	str	r3, [r2, #4]

	enc.angle_rel = enc.angle_abs;
 8001144:	4b45      	ldr	r3, [pc, #276]	@ (800125c <Encoder_Read+0x1c4>)
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	4a44      	ldr	r2, [pc, #272]	@ (800125c <Encoder_Read+0x1c4>)
 800114a:	6013      	str	r3, [r2, #0]
	if(enc.angle_rel > 0.0){
 800114c:	4b43      	ldr	r3, [pc, #268]	@ (800125c <Encoder_Read+0x1c4>)
 800114e:	edd3 7a00 	vldr	s15, [r3]
 8001152:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800115a:	dd14      	ble.n	8001186 <Encoder_Read+0xee>
		while(enc.angle_rel >= (float)(2*M_PI)){
 800115c:	e009      	b.n	8001172 <Encoder_Read+0xda>
			enc.angle_rel = enc.angle_rel - (float)(2*M_PI);
 800115e:	4b3f      	ldr	r3, [pc, #252]	@ (800125c <Encoder_Read+0x1c4>)
 8001160:	edd3 7a00 	vldr	s15, [r3]
 8001164:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8001264 <Encoder_Read+0x1cc>
 8001168:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800116c:	4b3b      	ldr	r3, [pc, #236]	@ (800125c <Encoder_Read+0x1c4>)
 800116e:	edc3 7a00 	vstr	s15, [r3]
		while(enc.angle_rel >= (float)(2*M_PI)){
 8001172:	4b3a      	ldr	r3, [pc, #232]	@ (800125c <Encoder_Read+0x1c4>)
 8001174:	edd3 7a00 	vldr	s15, [r3]
 8001178:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8001264 <Encoder_Read+0x1cc>
 800117c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001184:	daeb      	bge.n	800115e <Encoder_Read+0xc6>
		};
	};
	if(enc.angle_rel < 0.0){
 8001186:	4b35      	ldr	r3, [pc, #212]	@ (800125c <Encoder_Read+0x1c4>)
 8001188:	edd3 7a00 	vldr	s15, [r3]
 800118c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001194:	d512      	bpl.n	80011bc <Encoder_Read+0x124>
		while(enc.angle_rel <= 0.0){
 8001196:	e009      	b.n	80011ac <Encoder_Read+0x114>
			enc.angle_rel = enc.angle_rel + (float)(2*M_PI);
 8001198:	4b30      	ldr	r3, [pc, #192]	@ (800125c <Encoder_Read+0x1c4>)
 800119a:	edd3 7a00 	vldr	s15, [r3]
 800119e:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8001264 <Encoder_Read+0x1cc>
 80011a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011a6:	4b2d      	ldr	r3, [pc, #180]	@ (800125c <Encoder_Read+0x1c4>)
 80011a8:	edc3 7a00 	vstr	s15, [r3]
		while(enc.angle_rel <= 0.0){
 80011ac:	4b2b      	ldr	r3, [pc, #172]	@ (800125c <Encoder_Read+0x1c4>)
 80011ae:	edd3 7a00 	vldr	s15, [r3]
 80011b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ba:	d9ed      	bls.n	8001198 <Encoder_Read+0x100>
		};
	};

	float delta_angle = (enc.angle_abs - last_angle);
 80011bc:	4b27      	ldr	r3, [pc, #156]	@ (800125c <Encoder_Read+0x1c4>)
 80011be:	ed93 7a01 	vldr	s14, [r3, #4]
 80011c2:	4b29      	ldr	r3, [pc, #164]	@ (8001268 <Encoder_Read+0x1d0>)
 80011c4:	edd3 7a00 	vldr	s15, [r3]
 80011c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011cc:	edc7 7a08 	vstr	s15, [r7, #32]

	enc.d_angle = delta_angle / 0.04;
 80011d0:	6a38      	ldr	r0, [r7, #32]
 80011d2:	f7ff f9c1 	bl	8000558 <__aeabi_f2d>
 80011d6:	a31e      	add	r3, pc, #120	@ (adr r3, 8001250 <Encoder_Read+0x1b8>)
 80011d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011dc:	f7ff fb3e 	bl	800085c <__aeabi_ddiv>
 80011e0:	4602      	mov	r2, r0
 80011e2:	460b      	mov	r3, r1
 80011e4:	4610      	mov	r0, r2
 80011e6:	4619      	mov	r1, r3
 80011e8:	f7ff fd06 	bl	8000bf8 <__aeabi_d2f>
 80011ec:	4603      	mov	r3, r0
 80011ee:	4a1b      	ldr	r2, [pc, #108]	@ (800125c <Encoder_Read+0x1c4>)
 80011f0:	6093      	str	r3, [r2, #8]

	last_angle = enc.angle_abs;
 80011f2:	4b1a      	ldr	r3, [pc, #104]	@ (800125c <Encoder_Read+0x1c4>)
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	4a1c      	ldr	r2, [pc, #112]	@ (8001268 <Encoder_Read+0x1d0>)
 80011f8:	6013      	str	r3, [r2, #0]
	htim3.Instance->CNT = 32767;
 80011fa:	4b17      	ldr	r3, [pc, #92]	@ (8001258 <Encoder_Read+0x1c0>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001202:	625a      	str	r2, [r3, #36]	@ 0x24

	return enc;
 8001204:	4a15      	ldr	r2, [pc, #84]	@ (800125c <Encoder_Read+0x1c4>)
 8001206:	f107 0314 	add.w	r3, r7, #20
 800120a:	ca07      	ldmia	r2, {r0, r1, r2}
 800120c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001210:	6979      	ldr	r1, [r7, #20]
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	ee06 1a90 	vmov	s13, r1
 800121a:	ee07 2a10 	vmov	s14, r2
 800121e:	ee07 3a90 	vmov	s15, r3
}
 8001222:	eeb0 0a66 	vmov.f32	s0, s13
 8001226:	eef0 0a47 	vmov.f32	s1, s14
 800122a:	eeb0 1a67 	vmov.f32	s2, s15
 800122e:	3728      	adds	r7, #40	@ 0x28
 8001230:	46bd      	mov	sp, r7
 8001232:	bdb0      	pop	{r4, r5, r7, pc}
 8001234:	f3af 8000 	nop.w
 8001238:	00000000 	.word	0x00000000
 800123c:	40dfffc0 	.word	0x40dfffc0
 8001240:	60000000 	.word	0x60000000
 8001244:	400921fb 	.word	0x400921fb
 8001248:	00000000 	.word	0x00000000
 800124c:	4052c000 	.word	0x4052c000
 8001250:	47ae147b 	.word	0x47ae147b
 8001254:	3fa47ae1 	.word	0x3fa47ae1
 8001258:	200002fc 	.word	0x200002fc
 800125c:	20000244 	.word	0x20000244
 8001260:	40380000 	.word	0x40380000
 8001264:	40c90fdb 	.word	0x40c90fdb
 8001268:	20000240 	.word	0x20000240

0800126c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b08a      	sub	sp, #40	@ 0x28
 8001270:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001272:	f107 0314 	add.w	r3, r7, #20
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	605a      	str	r2, [r3, #4]
 800127c:	609a      	str	r2, [r3, #8]
 800127e:	60da      	str	r2, [r3, #12]
 8001280:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	613b      	str	r3, [r7, #16]
 8001286:	4b2d      	ldr	r3, [pc, #180]	@ (800133c <MX_GPIO_Init+0xd0>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128a:	4a2c      	ldr	r2, [pc, #176]	@ (800133c <MX_GPIO_Init+0xd0>)
 800128c:	f043 0304 	orr.w	r3, r3, #4
 8001290:	6313      	str	r3, [r2, #48]	@ 0x30
 8001292:	4b2a      	ldr	r3, [pc, #168]	@ (800133c <MX_GPIO_Init+0xd0>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001296:	f003 0304 	and.w	r3, r3, #4
 800129a:	613b      	str	r3, [r7, #16]
 800129c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	60fb      	str	r3, [r7, #12]
 80012a2:	4b26      	ldr	r3, [pc, #152]	@ (800133c <MX_GPIO_Init+0xd0>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a6:	4a25      	ldr	r2, [pc, #148]	@ (800133c <MX_GPIO_Init+0xd0>)
 80012a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ae:	4b23      	ldr	r3, [pc, #140]	@ (800133c <MX_GPIO_Init+0xd0>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	60bb      	str	r3, [r7, #8]
 80012be:	4b1f      	ldr	r3, [pc, #124]	@ (800133c <MX_GPIO_Init+0xd0>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c2:	4a1e      	ldr	r2, [pc, #120]	@ (800133c <MX_GPIO_Init+0xd0>)
 80012c4:	f043 0301 	orr.w	r3, r3, #1
 80012c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ca:	4b1c      	ldr	r3, [pc, #112]	@ (800133c <MX_GPIO_Init+0xd0>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	60bb      	str	r3, [r7, #8]
 80012d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	607b      	str	r3, [r7, #4]
 80012da:	4b18      	ldr	r3, [pc, #96]	@ (800133c <MX_GPIO_Init+0xd0>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012de:	4a17      	ldr	r2, [pc, #92]	@ (800133c <MX_GPIO_Init+0xd0>)
 80012e0:	f043 0302 	orr.w	r3, r3, #2
 80012e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012e6:	4b15      	ldr	r3, [pc, #84]	@ (800133c <MX_GPIO_Init+0xd0>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	607b      	str	r3, [r7, #4]
 80012f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80012f2:	2200      	movs	r2, #0
 80012f4:	2120      	movs	r1, #32
 80012f6:	4812      	ldr	r0, [pc, #72]	@ (8001340 <MX_GPIO_Init+0xd4>)
 80012f8:	f001 fc56 	bl	8002ba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001300:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001302:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001306:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	2300      	movs	r3, #0
 800130a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800130c:	f107 0314 	add.w	r3, r7, #20
 8001310:	4619      	mov	r1, r3
 8001312:	480c      	ldr	r0, [pc, #48]	@ (8001344 <MX_GPIO_Init+0xd8>)
 8001314:	f001 f9c8 	bl	80026a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001318:	2320      	movs	r3, #32
 800131a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800131c:	2301      	movs	r3, #1
 800131e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001324:	2300      	movs	r3, #0
 8001326:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001328:	f107 0314 	add.w	r3, r7, #20
 800132c:	4619      	mov	r1, r3
 800132e:	4804      	ldr	r0, [pc, #16]	@ (8001340 <MX_GPIO_Init+0xd4>)
 8001330:	f001 f9ba 	bl	80026a8 <HAL_GPIO_Init>

}
 8001334:	bf00      	nop
 8001336:	3728      	adds	r7, #40	@ 0x28
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40023800 	.word	0x40023800
 8001340:	40020000 	.word	0x40020000
 8001344:	40020800 	.word	0x40020800

08001348 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800134c:	4b12      	ldr	r3, [pc, #72]	@ (8001398 <MX_I2C1_Init+0x50>)
 800134e:	4a13      	ldr	r2, [pc, #76]	@ (800139c <MX_I2C1_Init+0x54>)
 8001350:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001352:	4b11      	ldr	r3, [pc, #68]	@ (8001398 <MX_I2C1_Init+0x50>)
 8001354:	4a12      	ldr	r2, [pc, #72]	@ (80013a0 <MX_I2C1_Init+0x58>)
 8001356:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001358:	4b0f      	ldr	r3, [pc, #60]	@ (8001398 <MX_I2C1_Init+0x50>)
 800135a:	2200      	movs	r2, #0
 800135c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800135e:	4b0e      	ldr	r3, [pc, #56]	@ (8001398 <MX_I2C1_Init+0x50>)
 8001360:	2200      	movs	r2, #0
 8001362:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001364:	4b0c      	ldr	r3, [pc, #48]	@ (8001398 <MX_I2C1_Init+0x50>)
 8001366:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800136a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800136c:	4b0a      	ldr	r3, [pc, #40]	@ (8001398 <MX_I2C1_Init+0x50>)
 800136e:	2200      	movs	r2, #0
 8001370:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001372:	4b09      	ldr	r3, [pc, #36]	@ (8001398 <MX_I2C1_Init+0x50>)
 8001374:	2200      	movs	r2, #0
 8001376:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001378:	4b07      	ldr	r3, [pc, #28]	@ (8001398 <MX_I2C1_Init+0x50>)
 800137a:	2200      	movs	r2, #0
 800137c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800137e:	4b06      	ldr	r3, [pc, #24]	@ (8001398 <MX_I2C1_Init+0x50>)
 8001380:	2200      	movs	r2, #0
 8001382:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001384:	4804      	ldr	r0, [pc, #16]	@ (8001398 <MX_I2C1_Init+0x50>)
 8001386:	f001 fc43 	bl	8002c10 <HAL_I2C_Init>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001390:	f000 fa28 	bl	80017e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001394:	bf00      	nop
 8001396:	bd80      	pop	{r7, pc}
 8001398:	20000250 	.word	0x20000250
 800139c:	40005400 	.word	0x40005400
 80013a0:	000186a0 	.word	0x000186a0

080013a4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08a      	sub	sp, #40	@ 0x28
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ac:	f107 0314 	add.w	r3, r7, #20
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]
 80013ba:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a19      	ldr	r2, [pc, #100]	@ (8001428 <HAL_I2C_MspInit+0x84>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d12c      	bne.n	8001420 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	613b      	str	r3, [r7, #16]
 80013ca:	4b18      	ldr	r3, [pc, #96]	@ (800142c <HAL_I2C_MspInit+0x88>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ce:	4a17      	ldr	r2, [pc, #92]	@ (800142c <HAL_I2C_MspInit+0x88>)
 80013d0:	f043 0302 	orr.w	r3, r3, #2
 80013d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013d6:	4b15      	ldr	r3, [pc, #84]	@ (800142c <HAL_I2C_MspInit+0x88>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013da:	f003 0302 	and.w	r3, r3, #2
 80013de:	613b      	str	r3, [r7, #16]
 80013e0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80013e2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80013e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013e8:	2312      	movs	r3, #18
 80013ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	2300      	movs	r3, #0
 80013ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f0:	2303      	movs	r3, #3
 80013f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013f4:	2304      	movs	r3, #4
 80013f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013f8:	f107 0314 	add.w	r3, r7, #20
 80013fc:	4619      	mov	r1, r3
 80013fe:	480c      	ldr	r0, [pc, #48]	@ (8001430 <HAL_I2C_MspInit+0x8c>)
 8001400:	f001 f952 	bl	80026a8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001404:	2300      	movs	r3, #0
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	4b08      	ldr	r3, [pc, #32]	@ (800142c <HAL_I2C_MspInit+0x88>)
 800140a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800140c:	4a07      	ldr	r2, [pc, #28]	@ (800142c <HAL_I2C_MspInit+0x88>)
 800140e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001412:	6413      	str	r3, [r2, #64]	@ 0x40
 8001414:	4b05      	ldr	r3, [pc, #20]	@ (800142c <HAL_I2C_MspInit+0x88>)
 8001416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001418:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800141c:	60fb      	str	r3, [r7, #12]
 800141e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001420:	bf00      	nop
 8001422:	3728      	adds	r7, #40	@ 0x28
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	40005400 	.word	0x40005400
 800142c:	40023800 	.word	0x40023800
 8001430:	40020400 	.word	0x40020400

08001434 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a0b      	ldr	r2, [pc, #44]	@ (8001470 <HAL_I2C_MspDeInit+0x3c>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d10f      	bne.n	8001466 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001446:	4b0b      	ldr	r3, [pc, #44]	@ (8001474 <HAL_I2C_MspDeInit+0x40>)
 8001448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800144a:	4a0a      	ldr	r2, [pc, #40]	@ (8001474 <HAL_I2C_MspDeInit+0x40>)
 800144c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001450:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8001452:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001456:	4808      	ldr	r0, [pc, #32]	@ (8001478 <HAL_I2C_MspDeInit+0x44>)
 8001458:	f001 faaa 	bl	80029b0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 800145c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001460:	4805      	ldr	r0, [pc, #20]	@ (8001478 <HAL_I2C_MspDeInit+0x44>)
 8001462:	f001 faa5 	bl	80029b0 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 8001466:	bf00      	nop
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40005400 	.word	0x40005400
 8001474:	40023800 	.word	0x40023800
 8001478:	40020400 	.word	0x40020400

0800147c <HAL_SYSTICK_Callback>:
extern Xyz acc;
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_SYSTICK_Callback(void){
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
	static uint16_t tempoNms = 500;
	static uint16_t tempoEncNms = 40;
	if(tempoNms > 0 )
 8001480:	4b12      	ldr	r3, [pc, #72]	@ (80014cc <HAL_SYSTICK_Callback+0x50>)
 8001482:	881b      	ldrh	r3, [r3, #0]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d006      	beq.n	8001496 <HAL_SYSTICK_Callback+0x1a>
		tempoNms--;
 8001488:	4b10      	ldr	r3, [pc, #64]	@ (80014cc <HAL_SYSTICK_Callback+0x50>)
 800148a:	881b      	ldrh	r3, [r3, #0]
 800148c:	3b01      	subs	r3, #1
 800148e:	b29a      	uxth	r2, r3
 8001490:	4b0e      	ldr	r3, [pc, #56]	@ (80014cc <HAL_SYSTICK_Callback+0x50>)
 8001492:	801a      	strh	r2, [r3, #0]
 8001494:	e007      	b.n	80014a6 <HAL_SYSTICK_Callback+0x2a>
	else{
		tempoNms = 500;
 8001496:	4b0d      	ldr	r3, [pc, #52]	@ (80014cc <HAL_SYSTICK_Callback+0x50>)
 8001498:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800149c:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800149e:	2120      	movs	r1, #32
 80014a0:	480b      	ldr	r0, [pc, #44]	@ (80014d0 <HAL_SYSTICK_Callback+0x54>)
 80014a2:	f001 fb9a 	bl	8002bda <HAL_GPIO_TogglePin>
	}
	if(tempoEncNms > 0 )
 80014a6:	4b0b      	ldr	r3, [pc, #44]	@ (80014d4 <HAL_SYSTICK_Callback+0x58>)
 80014a8:	881b      	ldrh	r3, [r3, #0]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d006      	beq.n	80014bc <HAL_SYSTICK_Callback+0x40>
		tempoEncNms--;
 80014ae:	4b09      	ldr	r3, [pc, #36]	@ (80014d4 <HAL_SYSTICK_Callback+0x58>)
 80014b0:	881b      	ldrh	r3, [r3, #0]
 80014b2:	3b01      	subs	r3, #1
 80014b4:	b29a      	uxth	r2, r3
 80014b6:	4b07      	ldr	r3, [pc, #28]	@ (80014d4 <HAL_SYSTICK_Callback+0x58>)
 80014b8:	801a      	strh	r2, [r3, #0]
	else{
		tempoEncNms = 40;

		DriveSyst();
	}
}
 80014ba:	e004      	b.n	80014c6 <HAL_SYSTICK_Callback+0x4a>
		tempoEncNms = 40;
 80014bc:	4b05      	ldr	r3, [pc, #20]	@ (80014d4 <HAL_SYSTICK_Callback+0x58>)
 80014be:	2228      	movs	r2, #40	@ 0x28
 80014c0:	801a      	strh	r2, [r3, #0]
		DriveSyst();
 80014c2:	f7ff fd61 	bl	8000f88 <DriveSyst>
}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	20000000 	.word	0x20000000
 80014d0:	40020000 	.word	0x40020000
 80014d4:	20000002 	.word	0x20000002

080014d8 <__io_putchar>:

int __io_putchar(int ch){
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80014e0:	1d39      	adds	r1, r7, #4
 80014e2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80014e6:	2201      	movs	r2, #1
 80014e8:	4803      	ldr	r0, [pc, #12]	@ (80014f8 <__io_putchar+0x20>)
 80014ea:	f004 f87b 	bl	80055e4 <HAL_UART_Transmit>
	return ch;
 80014ee:	687b      	ldr	r3, [r7, #4]
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	20000344 	.word	0x20000344
 80014fc:	00000000 	.word	0x00000000

08001500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001500:	b5b0      	push	{r4, r5, r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001504:	f000 ff4e 	bl	80023a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001508:	f000 f900 	bl	800170c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800150c:	f7ff feae 	bl	800126c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001510:	f000 feac 	bl	800226c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001514:	f7ff ff18 	bl	8001348 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001518:	f000 fd04 	bl	8001f24 <MX_TIM1_Init>
  MX_TIM3_Init();
 800151c:	f000 fdae 	bl	800207c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  Motor_Init();
 8001520:	f000 f966 	bl	80017f0 <Motor_Init>
  Encoder_Init();
 8001524:	f7ff fda8 	bl	8001078 <Encoder_Init>
  MPU6050_Init();
 8001528:	f000 f9e6 	bl	80018f8 <MPU6050_Init>

  mode = 2;
 800152c:	4b66      	ldr	r3, [pc, #408]	@ (80016c8 <main+0x1c8>)
 800152e:	2202      	movs	r2, #2
 8001530:	601a      	str	r2, [r3, #0]

  switch(mode)
 8001532:	4b65      	ldr	r3, [pc, #404]	@ (80016c8 <main+0x1c8>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2b02      	cmp	r3, #2
 8001538:	d032      	beq.n	80015a0 <main+0xa0>
 800153a:	2b02      	cmp	r3, #2
 800153c:	dc46      	bgt.n	80015cc <main+0xcc>
 800153e:	2b00      	cmp	r3, #0
 8001540:	d002      	beq.n	8001548 <main+0x48>
 8001542:	2b01      	cmp	r3, #1
 8001544:	d016      	beq.n	8001574 <main+0x74>
 8001546:	e041      	b.n	80015cc <main+0xcc>
  {
      case 0: //vitesse
    	  PID_Init(&pid, 0.2f, 0.03f, 0.03f, 50.0f, 0.01f);
 8001548:	ed9f 2a60 	vldr	s4, [pc, #384]	@ 80016cc <main+0x1cc>
 800154c:	eddf 1a60 	vldr	s3, [pc, #384]	@ 80016d0 <main+0x1d0>
 8001550:	ed9f 1a60 	vldr	s2, [pc, #384]	@ 80016d4 <main+0x1d4>
 8001554:	eddf 0a5f 	vldr	s1, [pc, #380]	@ 80016d4 <main+0x1d4>
 8001558:	ed9f 0a5f 	vldr	s0, [pc, #380]	@ 80016d8 <main+0x1d8>
 800155c:	485f      	ldr	r0, [pc, #380]	@ (80016dc <main+0x1dc>)
 800155e:	f000 faf3 	bl	8001b48 <PID_Init>
    	  pid.input.order = 0.0f;
 8001562:	4b5e      	ldr	r3, [pc, #376]	@ (80016dc <main+0x1dc>)
 8001564:	f04f 0200 	mov.w	r2, #0
 8001568:	615a      	str	r2, [r3, #20]
    	  pid.input.feedback = 0.0f;
 800156a:	4b5c      	ldr	r3, [pc, #368]	@ (80016dc <main+0x1dc>)
 800156c:	f04f 0200 	mov.w	r2, #0
 8001570:	619a      	str	r2, [r3, #24]
    	  break;
 8001572:	e02b      	b.n	80015cc <main+0xcc>

      case 1: //position
          PID_Init(&pid, 0.64f, 0.0f, 0.01f, 50.0f, 0.01f);
 8001574:	ed9f 2a55 	vldr	s4, [pc, #340]	@ 80016cc <main+0x1cc>
 8001578:	eddf 1a55 	vldr	s3, [pc, #340]	@ 80016d0 <main+0x1d0>
 800157c:	ed9f 1a53 	vldr	s2, [pc, #332]	@ 80016cc <main+0x1cc>
 8001580:	eddf 0a57 	vldr	s1, [pc, #348]	@ 80016e0 <main+0x1e0>
 8001584:	ed9f 0a57 	vldr	s0, [pc, #348]	@ 80016e4 <main+0x1e4>
 8001588:	4854      	ldr	r0, [pc, #336]	@ (80016dc <main+0x1dc>)
 800158a:	f000 fadd 	bl	8001b48 <PID_Init>
          pid.input.order = 0.0f;
 800158e:	4b53      	ldr	r3, [pc, #332]	@ (80016dc <main+0x1dc>)
 8001590:	f04f 0200 	mov.w	r2, #0
 8001594:	615a      	str	r2, [r3, #20]
          pid.input.feedback = 0.0f;
 8001596:	4b51      	ldr	r3, [pc, #324]	@ (80016dc <main+0x1dc>)
 8001598:	f04f 0200 	mov.w	r2, #0
 800159c:	619a      	str	r2, [r3, #24]
          break;
 800159e:	e015      	b.n	80015cc <main+0xcc>

      case 2: //acceleration
          PID_Init(&pid, 0.64f, 0.0f, 0.01f, 50.0f, 0.01f);
 80015a0:	ed9f 2a4a 	vldr	s4, [pc, #296]	@ 80016cc <main+0x1cc>
 80015a4:	eddf 1a4a 	vldr	s3, [pc, #296]	@ 80016d0 <main+0x1d0>
 80015a8:	ed9f 1a48 	vldr	s2, [pc, #288]	@ 80016cc <main+0x1cc>
 80015ac:	eddf 0a4c 	vldr	s1, [pc, #304]	@ 80016e0 <main+0x1e0>
 80015b0:	ed9f 0a4c 	vldr	s0, [pc, #304]	@ 80016e4 <main+0x1e4>
 80015b4:	4849      	ldr	r0, [pc, #292]	@ (80016dc <main+0x1dc>)
 80015b6:	f000 fac7 	bl	8001b48 <PID_Init>
          pid.input.order = 0.0f;
 80015ba:	4b48      	ldr	r3, [pc, #288]	@ (80016dc <main+0x1dc>)
 80015bc:	f04f 0200 	mov.w	r2, #0
 80015c0:	615a      	str	r2, [r3, #20]
          pid.input.feedback = 0.0f;
 80015c2:	4b46      	ldr	r3, [pc, #280]	@ (80016dc <main+0x1dc>)
 80015c4:	f04f 0200 	mov.w	r2, #0
 80015c8:	619a      	str	r2, [r3, #24]
          break;
 80015ca:	bf00      	nop
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  printf("\r");
 80015cc:	200d      	movs	r0, #13
 80015ce:	f005 f8f1 	bl	80067b4 <putchar>
	  printf("angle absolu : %f", encoder.angle_abs);
 80015d2:	4b45      	ldr	r3, [pc, #276]	@ (80016e8 <main+0x1e8>)
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7fe ffbe 	bl	8000558 <__aeabi_f2d>
 80015dc:	4602      	mov	r2, r0
 80015de:	460b      	mov	r3, r1
 80015e0:	4842      	ldr	r0, [pc, #264]	@ (80016ec <main+0x1ec>)
 80015e2:	f005 f8d5 	bl	8006790 <iprintf>
	  printf("   ");
 80015e6:	4842      	ldr	r0, [pc, #264]	@ (80016f0 <main+0x1f0>)
 80015e8:	f005 f8d2 	bl	8006790 <iprintf>
	  printf("angle relatif : %f", encoder.angle_rel);
 80015ec:	4b3e      	ldr	r3, [pc, #248]	@ (80016e8 <main+0x1e8>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7fe ffb1 	bl	8000558 <__aeabi_f2d>
 80015f6:	4602      	mov	r2, r0
 80015f8:	460b      	mov	r3, r1
 80015fa:	483e      	ldr	r0, [pc, #248]	@ (80016f4 <main+0x1f4>)
 80015fc:	f005 f8c8 	bl	8006790 <iprintf>
	  printf("   ");
 8001600:	483b      	ldr	r0, [pc, #236]	@ (80016f0 <main+0x1f0>)
 8001602:	f005 f8c5 	bl	8006790 <iprintf>
	  //printf("vitesse : %f", encoder.d_angle);
	  printf("vitesse : %f", atan2(acc.y, acc.z) + (M_PI/2));
 8001606:	4b3c      	ldr	r3, [pc, #240]	@ (80016f8 <main+0x1f8>)
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	4618      	mov	r0, r3
 800160c:	f7fe ffa4 	bl	8000558 <__aeabi_f2d>
 8001610:	4604      	mov	r4, r0
 8001612:	460d      	mov	r5, r1
 8001614:	4b38      	ldr	r3, [pc, #224]	@ (80016f8 <main+0x1f8>)
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	4618      	mov	r0, r3
 800161a:	f7fe ff9d 	bl	8000558 <__aeabi_f2d>
 800161e:	4602      	mov	r2, r0
 8001620:	460b      	mov	r3, r1
 8001622:	ec43 2b11 	vmov	d1, r2, r3
 8001626:	ec45 4b10 	vmov	d0, r4, r5
 800162a:	f007 f867 	bl	80086fc <atan2>
 800162e:	ec51 0b10 	vmov	r0, r1, d0
 8001632:	a321      	add	r3, pc, #132	@ (adr r3, 80016b8 <main+0x1b8>)
 8001634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001638:	f7fe fe30 	bl	800029c <__adddf3>
 800163c:	4602      	mov	r2, r0
 800163e:	460b      	mov	r3, r1
 8001640:	482e      	ldr	r0, [pc, #184]	@ (80016fc <main+0x1fc>)
 8001642:	f005 f8a5 	bl	8006790 <iprintf>

	  //gestion du bouton
	  if(HAL_GPIO_ReadPin (GPIOC, GPIO_PIN_13) == 0){
 8001646:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800164a:	482d      	ldr	r0, [pc, #180]	@ (8001700 <main+0x200>)
 800164c:	f001 fa94 	bl	8002b78 <HAL_GPIO_ReadPin>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d1ba      	bne.n	80015cc <main+0xcc>
		  printf("\r button pressed");
 8001656:	482b      	ldr	r0, [pc, #172]	@ (8001704 <main+0x204>)
 8001658:	f005 f89a 	bl	8006790 <iprintf>
		  if(pid.input.order < (2*M_PI)){
 800165c:	4b1f      	ldr	r3, [pc, #124]	@ (80016dc <main+0x1dc>)
 800165e:	695b      	ldr	r3, [r3, #20]
 8001660:	4618      	mov	r0, r3
 8001662:	f7fe ff79 	bl	8000558 <__aeabi_f2d>
 8001666:	a316      	add	r3, pc, #88	@ (adr r3, 80016c0 <main+0x1c0>)
 8001668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800166c:	f7ff fa3e 	bl	8000aec <__aeabi_dcmplt>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d017      	beq.n	80016a6 <main+0x1a6>
			  pid.input.order = pid.input.order + (M_PI/2);
 8001676:	4b19      	ldr	r3, [pc, #100]	@ (80016dc <main+0x1dc>)
 8001678:	695b      	ldr	r3, [r3, #20]
 800167a:	4618      	mov	r0, r3
 800167c:	f7fe ff6c 	bl	8000558 <__aeabi_f2d>
 8001680:	a30d      	add	r3, pc, #52	@ (adr r3, 80016b8 <main+0x1b8>)
 8001682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001686:	f7fe fe09 	bl	800029c <__adddf3>
 800168a:	4602      	mov	r2, r0
 800168c:	460b      	mov	r3, r1
 800168e:	4610      	mov	r0, r2
 8001690:	4619      	mov	r1, r3
 8001692:	f7ff fab1 	bl	8000bf8 <__aeabi_d2f>
 8001696:	4603      	mov	r3, r0
 8001698:	4a10      	ldr	r2, [pc, #64]	@ (80016dc <main+0x1dc>)
 800169a:	6153      	str	r3, [r2, #20]
			  HAL_Delay(500);
 800169c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80016a0:	f000 fef2 	bl	8002488 <HAL_Delay>
 80016a4:	e792      	b.n	80015cc <main+0xcc>
		  }else{
			  pid.input.order = (-2*M_PI);
 80016a6:	4b0d      	ldr	r3, [pc, #52]	@ (80016dc <main+0x1dc>)
 80016a8:	4a17      	ldr	r2, [pc, #92]	@ (8001708 <main+0x208>)
 80016aa:	615a      	str	r2, [r3, #20]
			  HAL_Delay(500);
 80016ac:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80016b0:	f000 feea 	bl	8002488 <HAL_Delay>
	  printf("\r");
 80016b4:	e78a      	b.n	80015cc <main+0xcc>
 80016b6:	bf00      	nop
 80016b8:	54442d18 	.word	0x54442d18
 80016bc:	3ff921fb 	.word	0x3ff921fb
 80016c0:	54442d18 	.word	0x54442d18
 80016c4:	401921fb 	.word	0x401921fb
 80016c8:	2000023c 	.word	0x2000023c
 80016cc:	3c23d70a 	.word	0x3c23d70a
 80016d0:	42480000 	.word	0x42480000
 80016d4:	3cf5c28f 	.word	0x3cf5c28f
 80016d8:	3e4ccccd 	.word	0x3e4ccccd
 80016dc:	200001f4 	.word	0x200001f4
 80016e0:	00000000 	.word	0x00000000
 80016e4:	3f23d70a 	.word	0x3f23d70a
 80016e8:	20000224 	.word	0x20000224
 80016ec:	08008be8 	.word	0x08008be8
 80016f0:	08008bfc 	.word	0x08008bfc
 80016f4:	08008c00 	.word	0x08008c00
 80016f8:	20000230 	.word	0x20000230
 80016fc:	08008c14 	.word	0x08008c14
 8001700:	40020800 	.word	0x40020800
 8001704:	08008c24 	.word	0x08008c24
 8001708:	c0c90fdb 	.word	0xc0c90fdb

0800170c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b094      	sub	sp, #80	@ 0x50
 8001710:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001712:	f107 0320 	add.w	r3, r7, #32
 8001716:	2230      	movs	r2, #48	@ 0x30
 8001718:	2100      	movs	r1, #0
 800171a:	4618      	mov	r0, r3
 800171c:	f005 f895 	bl	800684a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001720:	f107 030c 	add.w	r3, r7, #12
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	605a      	str	r2, [r3, #4]
 800172a:	609a      	str	r2, [r3, #8]
 800172c:	60da      	str	r2, [r3, #12]
 800172e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001730:	2300      	movs	r3, #0
 8001732:	60bb      	str	r3, [r7, #8]
 8001734:	4b29      	ldr	r3, [pc, #164]	@ (80017dc <SystemClock_Config+0xd0>)
 8001736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001738:	4a28      	ldr	r2, [pc, #160]	@ (80017dc <SystemClock_Config+0xd0>)
 800173a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800173e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001740:	4b26      	ldr	r3, [pc, #152]	@ (80017dc <SystemClock_Config+0xd0>)
 8001742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001744:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001748:	60bb      	str	r3, [r7, #8]
 800174a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800174c:	2300      	movs	r3, #0
 800174e:	607b      	str	r3, [r7, #4]
 8001750:	4b23      	ldr	r3, [pc, #140]	@ (80017e0 <SystemClock_Config+0xd4>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001758:	4a21      	ldr	r2, [pc, #132]	@ (80017e0 <SystemClock_Config+0xd4>)
 800175a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800175e:	6013      	str	r3, [r2, #0]
 8001760:	4b1f      	ldr	r3, [pc, #124]	@ (80017e0 <SystemClock_Config+0xd4>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001768:	607b      	str	r3, [r7, #4]
 800176a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800176c:	2302      	movs	r3, #2
 800176e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001770:	2301      	movs	r3, #1
 8001772:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001774:	2310      	movs	r3, #16
 8001776:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001778:	2302      	movs	r3, #2
 800177a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800177c:	2300      	movs	r3, #0
 800177e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001780:	2310      	movs	r3, #16
 8001782:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001784:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001788:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800178a:	2304      	movs	r3, #4
 800178c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800178e:	2307      	movs	r3, #7
 8001790:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001792:	f107 0320 	add.w	r3, r7, #32
 8001796:	4618      	mov	r0, r3
 8001798:	f002 fa8e 	bl	8003cb8 <HAL_RCC_OscConfig>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80017a2:	f000 f81f 	bl	80017e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017a6:	230f      	movs	r3, #15
 80017a8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017aa:	2302      	movs	r3, #2
 80017ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017ae:	2300      	movs	r3, #0
 80017b0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017b8:	2300      	movs	r3, #0
 80017ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017bc:	f107 030c 	add.w	r3, r7, #12
 80017c0:	2102      	movs	r1, #2
 80017c2:	4618      	mov	r0, r3
 80017c4:	f002 fcf0 	bl	80041a8 <HAL_RCC_ClockConfig>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80017ce:	f000 f809 	bl	80017e4 <Error_Handler>
  }
}
 80017d2:	bf00      	nop
 80017d4:	3750      	adds	r7, #80	@ 0x50
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40023800 	.word	0x40023800
 80017e0:	40007000 	.word	0x40007000

080017e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017e8:	b672      	cpsid	i
}
 80017ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017ec:	bf00      	nop
 80017ee:	e7fd      	b.n	80017ec <Error_Handler+0x8>

080017f0 <Motor_Init>:
#include "motor.h"
#include "tim.h"
#include <stdio.h>
#include <math.h>

void Motor_Init(void){
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
	//printf("init_motor");
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80017f4:	2100      	movs	r1, #0
 80017f6:	4804      	ldr	r0, [pc, #16]	@ (8001808 <Motor_Init+0x18>)
 80017f8:	f002 ff9e 	bl	8004738 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80017fc:	2104      	movs	r1, #4
 80017fe:	4802      	ldr	r0, [pc, #8]	@ (8001808 <Motor_Init+0x18>)
 8001800:	f002 ff9a 	bl	8004738 <HAL_TIM_PWM_Start>

	//htim1.Instance->CCR1 = htim1.Init.Period/2;
	//htim1.Instance->CCR2 = htim1.Init.Period/4;
}
 8001804:	bf00      	nop
 8001806:	bd80      	pop	{r7, pc}
 8001808:	200002b4 	.word	0x200002b4

0800180c <Motor_Pwm_Update>:



void Motor_Pwm_Update(float in){
 800180c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	ed87 0a01 	vstr	s0, [r7, #4]

	if(in > 1.0){
 8001816:	edd7 7a01 	vldr	s15, [r7, #4]
 800181a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800181e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001826:	dd02      	ble.n	800182e <Motor_Pwm_Update+0x22>
		in = 1.0;
 8001828:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800182c:	607b      	str	r3, [r7, #4]
	}
	if(in < -1.0){
 800182e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001832:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001836:	eef4 7ac7 	vcmpe.f32	s15, s14
 800183a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800183e:	d501      	bpl.n	8001844 <Motor_Pwm_Update+0x38>
		in = -1.0;
 8001840:	4b2b      	ldr	r3, [pc, #172]	@ (80018f0 <Motor_Pwm_Update+0xe4>)
 8001842:	607b      	str	r3, [r7, #4]
	}

	uint32_t speed = htim1.Init.Period - (uint32_t)(fabs(in) * htim1.Init.Period);
 8001844:	4b2b      	ldr	r3, [pc, #172]	@ (80018f4 <Motor_Pwm_Update+0xe8>)
 8001846:	68de      	ldr	r6, [r3, #12]
 8001848:	edd7 7a01 	vldr	s15, [r7, #4]
 800184c:	eef0 7ae7 	vabs.f32	s15, s15
 8001850:	ee17 0a90 	vmov	r0, s15
 8001854:	f7fe fe80 	bl	8000558 <__aeabi_f2d>
 8001858:	4604      	mov	r4, r0
 800185a:	460d      	mov	r5, r1
 800185c:	4b25      	ldr	r3, [pc, #148]	@ (80018f4 <Motor_Pwm_Update+0xe8>)
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	4618      	mov	r0, r3
 8001862:	f7fe fe57 	bl	8000514 <__aeabi_ui2d>
 8001866:	4602      	mov	r2, r0
 8001868:	460b      	mov	r3, r1
 800186a:	4620      	mov	r0, r4
 800186c:	4629      	mov	r1, r5
 800186e:	f7fe fecb 	bl	8000608 <__aeabi_dmul>
 8001872:	4602      	mov	r2, r0
 8001874:	460b      	mov	r3, r1
 8001876:	4610      	mov	r0, r2
 8001878:	4619      	mov	r1, r3
 800187a:	f7ff f99d 	bl	8000bb8 <__aeabi_d2uiz>
 800187e:	4603      	mov	r3, r0
 8001880:	1af3      	subs	r3, r6, r3
 8001882:	60fb      	str	r3, [r7, #12]

	if(in > 0.0f){
 8001884:	edd7 7a01 	vldr	s15, [r7, #4]
 8001888:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800188c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001890:	dd08      	ble.n	80018a4 <Motor_Pwm_Update+0x98>
		htim1.Instance->CCR1 = speed;
 8001892:	4b18      	ldr	r3, [pc, #96]	@ (80018f4 <Motor_Pwm_Update+0xe8>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	68fa      	ldr	r2, [r7, #12]
 8001898:	635a      	str	r2, [r3, #52]	@ 0x34
		htim1.Instance->CCR2 = htim1.Init.Period;
 800189a:	4b16      	ldr	r3, [pc, #88]	@ (80018f4 <Motor_Pwm_Update+0xe8>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a15      	ldr	r2, [pc, #84]	@ (80018f4 <Motor_Pwm_Update+0xe8>)
 80018a0:	68d2      	ldr	r2, [r2, #12]
 80018a2:	639a      	str	r2, [r3, #56]	@ 0x38
	}
	if(in < 0.0f){
 80018a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80018a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018b0:	d508      	bpl.n	80018c4 <Motor_Pwm_Update+0xb8>
		htim1.Instance->CCR2 = speed;
 80018b2:	4b10      	ldr	r3, [pc, #64]	@ (80018f4 <Motor_Pwm_Update+0xe8>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	68fa      	ldr	r2, [r7, #12]
 80018b8:	639a      	str	r2, [r3, #56]	@ 0x38
		htim1.Instance->CCR1 = htim1.Init.Period;
 80018ba:	4b0e      	ldr	r3, [pc, #56]	@ (80018f4 <Motor_Pwm_Update+0xe8>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a0d      	ldr	r2, [pc, #52]	@ (80018f4 <Motor_Pwm_Update+0xe8>)
 80018c0:	68d2      	ldr	r2, [r2, #12]
 80018c2:	635a      	str	r2, [r3, #52]	@ 0x34
	}
	if(in == 0.0f){
 80018c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80018c8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80018cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018d0:	d109      	bne.n	80018e6 <Motor_Pwm_Update+0xda>
		htim1.Instance->CCR1 = htim1.Init.Period;
 80018d2:	4b08      	ldr	r3, [pc, #32]	@ (80018f4 <Motor_Pwm_Update+0xe8>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a07      	ldr	r2, [pc, #28]	@ (80018f4 <Motor_Pwm_Update+0xe8>)
 80018d8:	68d2      	ldr	r2, [r2, #12]
 80018da:	635a      	str	r2, [r3, #52]	@ 0x34
		htim1.Instance->CCR2 = htim1.Init.Period;
 80018dc:	4b05      	ldr	r3, [pc, #20]	@ (80018f4 <Motor_Pwm_Update+0xe8>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a04      	ldr	r2, [pc, #16]	@ (80018f4 <Motor_Pwm_Update+0xe8>)
 80018e2:	68d2      	ldr	r2, [r2, #12]
 80018e4:	639a      	str	r2, [r3, #56]	@ 0x38
	}
}
 80018e6:	bf00      	nop
 80018e8:	3714      	adds	r7, #20
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018ee:	bf00      	nop
 80018f0:	bf800000 	.word	0xbf800000
 80018f4:	200002b4 	.word	0x200002b4

080018f8 <MPU6050_Init>:
float Ax_bias = 0;
float Ay_bias = 0;
float Az_bias = 0;

void MPU6050_Init (void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b088      	sub	sp, #32
 80018fc:	af04      	add	r7, sp, #16
	uint8_t check = 0;
 80018fe:	2300      	movs	r3, #0
 8001900:	73bb      	strb	r3, [r7, #14]
	uint8_t Data = 0;
 8001902:	2300      	movs	r3, #0
 8001904:	737b      	strb	r3, [r7, #13]
	HAL_StatusTypeDef ret = 0;
 8001906:	2300      	movs	r3, #0
 8001908:	73fb      	strb	r3, [r7, #15]
	ret = HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 800190a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800190e:	9302      	str	r3, [sp, #8]
 8001910:	2301      	movs	r3, #1
 8001912:	9301      	str	r3, [sp, #4]
 8001914:	f107 030e 	add.w	r3, r7, #14
 8001918:	9300      	str	r3, [sp, #0]
 800191a:	2301      	movs	r3, #1
 800191c:	2275      	movs	r2, #117	@ 0x75
 800191e:	21d0      	movs	r1, #208	@ 0xd0
 8001920:	483b      	ldr	r0, [pc, #236]	@ (8001a10 <MPU6050_Init+0x118>)
 8001922:	f001 fbe3 	bl	80030ec <HAL_I2C_Mem_Read>
 8001926:	4603      	mov	r3, r0
 8001928:	73fb      	strb	r3, [r7, #15]
	if(ret != 0)
 800192a:	7bfb      	ldrb	r3, [r7, #15]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d008      	beq.n	8001942 <MPU6050_Init+0x4a>
	{
		HAL_I2C_DeInit(&hi2c1); // Release IO port as GPIO, reset handle status flag
 8001930:	4837      	ldr	r0, [pc, #220]	@ (8001a10 <MPU6050_Init+0x118>)
 8001932:	f001 fab1 	bl	8002e98 <HAL_I2C_DeInit>
		HAL_I2C_Init(&hi2c1); //This sentence reinitializes the I2C controller
 8001936:	4836      	ldr	r0, [pc, #216]	@ (8001a10 <MPU6050_Init+0x118>)
 8001938:	f001 f96a 	bl	8002c10 <HAL_I2C_Init>
		HAL_Delay(100);
 800193c:	2064      	movs	r0, #100	@ 0x64
 800193e:	f000 fda3 	bl	8002488 <HAL_Delay>
	}
	// check device ID WHO_AM_I
	ret = HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 8001942:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001946:	9302      	str	r3, [sp, #8]
 8001948:	2301      	movs	r3, #1
 800194a:	9301      	str	r3, [sp, #4]
 800194c:	f107 030e 	add.w	r3, r7, #14
 8001950:	9300      	str	r3, [sp, #0]
 8001952:	2301      	movs	r3, #1
 8001954:	2275      	movs	r2, #117	@ 0x75
 8001956:	21d0      	movs	r1, #208	@ 0xd0
 8001958:	482d      	ldr	r0, [pc, #180]	@ (8001a10 <MPU6050_Init+0x118>)
 800195a:	f001 fbc7 	bl	80030ec <HAL_I2C_Mem_Read>
 800195e:	4603      	mov	r3, r0
 8001960:	73fb      	strb	r3, [r7, #15]
	if (check >= 0x68 && check <= 0x73) // values of compatible MPU chips (6050,6500, 9250, 9255, ...)
 8001962:	7bbb      	ldrb	r3, [r7, #14]
 8001964:	2b67      	cmp	r3, #103	@ 0x67
 8001966:	d94f      	bls.n	8001a08 <MPU6050_Init+0x110>
 8001968:	7bbb      	ldrb	r3, [r7, #14]
 800196a:	2b73      	cmp	r3, #115	@ 0x73
 800196c:	d84c      	bhi.n	8001a08 <MPU6050_Init+0x110>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 800196e:	2300      	movs	r3, #0
 8001970:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 8001972:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001976:	9302      	str	r3, [sp, #8]
 8001978:	2301      	movs	r3, #1
 800197a:	9301      	str	r3, [sp, #4]
 800197c:	f107 030d 	add.w	r3, r7, #13
 8001980:	9300      	str	r3, [sp, #0]
 8001982:	2301      	movs	r3, #1
 8001984:	226b      	movs	r2, #107	@ 0x6b
 8001986:	21d0      	movs	r1, #208	@ 0xd0
 8001988:	4821      	ldr	r0, [pc, #132]	@ (8001a10 <MPU6050_Init+0x118>)
 800198a:	f001 fab5 	bl	8002ef8 <HAL_I2C_Mem_Write>
		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 800198e:	2307      	movs	r3, #7
 8001990:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1,1000);
 8001992:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001996:	9302      	str	r3, [sp, #8]
 8001998:	2301      	movs	r3, #1
 800199a:	9301      	str	r3, [sp, #4]
 800199c:	f107 030d 	add.w	r3, r7, #13
 80019a0:	9300      	str	r3, [sp, #0]
 80019a2:	2301      	movs	r3, #1
 80019a4:	2219      	movs	r2, #25
 80019a6:	21d0      	movs	r1, #208	@ 0xd0
 80019a8:	4819      	ldr	r0, [pc, #100]	@ (8001a10 <MPU6050_Init+0x118>)
 80019aa:	f001 faa5 	bl	8002ef8 <HAL_I2C_Mem_Write>
		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> ± 2g
		Data = 0x00;
 80019ae:	2300      	movs	r3, #0
 80019b0:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1,1000);
 80019b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019b6:	9302      	str	r3, [sp, #8]
 80019b8:	2301      	movs	r3, #1
 80019ba:	9301      	str	r3, [sp, #4]
 80019bc:	f107 030d 	add.w	r3, r7, #13
 80019c0:	9300      	str	r3, [sp, #0]
 80019c2:	2301      	movs	r3, #1
 80019c4:	221c      	movs	r2, #28
 80019c6:	21d0      	movs	r1, #208	@ 0xd0
 80019c8:	4811      	ldr	r0, [pc, #68]	@ (8001a10 <MPU6050_Init+0x118>)
 80019ca:	f001 fa95 	bl	8002ef8 <HAL_I2C_Mem_Write>
		Xyz accel;
		accel = MPU6050_Read_Accel();
 80019ce:	f000 f827 	bl	8001a20 <MPU6050_Read_Accel>
 80019d2:	eef0 6a40 	vmov.f32	s13, s0
 80019d6:	eeb0 7a60 	vmov.f32	s14, s1
 80019da:	eef0 7a41 	vmov.f32	s15, s2
 80019de:	edc7 6a00 	vstr	s13, [r7]
 80019e2:	ed87 7a01 	vstr	s14, [r7, #4]
 80019e6:	edc7 7a02 	vstr	s15, [r7, #8]
		Ax_bias = accel.x - 1;
 80019ea:	edd7 7a00 	vldr	s15, [r7]
 80019ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80019f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80019f6:	4b07      	ldr	r3, [pc, #28]	@ (8001a14 <MPU6050_Init+0x11c>)
 80019f8:	edc3 7a00 	vstr	s15, [r3]
		Ay_bias = accel.y;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	4a06      	ldr	r2, [pc, #24]	@ (8001a18 <MPU6050_Init+0x120>)
 8001a00:	6013      	str	r3, [r2, #0]
		Az_bias = accel.z;
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	4a05      	ldr	r2, [pc, #20]	@ (8001a1c <MPU6050_Init+0x124>)
 8001a06:	6013      	str	r3, [r2, #0]
	}
}
 8001a08:	bf00      	nop
 8001a0a:	3710      	adds	r7, #16
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	20000250 	.word	0x20000250
 8001a14:	200002a4 	.word	0x200002a4
 8001a18:	200002a8 	.word	0x200002a8
 8001a1c:	200002ac 	.word	0x200002ac

08001a20 <MPU6050_Read_Accel>:


Xyz MPU6050_Read_Accel (void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b092      	sub	sp, #72	@ 0x48
 8001a24:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6] = {0, 0, 0, 0, 0, 0};
 8001a26:	4a42      	ldr	r2, [pc, #264]	@ (8001b30 <MPU6050_Read_Accel+0x110>)
 8001a28:	f107 031c 	add.w	r3, r7, #28
 8001a2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a30:	6018      	str	r0, [r3, #0]
 8001a32:	3304      	adds	r3, #4
 8001a34:	8019      	strh	r1, [r3, #0]
	Xyz accel;
	HAL_StatusTypeDef ret = 0;
 8001a36:	2300      	movs	r3, #0
 8001a38:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	int16_t Accel_X_RAW = 0;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	86bb      	strh	r3, [r7, #52]	@ 0x34
	int16_t Accel_Y_RAW = 0;
 8001a40:	2300      	movs	r3, #0
 8001a42:	867b      	strh	r3, [r7, #50]	@ 0x32
	int16_t Accel_Z_RAW = 0;
 8001a44:	2300      	movs	r3, #0
 8001a46:	863b      	strh	r3, [r7, #48]	@ 0x30
	// Read 6 BYTES of data starting from ACCEL_XOUT_H register
	ret = HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data,6, 1000);
 8001a48:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a4c:	9302      	str	r3, [sp, #8]
 8001a4e:	2306      	movs	r3, #6
 8001a50:	9301      	str	r3, [sp, #4]
 8001a52:	f107 031c 	add.w	r3, r7, #28
 8001a56:	9300      	str	r3, [sp, #0]
 8001a58:	2301      	movs	r3, #1
 8001a5a:	223b      	movs	r2, #59	@ 0x3b
 8001a5c:	21d0      	movs	r1, #208	@ 0xd0
 8001a5e:	4835      	ldr	r0, [pc, #212]	@ (8001b34 <MPU6050_Read_Accel+0x114>)
 8001a60:	f001 fb44 	bl	80030ec <HAL_I2C_Mem_Read>
 8001a64:	4603      	mov	r3, r0
 8001a66:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8001a6a:	7f3b      	ldrb	r3, [r7, #28]
 8001a6c:	021b      	lsls	r3, r3, #8
 8001a6e:	b21a      	sxth	r2, r3
 8001a70:	7f7b      	ldrb	r3, [r7, #29]
 8001a72:	b21b      	sxth	r3, r3
 8001a74:	4313      	orrs	r3, r2
 8001a76:	86bb      	strh	r3, [r7, #52]	@ 0x34
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8001a78:	7fbb      	ldrb	r3, [r7, #30]
 8001a7a:	021b      	lsls	r3, r3, #8
 8001a7c:	b21a      	sxth	r2, r3
 8001a7e:	7ffb      	ldrb	r3, [r7, #31]
 8001a80:	b21b      	sxth	r3, r3
 8001a82:	4313      	orrs	r3, r2
 8001a84:	867b      	strh	r3, [r7, #50]	@ 0x32
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8001a86:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a8a:	021b      	lsls	r3, r3, #8
 8001a8c:	b21a      	sxth	r2, r3
 8001a8e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001a92:	b21b      	sxth	r3, r3
 8001a94:	4313      	orrs	r3, r2
 8001a96:	863b      	strh	r3, [r7, #48]	@ 0x30
	accel.x = ((float)Accel_X_RAW)/16384.0F - Ax_bias;
 8001a98:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8001a9c:	ee07 3a90 	vmov	s15, r3
 8001aa0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001aa4:	eddf 6a24 	vldr	s13, [pc, #144]	@ 8001b38 <MPU6050_Read_Accel+0x118>
 8001aa8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001aac:	4b23      	ldr	r3, [pc, #140]	@ (8001b3c <MPU6050_Read_Accel+0x11c>)
 8001aae:	edd3 7a00 	vldr	s15, [r3]
 8001ab2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ab6:	edc7 7a04 	vstr	s15, [r7, #16]
	accel.y = ((float)Accel_Y_RAW)/16384.0F - Ay_bias;
 8001aba:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8001abe:	ee07 3a90 	vmov	s15, r3
 8001ac2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ac6:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 8001b38 <MPU6050_Read_Accel+0x118>
 8001aca:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001ace:	4b1c      	ldr	r3, [pc, #112]	@ (8001b40 <MPU6050_Read_Accel+0x120>)
 8001ad0:	edd3 7a00 	vldr	s15, [r3]
 8001ad4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ad8:	edc7 7a05 	vstr	s15, [r7, #20]
	accel.z = ((float)Accel_Z_RAW)/16384.0F - Az_bias;
 8001adc:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8001ae0:	ee07 3a90 	vmov	s15, r3
 8001ae4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ae8:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8001b38 <MPU6050_Read_Accel+0x118>
 8001aec:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001af0:	4b14      	ldr	r3, [pc, #80]	@ (8001b44 <MPU6050_Read_Accel+0x124>)
 8001af2:	edd3 7a00 	vldr	s15, [r3]
 8001af6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001afa:	edc7 7a06 	vstr	s15, [r7, #24]
	return accel;
 8001afe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b02:	f107 0210 	add.w	r2, r7, #16
 8001b06:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b08:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001b0c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001b0e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001b10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b12:	ee06 1a90 	vmov	s13, r1
 8001b16:	ee07 2a10 	vmov	s14, r2
 8001b1a:	ee07 3a90 	vmov	s15, r3
}
 8001b1e:	eeb0 0a66 	vmov.f32	s0, s13
 8001b22:	eef0 0a47 	vmov.f32	s1, s14
 8001b26:	eeb0 1a67 	vmov.f32	s2, s15
 8001b2a:	3738      	adds	r7, #56	@ 0x38
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	08008c38 	.word	0x08008c38
 8001b34:	20000250 	.word	0x20000250
 8001b38:	46800000 	.word	0x46800000
 8001b3c:	200002a4 	.word	0x200002a4
 8001b40:	200002a8 	.word	0x200002a8
 8001b44:	200002ac 	.word	0x200002ac

08001b48 <PID_Init>:

#include "pid.h"
#include <math.h>


void PID_Init(PID_t* pidHandle, float Kp, float Ki, float Kd, float windup, float error_stop){
 8001b48:	b480      	push	{r7}
 8001b4a:	b087      	sub	sp, #28
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6178      	str	r0, [r7, #20]
 8001b50:	ed87 0a04 	vstr	s0, [r7, #16]
 8001b54:	edc7 0a03 	vstr	s1, [r7, #12]
 8001b58:	ed87 1a02 	vstr	s2, [r7, #8]
 8001b5c:	edc7 1a01 	vstr	s3, [r7, #4]
 8001b60:	ed87 2a00 	vstr	s4, [r7]

	 // Initialisation des coefficients PID
	 pidHandle->init.Kp = Kp;
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	601a      	str	r2, [r3, #0]
	 pidHandle->init.Ki = Ki;
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	68fa      	ldr	r2, [r7, #12]
 8001b6e:	605a      	str	r2, [r3, #4]
	 pidHandle->init.Kd = Kd;
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	68ba      	ldr	r2, [r7, #8]
 8001b74:	609a      	str	r2, [r3, #8]
	 pidHandle->init.integ_sat = windup;
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	60da      	str	r2, [r3, #12]
	 pidHandle->init.error_stop = error_stop;
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	683a      	ldr	r2, [r7, #0]
 8001b80:	611a      	str	r2, [r3, #16]

	 // Réinitialisation des variables de processus
	 pidHandle->process.error = 0.0f;
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	f04f 0200 	mov.w	r2, #0
 8001b88:	61da      	str	r2, [r3, #28]
	 pidHandle->process.previous_error = 0.0f;
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	f04f 0200 	mov.w	r2, #0
 8001b90:	621a      	str	r2, [r3, #32]
	 pidHandle->process.deriv = 0.0f;
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	f04f 0200 	mov.w	r2, #0
 8001b98:	625a      	str	r2, [r3, #36]	@ 0x24
	 pidHandle->process.integ = 0.0f;
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	f04f 0200 	mov.w	r2, #0
 8001ba0:	629a      	str	r2, [r3, #40]	@ 0x28
	 pidHandle->process.output = 0.0f;
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	f04f 0200 	mov.w	r2, #0
 8001ba8:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8001baa:	bf00      	nop
 8001bac:	371c      	adds	r7, #28
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr

08001bb6 <PID_Execute>:


float PID_Execute(PID_t* pidHandle){
 8001bb6:	b480      	push	{r7}
 8001bb8:	b083      	sub	sp, #12
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
	 // error
	 pidHandle->process.error = pidHandle->input.order - pidHandle->input.feedback;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	ed93 7a05 	vldr	s14, [r3, #20]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	edd3 7a06 	vldr	s15, [r3, #24]
 8001bca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	edc3 7a07 	vstr	s15, [r3, #28]

	 // derivate
	 pidHandle->process.deriv = pidHandle->process.error - pidHandle->process.previous_error;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	ed93 7a07 	vldr	s14, [r3, #28]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	edd3 7a08 	vldr	s15, [r3, #32]
 8001be0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24


	 // integer
	 if (fabsf(pidHandle->process.error) > pidHandle->init.error_stop) {
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	edd3 7a07 	vldr	s15, [r3, #28]
 8001bf0:	eeb0 7ae7 	vabs.f32	s14, s15
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	edd3 7a04 	vldr	s15, [r3, #16]
 8001bfa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c02:	dd2f      	ble.n	8001c64 <PID_Execute+0xae>
		 pidHandle->process.integ += pidHandle->process.error;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	edd3 7a07 	vldr	s15, [r3, #28]
 8001c10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
		 if (pidHandle->process.integ > pidHandle->init.integ_sat) {
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	edd3 7a03 	vldr	s15, [r3, #12]
 8001c26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c2e:	dd04      	ble.n	8001c3a <PID_Execute+0x84>
			 pidHandle->process.integ = pidHandle->init.integ_sat;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	68da      	ldr	r2, [r3, #12]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	629a      	str	r2, [r3, #40]	@ 0x28
 8001c38:	e014      	b.n	8001c64 <PID_Execute+0xae>
		 } else if (pidHandle->process.integ < -pidHandle->init.integ_sat) {
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	edd3 7a03 	vldr	s15, [r3, #12]
 8001c46:	eef1 7a67 	vneg.f32	s15, s15
 8001c4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c52:	d507      	bpl.n	8001c64 <PID_Execute+0xae>
			 pidHandle->process.integ = -pidHandle->init.integ_sat;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	edd3 7a03 	vldr	s15, [r3, #12]
 8001c5a:	eef1 7a67 	vneg.f32	s15, s15
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
		 }
	 }

	 //command
	 pidHandle->process.output = pidHandle->init.Kp * pidHandle->process.error
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	ed93 7a00 	vldr	s14, [r3]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	edd3 7a07 	vldr	s15, [r3, #28]
 8001c70:	ee27 7a27 	vmul.f32	s14, s14, s15
			 	 	 	 	   + pidHandle->init.Ki * pidHandle->process.integ
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	edd3 6a01 	vldr	s13, [r3, #4]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001c80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c84:	ee37 7a27 	vadd.f32	s14, s14, s15
							   - pidHandle->init.Kd * pidHandle->process.deriv;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	edd3 6a02 	vldr	s13, [r3, #8]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001c94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c98:	ee77 7a67 	vsub.f32	s15, s14, s15
	 pidHandle->process.output = pidHandle->init.Kp * pidHandle->process.error
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	 pidHandle->process.previous_error = pidHandle->process.error;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	69da      	ldr	r2, [r3, #28]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	621a      	str	r2, [r3, #32]

	 return pidHandle->process.output;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cae:	ee07 3a90 	vmov	s15, r3

}
 8001cb2:	eeb0 0a67 	vmov.f32	s0, s15
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	607b      	str	r3, [r7, #4]
 8001cca:	4b10      	ldr	r3, [pc, #64]	@ (8001d0c <HAL_MspInit+0x4c>)
 8001ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cce:	4a0f      	ldr	r2, [pc, #60]	@ (8001d0c <HAL_MspInit+0x4c>)
 8001cd0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cd4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8001d0c <HAL_MspInit+0x4c>)
 8001cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cde:	607b      	str	r3, [r7, #4]
 8001ce0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	603b      	str	r3, [r7, #0]
 8001ce6:	4b09      	ldr	r3, [pc, #36]	@ (8001d0c <HAL_MspInit+0x4c>)
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cea:	4a08      	ldr	r2, [pc, #32]	@ (8001d0c <HAL_MspInit+0x4c>)
 8001cec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cf0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cf2:	4b06      	ldr	r3, [pc, #24]	@ (8001d0c <HAL_MspInit+0x4c>)
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cfa:	603b      	str	r3, [r7, #0]
 8001cfc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001cfe:	2007      	movs	r0, #7
 8001d00:	f000 fc98 	bl	8002634 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d04:	bf00      	nop
 8001d06:	3708      	adds	r7, #8
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40023800 	.word	0x40023800

08001d10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d14:	bf00      	nop
 8001d16:	e7fd      	b.n	8001d14 <NMI_Handler+0x4>

08001d18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d1c:	bf00      	nop
 8001d1e:	e7fd      	b.n	8001d1c <HardFault_Handler+0x4>

08001d20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d24:	bf00      	nop
 8001d26:	e7fd      	b.n	8001d24 <MemManage_Handler+0x4>

08001d28 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d2c:	bf00      	nop
 8001d2e:	e7fd      	b.n	8001d2c <BusFault_Handler+0x4>

08001d30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d34:	bf00      	nop
 8001d36:	e7fd      	b.n	8001d34 <UsageFault_Handler+0x4>

08001d38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d3c:	bf00      	nop
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr

08001d46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d46:	b480      	push	{r7}
 8001d48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d4a:	bf00      	nop
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d58:	bf00      	nop
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr

08001d62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d66:	f000 fb6f 	bl	8002448 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8001d6a:	f000 fc96 	bl	800269a <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001d6e:	bf00      	nop
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d72:	b480      	push	{r7}
 8001d74:	af00      	add	r7, sp, #0
  return 1;
 8001d76:	2301      	movs	r3, #1
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <_kill>:

int _kill(int pid, int sig)
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b082      	sub	sp, #8
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
 8001d8a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d8c:	f004 fdb0 	bl	80068f0 <__errno>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2216      	movs	r2, #22
 8001d94:	601a      	str	r2, [r3, #0]
  return -1;
 8001d96:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <_exit>:

void _exit (int status)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b082      	sub	sp, #8
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001daa:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f7ff ffe7 	bl	8001d82 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001db4:	bf00      	nop
 8001db6:	e7fd      	b.n	8001db4 <_exit+0x12>

08001db8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b086      	sub	sp, #24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	617b      	str	r3, [r7, #20]
 8001dc8:	e00a      	b.n	8001de0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001dca:	f3af 8000 	nop.w
 8001dce:	4601      	mov	r1, r0
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	1c5a      	adds	r2, r3, #1
 8001dd4:	60ba      	str	r2, [r7, #8]
 8001dd6:	b2ca      	uxtb	r2, r1
 8001dd8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	3301      	adds	r3, #1
 8001dde:	617b      	str	r3, [r7, #20]
 8001de0:	697a      	ldr	r2, [r7, #20]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	dbf0      	blt.n	8001dca <_read+0x12>
  }

  return len;
 8001de8:	687b      	ldr	r3, [r7, #4]
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3718      	adds	r7, #24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b086      	sub	sp, #24
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	60f8      	str	r0, [r7, #12]
 8001dfa:	60b9      	str	r1, [r7, #8]
 8001dfc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dfe:	2300      	movs	r3, #0
 8001e00:	617b      	str	r3, [r7, #20]
 8001e02:	e009      	b.n	8001e18 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	1c5a      	adds	r2, r3, #1
 8001e08:	60ba      	str	r2, [r7, #8]
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff fb63 	bl	80014d8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	3301      	adds	r3, #1
 8001e16:	617b      	str	r3, [r7, #20]
 8001e18:	697a      	ldr	r2, [r7, #20]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	dbf1      	blt.n	8001e04 <_write+0x12>
  }
  return len;
 8001e20:	687b      	ldr	r3, [r7, #4]
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3718      	adds	r7, #24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <_close>:

int _close(int file)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	b083      	sub	sp, #12
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr

08001e42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e42:	b480      	push	{r7}
 8001e44:	b083      	sub	sp, #12
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
 8001e4a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e52:	605a      	str	r2, [r3, #4]
  return 0;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr

08001e62 <_isatty>:

int _isatty(int file)
{
 8001e62:	b480      	push	{r7}
 8001e64:	b083      	sub	sp, #12
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e6a:	2301      	movs	r3, #1
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3714      	adds	r7, #20
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
	...

08001e94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b086      	sub	sp, #24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e9c:	4a14      	ldr	r2, [pc, #80]	@ (8001ef0 <_sbrk+0x5c>)
 8001e9e:	4b15      	ldr	r3, [pc, #84]	@ (8001ef4 <_sbrk+0x60>)
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ea8:	4b13      	ldr	r3, [pc, #76]	@ (8001ef8 <_sbrk+0x64>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d102      	bne.n	8001eb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001eb0:	4b11      	ldr	r3, [pc, #68]	@ (8001ef8 <_sbrk+0x64>)
 8001eb2:	4a12      	ldr	r2, [pc, #72]	@ (8001efc <_sbrk+0x68>)
 8001eb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001eb6:	4b10      	ldr	r3, [pc, #64]	@ (8001ef8 <_sbrk+0x64>)
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d207      	bcs.n	8001ed4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ec4:	f004 fd14 	bl	80068f0 <__errno>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	220c      	movs	r2, #12
 8001ecc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ece:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ed2:	e009      	b.n	8001ee8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ed4:	4b08      	ldr	r3, [pc, #32]	@ (8001ef8 <_sbrk+0x64>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001eda:	4b07      	ldr	r3, [pc, #28]	@ (8001ef8 <_sbrk+0x64>)
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	4a05      	ldr	r2, [pc, #20]	@ (8001ef8 <_sbrk+0x64>)
 8001ee4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3718      	adds	r7, #24
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	20018000 	.word	0x20018000
 8001ef4:	00000400 	.word	0x00000400
 8001ef8:	200002b0 	.word	0x200002b0
 8001efc:	200004e0 	.word	0x200004e0

08001f00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f04:	4b06      	ldr	r3, [pc, #24]	@ (8001f20 <SystemInit+0x20>)
 8001f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f0a:	4a05      	ldr	r2, [pc, #20]	@ (8001f20 <SystemInit+0x20>)
 8001f0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f14:	bf00      	nop
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	e000ed00 	.word	0xe000ed00

08001f24 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b096      	sub	sp, #88	@ 0x58
 8001f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f2a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001f2e:	2200      	movs	r2, #0
 8001f30:	601a      	str	r2, [r3, #0]
 8001f32:	605a      	str	r2, [r3, #4]
 8001f34:	609a      	str	r2, [r3, #8]
 8001f36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f38:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f46:	2200      	movs	r2, #0
 8001f48:	601a      	str	r2, [r3, #0]
 8001f4a:	605a      	str	r2, [r3, #4]
 8001f4c:	609a      	str	r2, [r3, #8]
 8001f4e:	60da      	str	r2, [r3, #12]
 8001f50:	611a      	str	r2, [r3, #16]
 8001f52:	615a      	str	r2, [r3, #20]
 8001f54:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f56:	1d3b      	adds	r3, r7, #4
 8001f58:	2220      	movs	r2, #32
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f004 fc74 	bl	800684a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f62:	4b44      	ldr	r3, [pc, #272]	@ (8002074 <MX_TIM1_Init+0x150>)
 8001f64:	4a44      	ldr	r2, [pc, #272]	@ (8002078 <MX_TIM1_Init+0x154>)
 8001f66:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001f68:	4b42      	ldr	r3, [pc, #264]	@ (8002074 <MX_TIM1_Init+0x150>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f6e:	4b41      	ldr	r3, [pc, #260]	@ (8002074 <MX_TIM1_Init+0x150>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4200;
 8001f74:	4b3f      	ldr	r3, [pc, #252]	@ (8002074 <MX_TIM1_Init+0x150>)
 8001f76:	f241 0268 	movw	r2, #4200	@ 0x1068
 8001f7a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f7c:	4b3d      	ldr	r3, [pc, #244]	@ (8002074 <MX_TIM1_Init+0x150>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f82:	4b3c      	ldr	r3, [pc, #240]	@ (8002074 <MX_TIM1_Init+0x150>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f88:	4b3a      	ldr	r3, [pc, #232]	@ (8002074 <MX_TIM1_Init+0x150>)
 8001f8a:	2280      	movs	r2, #128	@ 0x80
 8001f8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001f8e:	4839      	ldr	r0, [pc, #228]	@ (8002074 <MX_TIM1_Init+0x150>)
 8001f90:	f002 fb2a 	bl	80045e8 <HAL_TIM_Base_Init>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001f9a:	f7ff fc23 	bl	80017e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f9e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fa2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001fa4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001fa8:	4619      	mov	r1, r3
 8001faa:	4832      	ldr	r0, [pc, #200]	@ (8002074 <MX_TIM1_Init+0x150>)
 8001fac:	f002 fe6a 	bl	8004c84 <HAL_TIM_ConfigClockSource>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001fb6:	f7ff fc15 	bl	80017e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001fba:	482e      	ldr	r0, [pc, #184]	@ (8002074 <MX_TIM1_Init+0x150>)
 8001fbc:	f002 fb63 	bl	8004686 <HAL_TIM_PWM_Init>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001fc6:	f7ff fc0d 	bl	80017e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001fd2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	4826      	ldr	r0, [pc, #152]	@ (8002074 <MX_TIM1_Init+0x150>)
 8001fda:	f003 f9f3 	bl	80053c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001fe4:	f7ff fbfe 	bl	80017e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fe8:	2360      	movs	r3, #96	@ 0x60
 8001fea:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001fec:	2300      	movs	r3, #0
 8001fee:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002000:	2300      	movs	r3, #0
 8002002:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002004:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002008:	2200      	movs	r2, #0
 800200a:	4619      	mov	r1, r3
 800200c:	4819      	ldr	r0, [pc, #100]	@ (8002074 <MX_TIM1_Init+0x150>)
 800200e:	f002 fd77 	bl	8004b00 <HAL_TIM_PWM_ConfigChannel>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002018:	f7ff fbe4 	bl	80017e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800201c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002020:	2204      	movs	r2, #4
 8002022:	4619      	mov	r1, r3
 8002024:	4813      	ldr	r0, [pc, #76]	@ (8002074 <MX_TIM1_Init+0x150>)
 8002026:	f002 fd6b 	bl	8004b00 <HAL_TIM_PWM_ConfigChannel>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8002030:	f7ff fbd8 	bl	80017e4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002034:	2300      	movs	r3, #0
 8002036:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002038:	2300      	movs	r3, #0
 800203a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800203c:	2300      	movs	r3, #0
 800203e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002040:	2300      	movs	r3, #0
 8002042:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002044:	2300      	movs	r3, #0
 8002046:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002048:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800204c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800204e:	2300      	movs	r3, #0
 8002050:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002052:	1d3b      	adds	r3, r7, #4
 8002054:	4619      	mov	r1, r3
 8002056:	4807      	ldr	r0, [pc, #28]	@ (8002074 <MX_TIM1_Init+0x150>)
 8002058:	f003 fa22 	bl	80054a0 <HAL_TIMEx_ConfigBreakDeadTime>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8002062:	f7ff fbbf 	bl	80017e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002066:	4803      	ldr	r0, [pc, #12]	@ (8002074 <MX_TIM1_Init+0x150>)
 8002068:	f000 f8c6 	bl	80021f8 <HAL_TIM_MspPostInit>

}
 800206c:	bf00      	nop
 800206e:	3758      	adds	r7, #88	@ 0x58
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	200002b4 	.word	0x200002b4
 8002078:	40010000 	.word	0x40010000

0800207c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b08c      	sub	sp, #48	@ 0x30
 8002080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002082:	f107 030c 	add.w	r3, r7, #12
 8002086:	2224      	movs	r2, #36	@ 0x24
 8002088:	2100      	movs	r1, #0
 800208a:	4618      	mov	r0, r3
 800208c:	f004 fbdd 	bl	800684a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002090:	1d3b      	adds	r3, r7, #4
 8002092:	2200      	movs	r2, #0
 8002094:	601a      	str	r2, [r3, #0]
 8002096:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002098:	4b20      	ldr	r3, [pc, #128]	@ (800211c <MX_TIM3_Init+0xa0>)
 800209a:	4a21      	ldr	r2, [pc, #132]	@ (8002120 <MX_TIM3_Init+0xa4>)
 800209c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800209e:	4b1f      	ldr	r3, [pc, #124]	@ (800211c <MX_TIM3_Init+0xa0>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020a4:	4b1d      	ldr	r3, [pc, #116]	@ (800211c <MX_TIM3_Init+0xa0>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80020aa:	4b1c      	ldr	r3, [pc, #112]	@ (800211c <MX_TIM3_Init+0xa0>)
 80020ac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80020b0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020b2:	4b1a      	ldr	r3, [pc, #104]	@ (800211c <MX_TIM3_Init+0xa0>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80020b8:	4b18      	ldr	r3, [pc, #96]	@ (800211c <MX_TIM3_Init+0xa0>)
 80020ba:	2280      	movs	r2, #128	@ 0x80
 80020bc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80020be:	2301      	movs	r3, #1
 80020c0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80020c2:	2300      	movs	r3, #0
 80020c4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80020c6:	2301      	movs	r3, #1
 80020c8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80020ca:	2300      	movs	r3, #0
 80020cc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80020ce:	230a      	movs	r3, #10
 80020d0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80020d2:	2300      	movs	r3, #0
 80020d4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80020d6:	2301      	movs	r3, #1
 80020d8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80020da:	2300      	movs	r3, #0
 80020dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80020de:	2300      	movs	r3, #0
 80020e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80020e2:	f107 030c 	add.w	r3, r7, #12
 80020e6:	4619      	mov	r1, r3
 80020e8:	480c      	ldr	r0, [pc, #48]	@ (800211c <MX_TIM3_Init+0xa0>)
 80020ea:	f002 fbd5 	bl	8004898 <HAL_TIM_Encoder_Init>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80020f4:	f7ff fb76 	bl	80017e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020f8:	2300      	movs	r3, #0
 80020fa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020fc:	2300      	movs	r3, #0
 80020fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002100:	1d3b      	adds	r3, r7, #4
 8002102:	4619      	mov	r1, r3
 8002104:	4805      	ldr	r0, [pc, #20]	@ (800211c <MX_TIM3_Init+0xa0>)
 8002106:	f003 f95d 	bl	80053c4 <HAL_TIMEx_MasterConfigSynchronization>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002110:	f7ff fb68 	bl	80017e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002114:	bf00      	nop
 8002116:	3730      	adds	r7, #48	@ 0x30
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	200002fc 	.word	0x200002fc
 8002120:	40000400 	.word	0x40000400

08002124 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a0b      	ldr	r2, [pc, #44]	@ (8002160 <HAL_TIM_Base_MspInit+0x3c>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d10d      	bne.n	8002152 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002136:	2300      	movs	r3, #0
 8002138:	60fb      	str	r3, [r7, #12]
 800213a:	4b0a      	ldr	r3, [pc, #40]	@ (8002164 <HAL_TIM_Base_MspInit+0x40>)
 800213c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800213e:	4a09      	ldr	r2, [pc, #36]	@ (8002164 <HAL_TIM_Base_MspInit+0x40>)
 8002140:	f043 0301 	orr.w	r3, r3, #1
 8002144:	6453      	str	r3, [r2, #68]	@ 0x44
 8002146:	4b07      	ldr	r3, [pc, #28]	@ (8002164 <HAL_TIM_Base_MspInit+0x40>)
 8002148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002152:	bf00      	nop
 8002154:	3714      	adds	r7, #20
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	40010000 	.word	0x40010000
 8002164:	40023800 	.word	0x40023800

08002168 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b08a      	sub	sp, #40	@ 0x28
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002170:	f107 0314 	add.w	r3, r7, #20
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	605a      	str	r2, [r3, #4]
 800217a:	609a      	str	r2, [r3, #8]
 800217c:	60da      	str	r2, [r3, #12]
 800217e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a19      	ldr	r2, [pc, #100]	@ (80021ec <HAL_TIM_Encoder_MspInit+0x84>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d12b      	bne.n	80021e2 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800218a:	2300      	movs	r3, #0
 800218c:	613b      	str	r3, [r7, #16]
 800218e:	4b18      	ldr	r3, [pc, #96]	@ (80021f0 <HAL_TIM_Encoder_MspInit+0x88>)
 8002190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002192:	4a17      	ldr	r2, [pc, #92]	@ (80021f0 <HAL_TIM_Encoder_MspInit+0x88>)
 8002194:	f043 0302 	orr.w	r3, r3, #2
 8002198:	6413      	str	r3, [r2, #64]	@ 0x40
 800219a:	4b15      	ldr	r3, [pc, #84]	@ (80021f0 <HAL_TIM_Encoder_MspInit+0x88>)
 800219c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	613b      	str	r3, [r7, #16]
 80021a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021a6:	2300      	movs	r3, #0
 80021a8:	60fb      	str	r3, [r7, #12]
 80021aa:	4b11      	ldr	r3, [pc, #68]	@ (80021f0 <HAL_TIM_Encoder_MspInit+0x88>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ae:	4a10      	ldr	r2, [pc, #64]	@ (80021f0 <HAL_TIM_Encoder_MspInit+0x88>)
 80021b0:	f043 0301 	orr.w	r3, r3, #1
 80021b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80021b6:	4b0e      	ldr	r3, [pc, #56]	@ (80021f0 <HAL_TIM_Encoder_MspInit+0x88>)
 80021b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	60fb      	str	r3, [r7, #12]
 80021c0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80021c2:	23c0      	movs	r3, #192	@ 0xc0
 80021c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c6:	2302      	movs	r3, #2
 80021c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ca:	2300      	movs	r3, #0
 80021cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ce:	2300      	movs	r3, #0
 80021d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80021d2:	2302      	movs	r3, #2
 80021d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021d6:	f107 0314 	add.w	r3, r7, #20
 80021da:	4619      	mov	r1, r3
 80021dc:	4805      	ldr	r0, [pc, #20]	@ (80021f4 <HAL_TIM_Encoder_MspInit+0x8c>)
 80021de:	f000 fa63 	bl	80026a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80021e2:	bf00      	nop
 80021e4:	3728      	adds	r7, #40	@ 0x28
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	40000400 	.word	0x40000400
 80021f0:	40023800 	.word	0x40023800
 80021f4:	40020000 	.word	0x40020000

080021f8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b088      	sub	sp, #32
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002200:	f107 030c 	add.w	r3, r7, #12
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]
 8002208:	605a      	str	r2, [r3, #4]
 800220a:	609a      	str	r2, [r3, #8]
 800220c:	60da      	str	r2, [r3, #12]
 800220e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a12      	ldr	r2, [pc, #72]	@ (8002260 <HAL_TIM_MspPostInit+0x68>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d11e      	bne.n	8002258 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800221a:	2300      	movs	r3, #0
 800221c:	60bb      	str	r3, [r7, #8]
 800221e:	4b11      	ldr	r3, [pc, #68]	@ (8002264 <HAL_TIM_MspPostInit+0x6c>)
 8002220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002222:	4a10      	ldr	r2, [pc, #64]	@ (8002264 <HAL_TIM_MspPostInit+0x6c>)
 8002224:	f043 0301 	orr.w	r3, r3, #1
 8002228:	6313      	str	r3, [r2, #48]	@ 0x30
 800222a:	4b0e      	ldr	r3, [pc, #56]	@ (8002264 <HAL_TIM_MspPostInit+0x6c>)
 800222c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	60bb      	str	r3, [r7, #8]
 8002234:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002236:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800223a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800223c:	2302      	movs	r3, #2
 800223e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002240:	2300      	movs	r3, #0
 8002242:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002244:	2300      	movs	r3, #0
 8002246:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002248:	2301      	movs	r3, #1
 800224a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800224c:	f107 030c 	add.w	r3, r7, #12
 8002250:	4619      	mov	r1, r3
 8002252:	4805      	ldr	r0, [pc, #20]	@ (8002268 <HAL_TIM_MspPostInit+0x70>)
 8002254:	f000 fa28 	bl	80026a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002258:	bf00      	nop
 800225a:	3720      	adds	r7, #32
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	40010000 	.word	0x40010000
 8002264:	40023800 	.word	0x40023800
 8002268:	40020000 	.word	0x40020000

0800226c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002270:	4b11      	ldr	r3, [pc, #68]	@ (80022b8 <MX_USART2_UART_Init+0x4c>)
 8002272:	4a12      	ldr	r2, [pc, #72]	@ (80022bc <MX_USART2_UART_Init+0x50>)
 8002274:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002276:	4b10      	ldr	r3, [pc, #64]	@ (80022b8 <MX_USART2_UART_Init+0x4c>)
 8002278:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800227c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800227e:	4b0e      	ldr	r3, [pc, #56]	@ (80022b8 <MX_USART2_UART_Init+0x4c>)
 8002280:	2200      	movs	r2, #0
 8002282:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002284:	4b0c      	ldr	r3, [pc, #48]	@ (80022b8 <MX_USART2_UART_Init+0x4c>)
 8002286:	2200      	movs	r2, #0
 8002288:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800228a:	4b0b      	ldr	r3, [pc, #44]	@ (80022b8 <MX_USART2_UART_Init+0x4c>)
 800228c:	2200      	movs	r2, #0
 800228e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002290:	4b09      	ldr	r3, [pc, #36]	@ (80022b8 <MX_USART2_UART_Init+0x4c>)
 8002292:	220c      	movs	r2, #12
 8002294:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002296:	4b08      	ldr	r3, [pc, #32]	@ (80022b8 <MX_USART2_UART_Init+0x4c>)
 8002298:	2200      	movs	r2, #0
 800229a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800229c:	4b06      	ldr	r3, [pc, #24]	@ (80022b8 <MX_USART2_UART_Init+0x4c>)
 800229e:	2200      	movs	r2, #0
 80022a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80022a2:	4805      	ldr	r0, [pc, #20]	@ (80022b8 <MX_USART2_UART_Init+0x4c>)
 80022a4:	f003 f94e 	bl	8005544 <HAL_UART_Init>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80022ae:	f7ff fa99 	bl	80017e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80022b2:	bf00      	nop
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	20000344 	.word	0x20000344
 80022bc:	40004400 	.word	0x40004400

080022c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b08a      	sub	sp, #40	@ 0x28
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c8:	f107 0314 	add.w	r3, r7, #20
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	605a      	str	r2, [r3, #4]
 80022d2:	609a      	str	r2, [r3, #8]
 80022d4:	60da      	str	r2, [r3, #12]
 80022d6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a19      	ldr	r2, [pc, #100]	@ (8002344 <HAL_UART_MspInit+0x84>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d12b      	bne.n	800233a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80022e2:	2300      	movs	r3, #0
 80022e4:	613b      	str	r3, [r7, #16]
 80022e6:	4b18      	ldr	r3, [pc, #96]	@ (8002348 <HAL_UART_MspInit+0x88>)
 80022e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ea:	4a17      	ldr	r2, [pc, #92]	@ (8002348 <HAL_UART_MspInit+0x88>)
 80022ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80022f2:	4b15      	ldr	r3, [pc, #84]	@ (8002348 <HAL_UART_MspInit+0x88>)
 80022f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022fa:	613b      	str	r3, [r7, #16]
 80022fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022fe:	2300      	movs	r3, #0
 8002300:	60fb      	str	r3, [r7, #12]
 8002302:	4b11      	ldr	r3, [pc, #68]	@ (8002348 <HAL_UART_MspInit+0x88>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002306:	4a10      	ldr	r2, [pc, #64]	@ (8002348 <HAL_UART_MspInit+0x88>)
 8002308:	f043 0301 	orr.w	r3, r3, #1
 800230c:	6313      	str	r3, [r2, #48]	@ 0x30
 800230e:	4b0e      	ldr	r3, [pc, #56]	@ (8002348 <HAL_UART_MspInit+0x88>)
 8002310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	60fb      	str	r3, [r7, #12]
 8002318:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800231a:	230c      	movs	r3, #12
 800231c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800231e:	2302      	movs	r3, #2
 8002320:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002322:	2300      	movs	r3, #0
 8002324:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002326:	2300      	movs	r3, #0
 8002328:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800232a:	2307      	movs	r3, #7
 800232c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800232e:	f107 0314 	add.w	r3, r7, #20
 8002332:	4619      	mov	r1, r3
 8002334:	4805      	ldr	r0, [pc, #20]	@ (800234c <HAL_UART_MspInit+0x8c>)
 8002336:	f000 f9b7 	bl	80026a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800233a:	bf00      	nop
 800233c:	3728      	adds	r7, #40	@ 0x28
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	40004400 	.word	0x40004400
 8002348:	40023800 	.word	0x40023800
 800234c:	40020000 	.word	0x40020000

08002350 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002350:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002388 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002354:	f7ff fdd4 	bl	8001f00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002358:	480c      	ldr	r0, [pc, #48]	@ (800238c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800235a:	490d      	ldr	r1, [pc, #52]	@ (8002390 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800235c:	4a0d      	ldr	r2, [pc, #52]	@ (8002394 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800235e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002360:	e002      	b.n	8002368 <LoopCopyDataInit>

08002362 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002362:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002364:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002366:	3304      	adds	r3, #4

08002368 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002368:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800236a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800236c:	d3f9      	bcc.n	8002362 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800236e:	4a0a      	ldr	r2, [pc, #40]	@ (8002398 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002370:	4c0a      	ldr	r4, [pc, #40]	@ (800239c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002372:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002374:	e001      	b.n	800237a <LoopFillZerobss>

08002376 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002376:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002378:	3204      	adds	r2, #4

0800237a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800237a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800237c:	d3fb      	bcc.n	8002376 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800237e:	f004 fabd 	bl	80068fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002382:	f7ff f8bd 	bl	8001500 <main>
  bx  lr    
 8002386:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002388:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800238c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002390:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002394:	08009048 	.word	0x08009048
  ldr r2, =_sbss
 8002398:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 800239c:	200004dc 	.word	0x200004dc

080023a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023a0:	e7fe      	b.n	80023a0 <ADC_IRQHandler>
	...

080023a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023a8:	4b0e      	ldr	r3, [pc, #56]	@ (80023e4 <HAL_Init+0x40>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a0d      	ldr	r2, [pc, #52]	@ (80023e4 <HAL_Init+0x40>)
 80023ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80023b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023b4:	4b0b      	ldr	r3, [pc, #44]	@ (80023e4 <HAL_Init+0x40>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a0a      	ldr	r2, [pc, #40]	@ (80023e4 <HAL_Init+0x40>)
 80023ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80023be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023c0:	4b08      	ldr	r3, [pc, #32]	@ (80023e4 <HAL_Init+0x40>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a07      	ldr	r2, [pc, #28]	@ (80023e4 <HAL_Init+0x40>)
 80023c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023cc:	2003      	movs	r0, #3
 80023ce:	f000 f931 	bl	8002634 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023d2:	2000      	movs	r0, #0
 80023d4:	f000 f808 	bl	80023e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023d8:	f7ff fc72 	bl	8001cc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	40023c00 	.word	0x40023c00

080023e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023f0:	4b12      	ldr	r3, [pc, #72]	@ (800243c <HAL_InitTick+0x54>)
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	4b12      	ldr	r3, [pc, #72]	@ (8002440 <HAL_InitTick+0x58>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	4619      	mov	r1, r3
 80023fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002402:	fbb2 f3f3 	udiv	r3, r2, r3
 8002406:	4618      	mov	r0, r3
 8002408:	f000 f93b 	bl	8002682 <HAL_SYSTICK_Config>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e00e      	b.n	8002434 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2b0f      	cmp	r3, #15
 800241a:	d80a      	bhi.n	8002432 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800241c:	2200      	movs	r2, #0
 800241e:	6879      	ldr	r1, [r7, #4]
 8002420:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002424:	f000 f911 	bl	800264a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002428:	4a06      	ldr	r2, [pc, #24]	@ (8002444 <HAL_InitTick+0x5c>)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800242e:	2300      	movs	r3, #0
 8002430:	e000      	b.n	8002434 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
}
 8002434:	4618      	mov	r0, r3
 8002436:	3708      	adds	r7, #8
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	20000004 	.word	0x20000004
 8002440:	2000000c 	.word	0x2000000c
 8002444:	20000008 	.word	0x20000008

08002448 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800244c:	4b06      	ldr	r3, [pc, #24]	@ (8002468 <HAL_IncTick+0x20>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	461a      	mov	r2, r3
 8002452:	4b06      	ldr	r3, [pc, #24]	@ (800246c <HAL_IncTick+0x24>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4413      	add	r3, r2
 8002458:	4a04      	ldr	r2, [pc, #16]	@ (800246c <HAL_IncTick+0x24>)
 800245a:	6013      	str	r3, [r2, #0]
}
 800245c:	bf00      	nop
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	2000000c 	.word	0x2000000c
 800246c:	2000038c 	.word	0x2000038c

08002470 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
  return uwTick;
 8002474:	4b03      	ldr	r3, [pc, #12]	@ (8002484 <HAL_GetTick+0x14>)
 8002476:	681b      	ldr	r3, [r3, #0]
}
 8002478:	4618      	mov	r0, r3
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	2000038c 	.word	0x2000038c

08002488 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002490:	f7ff ffee 	bl	8002470 <HAL_GetTick>
 8002494:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80024a0:	d005      	beq.n	80024ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024a2:	4b0a      	ldr	r3, [pc, #40]	@ (80024cc <HAL_Delay+0x44>)
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	461a      	mov	r2, r3
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	4413      	add	r3, r2
 80024ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80024ae:	bf00      	nop
 80024b0:	f7ff ffde 	bl	8002470 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	68fa      	ldr	r2, [r7, #12]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d8f7      	bhi.n	80024b0 <HAL_Delay+0x28>
  {
  }
}
 80024c0:	bf00      	nop
 80024c2:	bf00      	nop
 80024c4:	3710      	adds	r7, #16
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	2000000c 	.word	0x2000000c

080024d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b085      	sub	sp, #20
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f003 0307 	and.w	r3, r3, #7
 80024de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002514 <__NVIC_SetPriorityGrouping+0x44>)
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024e6:	68ba      	ldr	r2, [r7, #8]
 80024e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80024ec:	4013      	ands	r3, r2
 80024ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80024fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002500:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002502:	4a04      	ldr	r2, [pc, #16]	@ (8002514 <__NVIC_SetPriorityGrouping+0x44>)
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	60d3      	str	r3, [r2, #12]
}
 8002508:	bf00      	nop
 800250a:	3714      	adds	r7, #20
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr
 8002514:	e000ed00 	.word	0xe000ed00

08002518 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800251c:	4b04      	ldr	r3, [pc, #16]	@ (8002530 <__NVIC_GetPriorityGrouping+0x18>)
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	0a1b      	lsrs	r3, r3, #8
 8002522:	f003 0307 	and.w	r3, r3, #7
}
 8002526:	4618      	mov	r0, r3
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr
 8002530:	e000ed00 	.word	0xe000ed00

08002534 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	4603      	mov	r3, r0
 800253c:	6039      	str	r1, [r7, #0]
 800253e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002544:	2b00      	cmp	r3, #0
 8002546:	db0a      	blt.n	800255e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	b2da      	uxtb	r2, r3
 800254c:	490c      	ldr	r1, [pc, #48]	@ (8002580 <__NVIC_SetPriority+0x4c>)
 800254e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002552:	0112      	lsls	r2, r2, #4
 8002554:	b2d2      	uxtb	r2, r2
 8002556:	440b      	add	r3, r1
 8002558:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800255c:	e00a      	b.n	8002574 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	b2da      	uxtb	r2, r3
 8002562:	4908      	ldr	r1, [pc, #32]	@ (8002584 <__NVIC_SetPriority+0x50>)
 8002564:	79fb      	ldrb	r3, [r7, #7]
 8002566:	f003 030f 	and.w	r3, r3, #15
 800256a:	3b04      	subs	r3, #4
 800256c:	0112      	lsls	r2, r2, #4
 800256e:	b2d2      	uxtb	r2, r2
 8002570:	440b      	add	r3, r1
 8002572:	761a      	strb	r2, [r3, #24]
}
 8002574:	bf00      	nop
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr
 8002580:	e000e100 	.word	0xe000e100
 8002584:	e000ed00 	.word	0xe000ed00

08002588 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002588:	b480      	push	{r7}
 800258a:	b089      	sub	sp, #36	@ 0x24
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f003 0307 	and.w	r3, r3, #7
 800259a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	f1c3 0307 	rsb	r3, r3, #7
 80025a2:	2b04      	cmp	r3, #4
 80025a4:	bf28      	it	cs
 80025a6:	2304      	movcs	r3, #4
 80025a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	3304      	adds	r3, #4
 80025ae:	2b06      	cmp	r3, #6
 80025b0:	d902      	bls.n	80025b8 <NVIC_EncodePriority+0x30>
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	3b03      	subs	r3, #3
 80025b6:	e000      	b.n	80025ba <NVIC_EncodePriority+0x32>
 80025b8:	2300      	movs	r3, #0
 80025ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	fa02 f303 	lsl.w	r3, r2, r3
 80025c6:	43da      	mvns	r2, r3
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	401a      	ands	r2, r3
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025d0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	fa01 f303 	lsl.w	r3, r1, r3
 80025da:	43d9      	mvns	r1, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025e0:	4313      	orrs	r3, r2
         );
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3724      	adds	r7, #36	@ 0x24
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
	...

080025f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	3b01      	subs	r3, #1
 80025fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002600:	d301      	bcc.n	8002606 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002602:	2301      	movs	r3, #1
 8002604:	e00f      	b.n	8002626 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002606:	4a0a      	ldr	r2, [pc, #40]	@ (8002630 <SysTick_Config+0x40>)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	3b01      	subs	r3, #1
 800260c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800260e:	210f      	movs	r1, #15
 8002610:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002614:	f7ff ff8e 	bl	8002534 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002618:	4b05      	ldr	r3, [pc, #20]	@ (8002630 <SysTick_Config+0x40>)
 800261a:	2200      	movs	r2, #0
 800261c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800261e:	4b04      	ldr	r3, [pc, #16]	@ (8002630 <SysTick_Config+0x40>)
 8002620:	2207      	movs	r2, #7
 8002622:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	e000e010 	.word	0xe000e010

08002634 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f7ff ff47 	bl	80024d0 <__NVIC_SetPriorityGrouping>
}
 8002642:	bf00      	nop
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}

0800264a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800264a:	b580      	push	{r7, lr}
 800264c:	b086      	sub	sp, #24
 800264e:	af00      	add	r7, sp, #0
 8002650:	4603      	mov	r3, r0
 8002652:	60b9      	str	r1, [r7, #8]
 8002654:	607a      	str	r2, [r7, #4]
 8002656:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002658:	2300      	movs	r3, #0
 800265a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800265c:	f7ff ff5c 	bl	8002518 <__NVIC_GetPriorityGrouping>
 8002660:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	68b9      	ldr	r1, [r7, #8]
 8002666:	6978      	ldr	r0, [r7, #20]
 8002668:	f7ff ff8e 	bl	8002588 <NVIC_EncodePriority>
 800266c:	4602      	mov	r2, r0
 800266e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002672:	4611      	mov	r1, r2
 8002674:	4618      	mov	r0, r3
 8002676:	f7ff ff5d 	bl	8002534 <__NVIC_SetPriority>
}
 800267a:	bf00      	nop
 800267c:	3718      	adds	r7, #24
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}

08002682 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002682:	b580      	push	{r7, lr}
 8002684:	b082      	sub	sp, #8
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f7ff ffb0 	bl	80025f0 <SysTick_Config>
 8002690:	4603      	mov	r3, r0
}
 8002692:	4618      	mov	r0, r3
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800269e:	f7fe feed 	bl	800147c <HAL_SYSTICK_Callback>
}
 80026a2:	bf00      	nop
 80026a4:	bd80      	pop	{r7, pc}
	...

080026a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b089      	sub	sp, #36	@ 0x24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026b2:	2300      	movs	r3, #0
 80026b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026b6:	2300      	movs	r3, #0
 80026b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026ba:	2300      	movs	r3, #0
 80026bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026be:	2300      	movs	r3, #0
 80026c0:	61fb      	str	r3, [r7, #28]
 80026c2:	e159      	b.n	8002978 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026c4:	2201      	movs	r2, #1
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	fa02 f303 	lsl.w	r3, r2, r3
 80026cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	697a      	ldr	r2, [r7, #20]
 80026d4:	4013      	ands	r3, r2
 80026d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026d8:	693a      	ldr	r2, [r7, #16]
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	429a      	cmp	r2, r3
 80026de:	f040 8148 	bne.w	8002972 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f003 0303 	and.w	r3, r3, #3
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d005      	beq.n	80026fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d130      	bne.n	800275c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	005b      	lsls	r3, r3, #1
 8002704:	2203      	movs	r2, #3
 8002706:	fa02 f303 	lsl.w	r3, r2, r3
 800270a:	43db      	mvns	r3, r3
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	4013      	ands	r3, r2
 8002710:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	68da      	ldr	r2, [r3, #12]
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	fa02 f303 	lsl.w	r3, r2, r3
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	4313      	orrs	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	69ba      	ldr	r2, [r7, #24]
 8002728:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002730:	2201      	movs	r2, #1
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	43db      	mvns	r3, r3
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	4013      	ands	r3, r2
 800273e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	091b      	lsrs	r3, r3, #4
 8002746:	f003 0201 	and.w	r2, r3, #1
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	4313      	orrs	r3, r2
 8002754:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f003 0303 	and.w	r3, r3, #3
 8002764:	2b03      	cmp	r3, #3
 8002766:	d017      	beq.n	8002798 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	2203      	movs	r2, #3
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	43db      	mvns	r3, r3
 800277a:	69ba      	ldr	r2, [r7, #24]
 800277c:	4013      	ands	r3, r2
 800277e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	689a      	ldr	r2, [r3, #8]
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	4313      	orrs	r3, r2
 8002790:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f003 0303 	and.w	r3, r3, #3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d123      	bne.n	80027ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	08da      	lsrs	r2, r3, #3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	3208      	adds	r2, #8
 80027ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	f003 0307 	and.w	r3, r3, #7
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	220f      	movs	r2, #15
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	43db      	mvns	r3, r3
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	4013      	ands	r3, r2
 80027c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	691a      	ldr	r2, [r3, #16]
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	f003 0307 	and.w	r3, r3, #7
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	4313      	orrs	r3, r2
 80027dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	08da      	lsrs	r2, r3, #3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	3208      	adds	r2, #8
 80027e6:	69b9      	ldr	r1, [r7, #24]
 80027e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	2203      	movs	r2, #3
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	43db      	mvns	r3, r3
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	4013      	ands	r3, r2
 8002802:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f003 0203 	and.w	r2, r3, #3
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	005b      	lsls	r3, r3, #1
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	4313      	orrs	r3, r2
 8002818:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002828:	2b00      	cmp	r3, #0
 800282a:	f000 80a2 	beq.w	8002972 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800282e:	2300      	movs	r3, #0
 8002830:	60fb      	str	r3, [r7, #12]
 8002832:	4b57      	ldr	r3, [pc, #348]	@ (8002990 <HAL_GPIO_Init+0x2e8>)
 8002834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002836:	4a56      	ldr	r2, [pc, #344]	@ (8002990 <HAL_GPIO_Init+0x2e8>)
 8002838:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800283c:	6453      	str	r3, [r2, #68]	@ 0x44
 800283e:	4b54      	ldr	r3, [pc, #336]	@ (8002990 <HAL_GPIO_Init+0x2e8>)
 8002840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002842:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002846:	60fb      	str	r3, [r7, #12]
 8002848:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800284a:	4a52      	ldr	r2, [pc, #328]	@ (8002994 <HAL_GPIO_Init+0x2ec>)
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	089b      	lsrs	r3, r3, #2
 8002850:	3302      	adds	r3, #2
 8002852:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002856:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	f003 0303 	and.w	r3, r3, #3
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	220f      	movs	r2, #15
 8002862:	fa02 f303 	lsl.w	r3, r2, r3
 8002866:	43db      	mvns	r3, r3
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	4013      	ands	r3, r2
 800286c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a49      	ldr	r2, [pc, #292]	@ (8002998 <HAL_GPIO_Init+0x2f0>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d019      	beq.n	80028aa <HAL_GPIO_Init+0x202>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a48      	ldr	r2, [pc, #288]	@ (800299c <HAL_GPIO_Init+0x2f4>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d013      	beq.n	80028a6 <HAL_GPIO_Init+0x1fe>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a47      	ldr	r2, [pc, #284]	@ (80029a0 <HAL_GPIO_Init+0x2f8>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d00d      	beq.n	80028a2 <HAL_GPIO_Init+0x1fa>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a46      	ldr	r2, [pc, #280]	@ (80029a4 <HAL_GPIO_Init+0x2fc>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d007      	beq.n	800289e <HAL_GPIO_Init+0x1f6>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a45      	ldr	r2, [pc, #276]	@ (80029a8 <HAL_GPIO_Init+0x300>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d101      	bne.n	800289a <HAL_GPIO_Init+0x1f2>
 8002896:	2304      	movs	r3, #4
 8002898:	e008      	b.n	80028ac <HAL_GPIO_Init+0x204>
 800289a:	2307      	movs	r3, #7
 800289c:	e006      	b.n	80028ac <HAL_GPIO_Init+0x204>
 800289e:	2303      	movs	r3, #3
 80028a0:	e004      	b.n	80028ac <HAL_GPIO_Init+0x204>
 80028a2:	2302      	movs	r3, #2
 80028a4:	e002      	b.n	80028ac <HAL_GPIO_Init+0x204>
 80028a6:	2301      	movs	r3, #1
 80028a8:	e000      	b.n	80028ac <HAL_GPIO_Init+0x204>
 80028aa:	2300      	movs	r3, #0
 80028ac:	69fa      	ldr	r2, [r7, #28]
 80028ae:	f002 0203 	and.w	r2, r2, #3
 80028b2:	0092      	lsls	r2, r2, #2
 80028b4:	4093      	lsls	r3, r2
 80028b6:	69ba      	ldr	r2, [r7, #24]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028bc:	4935      	ldr	r1, [pc, #212]	@ (8002994 <HAL_GPIO_Init+0x2ec>)
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	089b      	lsrs	r3, r3, #2
 80028c2:	3302      	adds	r3, #2
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028ca:	4b38      	ldr	r3, [pc, #224]	@ (80029ac <HAL_GPIO_Init+0x304>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	43db      	mvns	r3, r3
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	4013      	ands	r3, r2
 80028d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d003      	beq.n	80028ee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028ee:	4a2f      	ldr	r2, [pc, #188]	@ (80029ac <HAL_GPIO_Init+0x304>)
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028f4:	4b2d      	ldr	r3, [pc, #180]	@ (80029ac <HAL_GPIO_Init+0x304>)
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	43db      	mvns	r3, r3
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	4013      	ands	r3, r2
 8002902:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d003      	beq.n	8002918 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	4313      	orrs	r3, r2
 8002916:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002918:	4a24      	ldr	r2, [pc, #144]	@ (80029ac <HAL_GPIO_Init+0x304>)
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800291e:	4b23      	ldr	r3, [pc, #140]	@ (80029ac <HAL_GPIO_Init+0x304>)
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	43db      	mvns	r3, r3
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	4013      	ands	r3, r2
 800292c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d003      	beq.n	8002942 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800293a:	69ba      	ldr	r2, [r7, #24]
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	4313      	orrs	r3, r2
 8002940:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002942:	4a1a      	ldr	r2, [pc, #104]	@ (80029ac <HAL_GPIO_Init+0x304>)
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002948:	4b18      	ldr	r3, [pc, #96]	@ (80029ac <HAL_GPIO_Init+0x304>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	43db      	mvns	r3, r3
 8002952:	69ba      	ldr	r2, [r7, #24]
 8002954:	4013      	ands	r3, r2
 8002956:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d003      	beq.n	800296c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002964:	69ba      	ldr	r2, [r7, #24]
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	4313      	orrs	r3, r2
 800296a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800296c:	4a0f      	ldr	r2, [pc, #60]	@ (80029ac <HAL_GPIO_Init+0x304>)
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	3301      	adds	r3, #1
 8002976:	61fb      	str	r3, [r7, #28]
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	2b0f      	cmp	r3, #15
 800297c:	f67f aea2 	bls.w	80026c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002980:	bf00      	nop
 8002982:	bf00      	nop
 8002984:	3724      	adds	r7, #36	@ 0x24
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	40023800 	.word	0x40023800
 8002994:	40013800 	.word	0x40013800
 8002998:	40020000 	.word	0x40020000
 800299c:	40020400 	.word	0x40020400
 80029a0:	40020800 	.word	0x40020800
 80029a4:	40020c00 	.word	0x40020c00
 80029a8:	40021000 	.word	0x40021000
 80029ac:	40013c00 	.word	0x40013c00

080029b0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b087      	sub	sp, #28
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029ba:	2300      	movs	r3, #0
 80029bc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80029be:	2300      	movs	r3, #0
 80029c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80029c2:	2300      	movs	r3, #0
 80029c4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029c6:	2300      	movs	r3, #0
 80029c8:	617b      	str	r3, [r7, #20]
 80029ca:	e0bb      	b.n	8002b44 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029cc:	2201      	movs	r2, #1
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	fa02 f303 	lsl.w	r3, r2, r3
 80029d4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80029d6:	683a      	ldr	r2, [r7, #0]
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	4013      	ands	r3, r2
 80029dc:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80029de:	68fa      	ldr	r2, [r7, #12]
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	429a      	cmp	r2, r3
 80029e4:	f040 80ab 	bne.w	8002b3e <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80029e8:	4a5c      	ldr	r2, [pc, #368]	@ (8002b5c <HAL_GPIO_DeInit+0x1ac>)
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	089b      	lsrs	r3, r3, #2
 80029ee:	3302      	adds	r3, #2
 80029f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029f4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	f003 0303 	and.w	r3, r3, #3
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	220f      	movs	r2, #15
 8002a00:	fa02 f303 	lsl.w	r3, r2, r3
 8002a04:	68ba      	ldr	r2, [r7, #8]
 8002a06:	4013      	ands	r3, r2
 8002a08:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a54      	ldr	r2, [pc, #336]	@ (8002b60 <HAL_GPIO_DeInit+0x1b0>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d019      	beq.n	8002a46 <HAL_GPIO_DeInit+0x96>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a53      	ldr	r2, [pc, #332]	@ (8002b64 <HAL_GPIO_DeInit+0x1b4>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d013      	beq.n	8002a42 <HAL_GPIO_DeInit+0x92>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a52      	ldr	r2, [pc, #328]	@ (8002b68 <HAL_GPIO_DeInit+0x1b8>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d00d      	beq.n	8002a3e <HAL_GPIO_DeInit+0x8e>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a51      	ldr	r2, [pc, #324]	@ (8002b6c <HAL_GPIO_DeInit+0x1bc>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d007      	beq.n	8002a3a <HAL_GPIO_DeInit+0x8a>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a50      	ldr	r2, [pc, #320]	@ (8002b70 <HAL_GPIO_DeInit+0x1c0>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d101      	bne.n	8002a36 <HAL_GPIO_DeInit+0x86>
 8002a32:	2304      	movs	r3, #4
 8002a34:	e008      	b.n	8002a48 <HAL_GPIO_DeInit+0x98>
 8002a36:	2307      	movs	r3, #7
 8002a38:	e006      	b.n	8002a48 <HAL_GPIO_DeInit+0x98>
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e004      	b.n	8002a48 <HAL_GPIO_DeInit+0x98>
 8002a3e:	2302      	movs	r3, #2
 8002a40:	e002      	b.n	8002a48 <HAL_GPIO_DeInit+0x98>
 8002a42:	2301      	movs	r3, #1
 8002a44:	e000      	b.n	8002a48 <HAL_GPIO_DeInit+0x98>
 8002a46:	2300      	movs	r3, #0
 8002a48:	697a      	ldr	r2, [r7, #20]
 8002a4a:	f002 0203 	and.w	r2, r2, #3
 8002a4e:	0092      	lsls	r2, r2, #2
 8002a50:	4093      	lsls	r3, r2
 8002a52:	68ba      	ldr	r2, [r7, #8]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d132      	bne.n	8002abe <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002a58:	4b46      	ldr	r3, [pc, #280]	@ (8002b74 <HAL_GPIO_DeInit+0x1c4>)
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	43db      	mvns	r3, r3
 8002a60:	4944      	ldr	r1, [pc, #272]	@ (8002b74 <HAL_GPIO_DeInit+0x1c4>)
 8002a62:	4013      	ands	r3, r2
 8002a64:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002a66:	4b43      	ldr	r3, [pc, #268]	@ (8002b74 <HAL_GPIO_DeInit+0x1c4>)
 8002a68:	685a      	ldr	r2, [r3, #4]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	43db      	mvns	r3, r3
 8002a6e:	4941      	ldr	r1, [pc, #260]	@ (8002b74 <HAL_GPIO_DeInit+0x1c4>)
 8002a70:	4013      	ands	r3, r2
 8002a72:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002a74:	4b3f      	ldr	r3, [pc, #252]	@ (8002b74 <HAL_GPIO_DeInit+0x1c4>)
 8002a76:	68da      	ldr	r2, [r3, #12]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	43db      	mvns	r3, r3
 8002a7c:	493d      	ldr	r1, [pc, #244]	@ (8002b74 <HAL_GPIO_DeInit+0x1c4>)
 8002a7e:	4013      	ands	r3, r2
 8002a80:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002a82:	4b3c      	ldr	r3, [pc, #240]	@ (8002b74 <HAL_GPIO_DeInit+0x1c4>)
 8002a84:	689a      	ldr	r2, [r3, #8]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	43db      	mvns	r3, r3
 8002a8a:	493a      	ldr	r1, [pc, #232]	@ (8002b74 <HAL_GPIO_DeInit+0x1c4>)
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	f003 0303 	and.w	r3, r3, #3
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	220f      	movs	r2, #15
 8002a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002aa0:	4a2e      	ldr	r2, [pc, #184]	@ (8002b5c <HAL_GPIO_DeInit+0x1ac>)
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	089b      	lsrs	r3, r3, #2
 8002aa6:	3302      	adds	r3, #2
 8002aa8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	43da      	mvns	r2, r3
 8002ab0:	482a      	ldr	r0, [pc, #168]	@ (8002b5c <HAL_GPIO_DeInit+0x1ac>)
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	089b      	lsrs	r3, r3, #2
 8002ab6:	400a      	ands	r2, r1
 8002ab8:	3302      	adds	r3, #2
 8002aba:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	005b      	lsls	r3, r3, #1
 8002ac6:	2103      	movs	r1, #3
 8002ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8002acc:	43db      	mvns	r3, r3
 8002ace:	401a      	ands	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	08da      	lsrs	r2, r3, #3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	3208      	adds	r2, #8
 8002adc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	f003 0307 	and.w	r3, r3, #7
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	220f      	movs	r2, #15
 8002aea:	fa02 f303 	lsl.w	r3, r2, r3
 8002aee:	43db      	mvns	r3, r3
 8002af0:	697a      	ldr	r2, [r7, #20]
 8002af2:	08d2      	lsrs	r2, r2, #3
 8002af4:	4019      	ands	r1, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	3208      	adds	r2, #8
 8002afa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	68da      	ldr	r2, [r3, #12]
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	2103      	movs	r1, #3
 8002b08:	fa01 f303 	lsl.w	r3, r1, r3
 8002b0c:	43db      	mvns	r3, r3
 8002b0e:	401a      	ands	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685a      	ldr	r2, [r3, #4]
 8002b18:	2101      	movs	r1, #1
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b20:	43db      	mvns	r3, r3
 8002b22:	401a      	ands	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689a      	ldr	r2, [r3, #8]
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	2103      	movs	r1, #3
 8002b32:	fa01 f303 	lsl.w	r3, r1, r3
 8002b36:	43db      	mvns	r3, r3
 8002b38:	401a      	ands	r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	3301      	adds	r3, #1
 8002b42:	617b      	str	r3, [r7, #20]
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	2b0f      	cmp	r3, #15
 8002b48:	f67f af40 	bls.w	80029cc <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002b4c:	bf00      	nop
 8002b4e:	bf00      	nop
 8002b50:	371c      	adds	r7, #28
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	40013800 	.word	0x40013800
 8002b60:	40020000 	.word	0x40020000
 8002b64:	40020400 	.word	0x40020400
 8002b68:	40020800 	.word	0x40020800
 8002b6c:	40020c00 	.word	0x40020c00
 8002b70:	40021000 	.word	0x40021000
 8002b74:	40013c00 	.word	0x40013c00

08002b78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b085      	sub	sp, #20
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	460b      	mov	r3, r1
 8002b82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	691a      	ldr	r2, [r3, #16]
 8002b88:	887b      	ldrh	r3, [r7, #2]
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d002      	beq.n	8002b96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b90:	2301      	movs	r3, #1
 8002b92:	73fb      	strb	r3, [r7, #15]
 8002b94:	e001      	b.n	8002b9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b96:	2300      	movs	r3, #0
 8002b98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3714      	adds	r7, #20
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	807b      	strh	r3, [r7, #2]
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bb8:	787b      	ldrb	r3, [r7, #1]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d003      	beq.n	8002bc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bbe:	887a      	ldrh	r2, [r7, #2]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002bc4:	e003      	b.n	8002bce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002bc6:	887b      	ldrh	r3, [r7, #2]
 8002bc8:	041a      	lsls	r2, r3, #16
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	619a      	str	r2, [r3, #24]
}
 8002bce:	bf00      	nop
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr

08002bda <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	b085      	sub	sp, #20
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
 8002be2:	460b      	mov	r3, r1
 8002be4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002bec:	887a      	ldrh	r2, [r7, #2]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	041a      	lsls	r2, r3, #16
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	43d9      	mvns	r1, r3
 8002bf8:	887b      	ldrh	r3, [r7, #2]
 8002bfa:	400b      	ands	r3, r1
 8002bfc:	431a      	orrs	r2, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	619a      	str	r2, [r3, #24]
}
 8002c02:	bf00      	nop
 8002c04:	3714      	adds	r7, #20
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
	...

08002c10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d101      	bne.n	8002c22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e12b      	b.n	8002e7a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d106      	bne.n	8002c3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f7fe fbb4 	bl	80013a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2224      	movs	r2, #36	@ 0x24
 8002c40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f022 0201 	bic.w	r2, r2, #1
 8002c52:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002c62:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002c72:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c74:	f001 fc90 	bl	8004598 <HAL_RCC_GetPCLK1Freq>
 8002c78:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	4a81      	ldr	r2, [pc, #516]	@ (8002e84 <HAL_I2C_Init+0x274>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d807      	bhi.n	8002c94 <HAL_I2C_Init+0x84>
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	4a80      	ldr	r2, [pc, #512]	@ (8002e88 <HAL_I2C_Init+0x278>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	bf94      	ite	ls
 8002c8c:	2301      	movls	r3, #1
 8002c8e:	2300      	movhi	r3, #0
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	e006      	b.n	8002ca2 <HAL_I2C_Init+0x92>
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	4a7d      	ldr	r2, [pc, #500]	@ (8002e8c <HAL_I2C_Init+0x27c>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	bf94      	ite	ls
 8002c9c:	2301      	movls	r3, #1
 8002c9e:	2300      	movhi	r3, #0
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e0e7      	b.n	8002e7a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	4a78      	ldr	r2, [pc, #480]	@ (8002e90 <HAL_I2C_Init+0x280>)
 8002cae:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb2:	0c9b      	lsrs	r3, r3, #18
 8002cb4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	68ba      	ldr	r2, [r7, #8]
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	6a1b      	ldr	r3, [r3, #32]
 8002cd0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	4a6a      	ldr	r2, [pc, #424]	@ (8002e84 <HAL_I2C_Init+0x274>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d802      	bhi.n	8002ce4 <HAL_I2C_Init+0xd4>
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	e009      	b.n	8002cf8 <HAL_I2C_Init+0xe8>
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002cea:	fb02 f303 	mul.w	r3, r2, r3
 8002cee:	4a69      	ldr	r2, [pc, #420]	@ (8002e94 <HAL_I2C_Init+0x284>)
 8002cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf4:	099b      	lsrs	r3, r3, #6
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	6812      	ldr	r2, [r2, #0]
 8002cfc:	430b      	orrs	r3, r1
 8002cfe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	69db      	ldr	r3, [r3, #28]
 8002d06:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002d0a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	495c      	ldr	r1, [pc, #368]	@ (8002e84 <HAL_I2C_Init+0x274>)
 8002d14:	428b      	cmp	r3, r1
 8002d16:	d819      	bhi.n	8002d4c <HAL_I2C_Init+0x13c>
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	1e59      	subs	r1, r3, #1
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	005b      	lsls	r3, r3, #1
 8002d22:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d26:	1c59      	adds	r1, r3, #1
 8002d28:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002d2c:	400b      	ands	r3, r1
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00a      	beq.n	8002d48 <HAL_I2C_Init+0x138>
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	1e59      	subs	r1, r3, #1
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	005b      	lsls	r3, r3, #1
 8002d3c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d40:	3301      	adds	r3, #1
 8002d42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d46:	e051      	b.n	8002dec <HAL_I2C_Init+0x1dc>
 8002d48:	2304      	movs	r3, #4
 8002d4a:	e04f      	b.n	8002dec <HAL_I2C_Init+0x1dc>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d111      	bne.n	8002d78 <HAL_I2C_Init+0x168>
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	1e58      	subs	r0, r3, #1
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6859      	ldr	r1, [r3, #4]
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	005b      	lsls	r3, r3, #1
 8002d60:	440b      	add	r3, r1
 8002d62:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d66:	3301      	adds	r3, #1
 8002d68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	bf0c      	ite	eq
 8002d70:	2301      	moveq	r3, #1
 8002d72:	2300      	movne	r3, #0
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	e012      	b.n	8002d9e <HAL_I2C_Init+0x18e>
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	1e58      	subs	r0, r3, #1
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6859      	ldr	r1, [r3, #4]
 8002d80:	460b      	mov	r3, r1
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	440b      	add	r3, r1
 8002d86:	0099      	lsls	r1, r3, #2
 8002d88:	440b      	add	r3, r1
 8002d8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d8e:	3301      	adds	r3, #1
 8002d90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	bf0c      	ite	eq
 8002d98:	2301      	moveq	r3, #1
 8002d9a:	2300      	movne	r3, #0
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <HAL_I2C_Init+0x196>
 8002da2:	2301      	movs	r3, #1
 8002da4:	e022      	b.n	8002dec <HAL_I2C_Init+0x1dc>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d10e      	bne.n	8002dcc <HAL_I2C_Init+0x1bc>
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	1e58      	subs	r0, r3, #1
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6859      	ldr	r1, [r3, #4]
 8002db6:	460b      	mov	r3, r1
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	440b      	add	r3, r1
 8002dbc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dc6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002dca:	e00f      	b.n	8002dec <HAL_I2C_Init+0x1dc>
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	1e58      	subs	r0, r3, #1
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6859      	ldr	r1, [r3, #4]
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	440b      	add	r3, r1
 8002dda:	0099      	lsls	r1, r3, #2
 8002ddc:	440b      	add	r3, r1
 8002dde:	fbb0 f3f3 	udiv	r3, r0, r3
 8002de2:	3301      	adds	r3, #1
 8002de4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002de8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002dec:	6879      	ldr	r1, [r7, #4]
 8002dee:	6809      	ldr	r1, [r1, #0]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	69da      	ldr	r2, [r3, #28]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a1b      	ldr	r3, [r3, #32]
 8002e06:	431a      	orrs	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002e1a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	6911      	ldr	r1, [r2, #16]
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	68d2      	ldr	r2, [r2, #12]
 8002e26:	4311      	orrs	r1, r2
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	6812      	ldr	r2, [r2, #0]
 8002e2c:	430b      	orrs	r3, r1
 8002e2e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	695a      	ldr	r2, [r3, #20]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	431a      	orrs	r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	430a      	orrs	r2, r1
 8002e4a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f042 0201 	orr.w	r2, r2, #1
 8002e5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2220      	movs	r2, #32
 8002e66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3710      	adds	r7, #16
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	000186a0 	.word	0x000186a0
 8002e88:	001e847f 	.word	0x001e847f
 8002e8c:	003d08ff 	.word	0x003d08ff
 8002e90:	431bde83 	.word	0x431bde83
 8002e94:	10624dd3 	.word	0x10624dd3

08002e98 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d101      	bne.n	8002eaa <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e021      	b.n	8002eee <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2224      	movs	r2, #36	@ 0x24
 8002eae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f022 0201 	bic.w	r2, r2, #1
 8002ec0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f7fe fab6 	bl	8001434 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3708      	adds	r7, #8
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
	...

08002ef8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b088      	sub	sp, #32
 8002efc:	af02      	add	r7, sp, #8
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	4608      	mov	r0, r1
 8002f02:	4611      	mov	r1, r2
 8002f04:	461a      	mov	r2, r3
 8002f06:	4603      	mov	r3, r0
 8002f08:	817b      	strh	r3, [r7, #10]
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	813b      	strh	r3, [r7, #8]
 8002f0e:	4613      	mov	r3, r2
 8002f10:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f12:	f7ff faad 	bl	8002470 <HAL_GetTick>
 8002f16:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	2b20      	cmp	r3, #32
 8002f22:	f040 80d9 	bne.w	80030d8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	9300      	str	r3, [sp, #0]
 8002f2a:	2319      	movs	r3, #25
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	496d      	ldr	r1, [pc, #436]	@ (80030e4 <HAL_I2C_Mem_Write+0x1ec>)
 8002f30:	68f8      	ldr	r0, [r7, #12]
 8002f32:	f000 fc8b 	bl	800384c <I2C_WaitOnFlagUntilTimeout>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d001      	beq.n	8002f40 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	e0cc      	b.n	80030da <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d101      	bne.n	8002f4e <HAL_I2C_Mem_Write+0x56>
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	e0c5      	b.n	80030da <HAL_I2C_Mem_Write+0x1e2>
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2201      	movs	r2, #1
 8002f52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0301 	and.w	r3, r3, #1
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d007      	beq.n	8002f74 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f042 0201 	orr.w	r2, r2, #1
 8002f72:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f82:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2221      	movs	r2, #33	@ 0x21
 8002f88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2240      	movs	r2, #64	@ 0x40
 8002f90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2200      	movs	r2, #0
 8002f98:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6a3a      	ldr	r2, [r7, #32]
 8002f9e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002fa4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002faa:	b29a      	uxth	r2, r3
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	4a4d      	ldr	r2, [pc, #308]	@ (80030e8 <HAL_I2C_Mem_Write+0x1f0>)
 8002fb4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002fb6:	88f8      	ldrh	r0, [r7, #6]
 8002fb8:	893a      	ldrh	r2, [r7, #8]
 8002fba:	8979      	ldrh	r1, [r7, #10]
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	9301      	str	r3, [sp, #4]
 8002fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fc2:	9300      	str	r3, [sp, #0]
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	68f8      	ldr	r0, [r7, #12]
 8002fc8:	f000 fac2 	bl	8003550 <I2C_RequestMemoryWrite>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d052      	beq.n	8003078 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e081      	b.n	80030da <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fd6:	697a      	ldr	r2, [r7, #20]
 8002fd8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	f000 fd50 	bl	8003a80 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d00d      	beq.n	8003002 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fea:	2b04      	cmp	r3, #4
 8002fec:	d107      	bne.n	8002ffe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ffc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e06b      	b.n	80030da <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003006:	781a      	ldrb	r2, [r3, #0]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003012:	1c5a      	adds	r2, r3, #1
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800301c:	3b01      	subs	r3, #1
 800301e:	b29a      	uxth	r2, r3
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003028:	b29b      	uxth	r3, r3
 800302a:	3b01      	subs	r3, #1
 800302c:	b29a      	uxth	r2, r3
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	695b      	ldr	r3, [r3, #20]
 8003038:	f003 0304 	and.w	r3, r3, #4
 800303c:	2b04      	cmp	r3, #4
 800303e:	d11b      	bne.n	8003078 <HAL_I2C_Mem_Write+0x180>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003044:	2b00      	cmp	r3, #0
 8003046:	d017      	beq.n	8003078 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800304c:	781a      	ldrb	r2, [r3, #0]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003058:	1c5a      	adds	r2, r3, #1
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003062:	3b01      	subs	r3, #1
 8003064:	b29a      	uxth	r2, r3
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800306e:	b29b      	uxth	r3, r3
 8003070:	3b01      	subs	r3, #1
 8003072:	b29a      	uxth	r2, r3
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800307c:	2b00      	cmp	r3, #0
 800307e:	d1aa      	bne.n	8002fd6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003080:	697a      	ldr	r2, [r7, #20]
 8003082:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003084:	68f8      	ldr	r0, [r7, #12]
 8003086:	f000 fd43 	bl	8003b10 <I2C_WaitOnBTFFlagUntilTimeout>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d00d      	beq.n	80030ac <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003094:	2b04      	cmp	r3, #4
 8003096:	d107      	bne.n	80030a8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030a6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e016      	b.n	80030da <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2220      	movs	r2, #32
 80030c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80030d4:	2300      	movs	r3, #0
 80030d6:	e000      	b.n	80030da <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80030d8:	2302      	movs	r3, #2
  }
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3718      	adds	r7, #24
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	00100002 	.word	0x00100002
 80030e8:	ffff0000 	.word	0xffff0000

080030ec <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b08c      	sub	sp, #48	@ 0x30
 80030f0:	af02      	add	r7, sp, #8
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	4608      	mov	r0, r1
 80030f6:	4611      	mov	r1, r2
 80030f8:	461a      	mov	r2, r3
 80030fa:	4603      	mov	r3, r0
 80030fc:	817b      	strh	r3, [r7, #10]
 80030fe:	460b      	mov	r3, r1
 8003100:	813b      	strh	r3, [r7, #8]
 8003102:	4613      	mov	r3, r2
 8003104:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003106:	f7ff f9b3 	bl	8002470 <HAL_GetTick>
 800310a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003112:	b2db      	uxtb	r3, r3
 8003114:	2b20      	cmp	r3, #32
 8003116:	f040 8214 	bne.w	8003542 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800311a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800311c:	9300      	str	r3, [sp, #0]
 800311e:	2319      	movs	r3, #25
 8003120:	2201      	movs	r2, #1
 8003122:	497b      	ldr	r1, [pc, #492]	@ (8003310 <HAL_I2C_Mem_Read+0x224>)
 8003124:	68f8      	ldr	r0, [r7, #12]
 8003126:	f000 fb91 	bl	800384c <I2C_WaitOnFlagUntilTimeout>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d001      	beq.n	8003134 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003130:	2302      	movs	r3, #2
 8003132:	e207      	b.n	8003544 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800313a:	2b01      	cmp	r3, #1
 800313c:	d101      	bne.n	8003142 <HAL_I2C_Mem_Read+0x56>
 800313e:	2302      	movs	r3, #2
 8003140:	e200      	b.n	8003544 <HAL_I2C_Mem_Read+0x458>
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2201      	movs	r2, #1
 8003146:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0301 	and.w	r3, r3, #1
 8003154:	2b01      	cmp	r3, #1
 8003156:	d007      	beq.n	8003168 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f042 0201 	orr.w	r2, r2, #1
 8003166:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003176:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2222      	movs	r2, #34	@ 0x22
 800317c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2240      	movs	r2, #64	@ 0x40
 8003184:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003192:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003198:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800319e:	b29a      	uxth	r2, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	4a5b      	ldr	r2, [pc, #364]	@ (8003314 <HAL_I2C_Mem_Read+0x228>)
 80031a8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80031aa:	88f8      	ldrh	r0, [r7, #6]
 80031ac:	893a      	ldrh	r2, [r7, #8]
 80031ae:	8979      	ldrh	r1, [r7, #10]
 80031b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b2:	9301      	str	r3, [sp, #4]
 80031b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031b6:	9300      	str	r3, [sp, #0]
 80031b8:	4603      	mov	r3, r0
 80031ba:	68f8      	ldr	r0, [r7, #12]
 80031bc:	f000 fa5e 	bl	800367c <I2C_RequestMemoryRead>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d001      	beq.n	80031ca <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e1bc      	b.n	8003544 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d113      	bne.n	80031fa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031d2:	2300      	movs	r3, #0
 80031d4:	623b      	str	r3, [r7, #32]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	695b      	ldr	r3, [r3, #20]
 80031dc:	623b      	str	r3, [r7, #32]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	699b      	ldr	r3, [r3, #24]
 80031e4:	623b      	str	r3, [r7, #32]
 80031e6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031f6:	601a      	str	r2, [r3, #0]
 80031f8:	e190      	b.n	800351c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d11b      	bne.n	800323a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003210:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003212:	2300      	movs	r3, #0
 8003214:	61fb      	str	r3, [r7, #28]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	695b      	ldr	r3, [r3, #20]
 800321c:	61fb      	str	r3, [r7, #28]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	699b      	ldr	r3, [r3, #24]
 8003224:	61fb      	str	r3, [r7, #28]
 8003226:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003236:	601a      	str	r2, [r3, #0]
 8003238:	e170      	b.n	800351c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800323e:	2b02      	cmp	r3, #2
 8003240:	d11b      	bne.n	800327a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003250:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003260:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003262:	2300      	movs	r3, #0
 8003264:	61bb      	str	r3, [r7, #24]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	695b      	ldr	r3, [r3, #20]
 800326c:	61bb      	str	r3, [r7, #24]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	699b      	ldr	r3, [r3, #24]
 8003274:	61bb      	str	r3, [r7, #24]
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	e150      	b.n	800351c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800327a:	2300      	movs	r3, #0
 800327c:	617b      	str	r3, [r7, #20]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	695b      	ldr	r3, [r3, #20]
 8003284:	617b      	str	r3, [r7, #20]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	699b      	ldr	r3, [r3, #24]
 800328c:	617b      	str	r3, [r7, #20]
 800328e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003290:	e144      	b.n	800351c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003296:	2b03      	cmp	r3, #3
 8003298:	f200 80f1 	bhi.w	800347e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d123      	bne.n	80032ec <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032a6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80032a8:	68f8      	ldr	r0, [r7, #12]
 80032aa:	f000 fc79 	bl	8003ba0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d001      	beq.n	80032b8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e145      	b.n	8003544 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	691a      	ldr	r2, [r3, #16]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c2:	b2d2      	uxtb	r2, r2
 80032c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ca:	1c5a      	adds	r2, r3, #1
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032d4:	3b01      	subs	r3, #1
 80032d6:	b29a      	uxth	r2, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	3b01      	subs	r3, #1
 80032e4:	b29a      	uxth	r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80032ea:	e117      	b.n	800351c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d14e      	bne.n	8003392 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80032f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f6:	9300      	str	r3, [sp, #0]
 80032f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032fa:	2200      	movs	r2, #0
 80032fc:	4906      	ldr	r1, [pc, #24]	@ (8003318 <HAL_I2C_Mem_Read+0x22c>)
 80032fe:	68f8      	ldr	r0, [r7, #12]
 8003300:	f000 faa4 	bl	800384c <I2C_WaitOnFlagUntilTimeout>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d008      	beq.n	800331c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e11a      	b.n	8003544 <HAL_I2C_Mem_Read+0x458>
 800330e:	bf00      	nop
 8003310:	00100002 	.word	0x00100002
 8003314:	ffff0000 	.word	0xffff0000
 8003318:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800332a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	691a      	ldr	r2, [r3, #16]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003336:	b2d2      	uxtb	r2, r2
 8003338:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800333e:	1c5a      	adds	r2, r3, #1
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003348:	3b01      	subs	r3, #1
 800334a:	b29a      	uxth	r2, r3
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003354:	b29b      	uxth	r3, r3
 8003356:	3b01      	subs	r3, #1
 8003358:	b29a      	uxth	r2, r3
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	691a      	ldr	r2, [r3, #16]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003368:	b2d2      	uxtb	r2, r2
 800336a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003370:	1c5a      	adds	r2, r3, #1
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800337a:	3b01      	subs	r3, #1
 800337c:	b29a      	uxth	r2, r3
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003386:	b29b      	uxth	r3, r3
 8003388:	3b01      	subs	r3, #1
 800338a:	b29a      	uxth	r2, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003390:	e0c4      	b.n	800351c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003394:	9300      	str	r3, [sp, #0]
 8003396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003398:	2200      	movs	r2, #0
 800339a:	496c      	ldr	r1, [pc, #432]	@ (800354c <HAL_I2C_Mem_Read+0x460>)
 800339c:	68f8      	ldr	r0, [r7, #12]
 800339e:	f000 fa55 	bl	800384c <I2C_WaitOnFlagUntilTimeout>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d001      	beq.n	80033ac <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e0cb      	b.n	8003544 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	691a      	ldr	r2, [r3, #16]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c6:	b2d2      	uxtb	r2, r2
 80033c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ce:	1c5a      	adds	r2, r3, #1
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033d8:	3b01      	subs	r3, #1
 80033da:	b29a      	uxth	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	3b01      	subs	r3, #1
 80033e8:	b29a      	uxth	r2, r3
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80033ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f0:	9300      	str	r3, [sp, #0]
 80033f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033f4:	2200      	movs	r2, #0
 80033f6:	4955      	ldr	r1, [pc, #340]	@ (800354c <HAL_I2C_Mem_Read+0x460>)
 80033f8:	68f8      	ldr	r0, [r7, #12]
 80033fa:	f000 fa27 	bl	800384c <I2C_WaitOnFlagUntilTimeout>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d001      	beq.n	8003408 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e09d      	b.n	8003544 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003416:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	691a      	ldr	r2, [r3, #16]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003422:	b2d2      	uxtb	r2, r2
 8003424:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800342a:	1c5a      	adds	r2, r3, #1
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003434:	3b01      	subs	r3, #1
 8003436:	b29a      	uxth	r2, r3
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003440:	b29b      	uxth	r3, r3
 8003442:	3b01      	subs	r3, #1
 8003444:	b29a      	uxth	r2, r3
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	691a      	ldr	r2, [r3, #16]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003454:	b2d2      	uxtb	r2, r2
 8003456:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800345c:	1c5a      	adds	r2, r3, #1
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003466:	3b01      	subs	r3, #1
 8003468:	b29a      	uxth	r2, r3
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003472:	b29b      	uxth	r3, r3
 8003474:	3b01      	subs	r3, #1
 8003476:	b29a      	uxth	r2, r3
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800347c:	e04e      	b.n	800351c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800347e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003480:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003482:	68f8      	ldr	r0, [r7, #12]
 8003484:	f000 fb8c 	bl	8003ba0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d001      	beq.n	8003492 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e058      	b.n	8003544 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	691a      	ldr	r2, [r3, #16]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800349c:	b2d2      	uxtb	r2, r2
 800349e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a4:	1c5a      	adds	r2, r3, #1
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034ae:	3b01      	subs	r3, #1
 80034b0:	b29a      	uxth	r2, r3
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	3b01      	subs	r3, #1
 80034be:	b29a      	uxth	r2, r3
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	695b      	ldr	r3, [r3, #20]
 80034ca:	f003 0304 	and.w	r3, r3, #4
 80034ce:	2b04      	cmp	r3, #4
 80034d0:	d124      	bne.n	800351c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034d6:	2b03      	cmp	r3, #3
 80034d8:	d107      	bne.n	80034ea <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034e8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	691a      	ldr	r2, [r3, #16]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f4:	b2d2      	uxtb	r2, r2
 80034f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034fc:	1c5a      	adds	r2, r3, #1
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003506:	3b01      	subs	r3, #1
 8003508:	b29a      	uxth	r2, r3
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003512:	b29b      	uxth	r3, r3
 8003514:	3b01      	subs	r3, #1
 8003516:	b29a      	uxth	r2, r3
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003520:	2b00      	cmp	r3, #0
 8003522:	f47f aeb6 	bne.w	8003292 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2220      	movs	r2, #32
 800352a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800353e:	2300      	movs	r3, #0
 8003540:	e000      	b.n	8003544 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003542:	2302      	movs	r3, #2
  }
}
 8003544:	4618      	mov	r0, r3
 8003546:	3728      	adds	r7, #40	@ 0x28
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	00010004 	.word	0x00010004

08003550 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b088      	sub	sp, #32
 8003554:	af02      	add	r7, sp, #8
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	4608      	mov	r0, r1
 800355a:	4611      	mov	r1, r2
 800355c:	461a      	mov	r2, r3
 800355e:	4603      	mov	r3, r0
 8003560:	817b      	strh	r3, [r7, #10]
 8003562:	460b      	mov	r3, r1
 8003564:	813b      	strh	r3, [r7, #8]
 8003566:	4613      	mov	r3, r2
 8003568:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003578:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800357a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800357c:	9300      	str	r3, [sp, #0]
 800357e:	6a3b      	ldr	r3, [r7, #32]
 8003580:	2200      	movs	r2, #0
 8003582:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003586:	68f8      	ldr	r0, [r7, #12]
 8003588:	f000 f960 	bl	800384c <I2C_WaitOnFlagUntilTimeout>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00d      	beq.n	80035ae <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800359c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035a0:	d103      	bne.n	80035aa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80035a8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e05f      	b.n	800366e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80035ae:	897b      	ldrh	r3, [r7, #10]
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	461a      	mov	r2, r3
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80035bc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c0:	6a3a      	ldr	r2, [r7, #32]
 80035c2:	492d      	ldr	r1, [pc, #180]	@ (8003678 <I2C_RequestMemoryWrite+0x128>)
 80035c4:	68f8      	ldr	r0, [r7, #12]
 80035c6:	f000 f9bb 	bl	8003940 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d001      	beq.n	80035d4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e04c      	b.n	800366e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035d4:	2300      	movs	r3, #0
 80035d6:	617b      	str	r3, [r7, #20]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	695b      	ldr	r3, [r3, #20]
 80035de:	617b      	str	r3, [r7, #20]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	699b      	ldr	r3, [r3, #24]
 80035e6:	617b      	str	r3, [r7, #20]
 80035e8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035ec:	6a39      	ldr	r1, [r7, #32]
 80035ee:	68f8      	ldr	r0, [r7, #12]
 80035f0:	f000 fa46 	bl	8003a80 <I2C_WaitOnTXEFlagUntilTimeout>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00d      	beq.n	8003616 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035fe:	2b04      	cmp	r3, #4
 8003600:	d107      	bne.n	8003612 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003610:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e02b      	b.n	800366e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003616:	88fb      	ldrh	r3, [r7, #6]
 8003618:	2b01      	cmp	r3, #1
 800361a:	d105      	bne.n	8003628 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800361c:	893b      	ldrh	r3, [r7, #8]
 800361e:	b2da      	uxtb	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	611a      	str	r2, [r3, #16]
 8003626:	e021      	b.n	800366c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003628:	893b      	ldrh	r3, [r7, #8]
 800362a:	0a1b      	lsrs	r3, r3, #8
 800362c:	b29b      	uxth	r3, r3
 800362e:	b2da      	uxtb	r2, r3
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003636:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003638:	6a39      	ldr	r1, [r7, #32]
 800363a:	68f8      	ldr	r0, [r7, #12]
 800363c:	f000 fa20 	bl	8003a80 <I2C_WaitOnTXEFlagUntilTimeout>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00d      	beq.n	8003662 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800364a:	2b04      	cmp	r3, #4
 800364c:	d107      	bne.n	800365e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800365c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e005      	b.n	800366e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003662:	893b      	ldrh	r3, [r7, #8]
 8003664:	b2da      	uxtb	r2, r3
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	3718      	adds	r7, #24
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	00010002 	.word	0x00010002

0800367c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b088      	sub	sp, #32
 8003680:	af02      	add	r7, sp, #8
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	4608      	mov	r0, r1
 8003686:	4611      	mov	r1, r2
 8003688:	461a      	mov	r2, r3
 800368a:	4603      	mov	r3, r0
 800368c:	817b      	strh	r3, [r7, #10]
 800368e:	460b      	mov	r3, r1
 8003690:	813b      	strh	r3, [r7, #8]
 8003692:	4613      	mov	r3, r2
 8003694:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80036a4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80036b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b8:	9300      	str	r3, [sp, #0]
 80036ba:	6a3b      	ldr	r3, [r7, #32]
 80036bc:	2200      	movs	r2, #0
 80036be:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80036c2:	68f8      	ldr	r0, [r7, #12]
 80036c4:	f000 f8c2 	bl	800384c <I2C_WaitOnFlagUntilTimeout>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00d      	beq.n	80036ea <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036dc:	d103      	bne.n	80036e6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036e4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e0aa      	b.n	8003840 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80036ea:	897b      	ldrh	r3, [r7, #10]
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	461a      	mov	r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80036f8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036fc:	6a3a      	ldr	r2, [r7, #32]
 80036fe:	4952      	ldr	r1, [pc, #328]	@ (8003848 <I2C_RequestMemoryRead+0x1cc>)
 8003700:	68f8      	ldr	r0, [r7, #12]
 8003702:	f000 f91d 	bl	8003940 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d001      	beq.n	8003710 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e097      	b.n	8003840 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003710:	2300      	movs	r3, #0
 8003712:	617b      	str	r3, [r7, #20]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	617b      	str	r3, [r7, #20]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	617b      	str	r3, [r7, #20]
 8003724:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003726:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003728:	6a39      	ldr	r1, [r7, #32]
 800372a:	68f8      	ldr	r0, [r7, #12]
 800372c:	f000 f9a8 	bl	8003a80 <I2C_WaitOnTXEFlagUntilTimeout>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d00d      	beq.n	8003752 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800373a:	2b04      	cmp	r3, #4
 800373c:	d107      	bne.n	800374e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800374c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e076      	b.n	8003840 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003752:	88fb      	ldrh	r3, [r7, #6]
 8003754:	2b01      	cmp	r3, #1
 8003756:	d105      	bne.n	8003764 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003758:	893b      	ldrh	r3, [r7, #8]
 800375a:	b2da      	uxtb	r2, r3
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	611a      	str	r2, [r3, #16]
 8003762:	e021      	b.n	80037a8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003764:	893b      	ldrh	r3, [r7, #8]
 8003766:	0a1b      	lsrs	r3, r3, #8
 8003768:	b29b      	uxth	r3, r3
 800376a:	b2da      	uxtb	r2, r3
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003772:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003774:	6a39      	ldr	r1, [r7, #32]
 8003776:	68f8      	ldr	r0, [r7, #12]
 8003778:	f000 f982 	bl	8003a80 <I2C_WaitOnTXEFlagUntilTimeout>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00d      	beq.n	800379e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003786:	2b04      	cmp	r3, #4
 8003788:	d107      	bne.n	800379a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003798:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e050      	b.n	8003840 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800379e:	893b      	ldrh	r3, [r7, #8]
 80037a0:	b2da      	uxtb	r2, r3
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037aa:	6a39      	ldr	r1, [r7, #32]
 80037ac:	68f8      	ldr	r0, [r7, #12]
 80037ae:	f000 f967 	bl	8003a80 <I2C_WaitOnTXEFlagUntilTimeout>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d00d      	beq.n	80037d4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037bc:	2b04      	cmp	r3, #4
 80037be:	d107      	bne.n	80037d0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037ce:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e035      	b.n	8003840 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80037e2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e6:	9300      	str	r3, [sp, #0]
 80037e8:	6a3b      	ldr	r3, [r7, #32]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80037f0:	68f8      	ldr	r0, [r7, #12]
 80037f2:	f000 f82b 	bl	800384c <I2C_WaitOnFlagUntilTimeout>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d00d      	beq.n	8003818 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003806:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800380a:	d103      	bne.n	8003814 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003812:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003814:	2303      	movs	r3, #3
 8003816:	e013      	b.n	8003840 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003818:	897b      	ldrh	r3, [r7, #10]
 800381a:	b2db      	uxtb	r3, r3
 800381c:	f043 0301 	orr.w	r3, r3, #1
 8003820:	b2da      	uxtb	r2, r3
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800382a:	6a3a      	ldr	r2, [r7, #32]
 800382c:	4906      	ldr	r1, [pc, #24]	@ (8003848 <I2C_RequestMemoryRead+0x1cc>)
 800382e:	68f8      	ldr	r0, [r7, #12]
 8003830:	f000 f886 	bl	8003940 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d001      	beq.n	800383e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e000      	b.n	8003840 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800383e:	2300      	movs	r3, #0
}
 8003840:	4618      	mov	r0, r3
 8003842:	3718      	adds	r7, #24
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	00010002 	.word	0x00010002

0800384c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	603b      	str	r3, [r7, #0]
 8003858:	4613      	mov	r3, r2
 800385a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800385c:	e048      	b.n	80038f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003864:	d044      	beq.n	80038f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003866:	f7fe fe03 	bl	8002470 <HAL_GetTick>
 800386a:	4602      	mov	r2, r0
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	683a      	ldr	r2, [r7, #0]
 8003872:	429a      	cmp	r2, r3
 8003874:	d302      	bcc.n	800387c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d139      	bne.n	80038f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	0c1b      	lsrs	r3, r3, #16
 8003880:	b2db      	uxtb	r3, r3
 8003882:	2b01      	cmp	r3, #1
 8003884:	d10d      	bne.n	80038a2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	695b      	ldr	r3, [r3, #20]
 800388c:	43da      	mvns	r2, r3
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	4013      	ands	r3, r2
 8003892:	b29b      	uxth	r3, r3
 8003894:	2b00      	cmp	r3, #0
 8003896:	bf0c      	ite	eq
 8003898:	2301      	moveq	r3, #1
 800389a:	2300      	movne	r3, #0
 800389c:	b2db      	uxtb	r3, r3
 800389e:	461a      	mov	r2, r3
 80038a0:	e00c      	b.n	80038bc <I2C_WaitOnFlagUntilTimeout+0x70>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	699b      	ldr	r3, [r3, #24]
 80038a8:	43da      	mvns	r2, r3
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	4013      	ands	r3, r2
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	bf0c      	ite	eq
 80038b4:	2301      	moveq	r3, #1
 80038b6:	2300      	movne	r3, #0
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	461a      	mov	r2, r3
 80038bc:	79fb      	ldrb	r3, [r7, #7]
 80038be:	429a      	cmp	r2, r3
 80038c0:	d116      	bne.n	80038f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2200      	movs	r2, #0
 80038c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2220      	movs	r2, #32
 80038cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038dc:	f043 0220 	orr.w	r2, r3, #32
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e023      	b.n	8003938 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	0c1b      	lsrs	r3, r3, #16
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d10d      	bne.n	8003916 <I2C_WaitOnFlagUntilTimeout+0xca>
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	695b      	ldr	r3, [r3, #20]
 8003900:	43da      	mvns	r2, r3
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	4013      	ands	r3, r2
 8003906:	b29b      	uxth	r3, r3
 8003908:	2b00      	cmp	r3, #0
 800390a:	bf0c      	ite	eq
 800390c:	2301      	moveq	r3, #1
 800390e:	2300      	movne	r3, #0
 8003910:	b2db      	uxtb	r3, r3
 8003912:	461a      	mov	r2, r3
 8003914:	e00c      	b.n	8003930 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	43da      	mvns	r2, r3
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	4013      	ands	r3, r2
 8003922:	b29b      	uxth	r3, r3
 8003924:	2b00      	cmp	r3, #0
 8003926:	bf0c      	ite	eq
 8003928:	2301      	moveq	r3, #1
 800392a:	2300      	movne	r3, #0
 800392c:	b2db      	uxtb	r3, r3
 800392e:	461a      	mov	r2, r3
 8003930:	79fb      	ldrb	r3, [r7, #7]
 8003932:	429a      	cmp	r2, r3
 8003934:	d093      	beq.n	800385e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	3710      	adds	r7, #16
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
 800394c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800394e:	e071      	b.n	8003a34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800395a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800395e:	d123      	bne.n	80039a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800396e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003978:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2220      	movs	r2, #32
 8003984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2200      	movs	r2, #0
 800398c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003994:	f043 0204 	orr.w	r2, r3, #4
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e067      	b.n	8003a78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80039ae:	d041      	beq.n	8003a34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039b0:	f7fe fd5e 	bl	8002470 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d302      	bcc.n	80039c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d136      	bne.n	8003a34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	0c1b      	lsrs	r3, r3, #16
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d10c      	bne.n	80039ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	695b      	ldr	r3, [r3, #20]
 80039d6:	43da      	mvns	r2, r3
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	4013      	ands	r3, r2
 80039dc:	b29b      	uxth	r3, r3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	bf14      	ite	ne
 80039e2:	2301      	movne	r3, #1
 80039e4:	2300      	moveq	r3, #0
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	e00b      	b.n	8003a02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	699b      	ldr	r3, [r3, #24]
 80039f0:	43da      	mvns	r2, r3
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	4013      	ands	r3, r2
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	bf14      	ite	ne
 80039fc:	2301      	movne	r3, #1
 80039fe:	2300      	moveq	r3, #0
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d016      	beq.n	8003a34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2220      	movs	r2, #32
 8003a10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a20:	f043 0220 	orr.w	r2, r3, #32
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e021      	b.n	8003a78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	0c1b      	lsrs	r3, r3, #16
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d10c      	bne.n	8003a58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	695b      	ldr	r3, [r3, #20]
 8003a44:	43da      	mvns	r2, r3
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	4013      	ands	r3, r2
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	bf14      	ite	ne
 8003a50:	2301      	movne	r3, #1
 8003a52:	2300      	moveq	r3, #0
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	e00b      	b.n	8003a70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	699b      	ldr	r3, [r3, #24]
 8003a5e:	43da      	mvns	r2, r3
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	4013      	ands	r3, r2
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	bf14      	ite	ne
 8003a6a:	2301      	movne	r3, #1
 8003a6c:	2300      	moveq	r3, #0
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	f47f af6d 	bne.w	8003950 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003a76:	2300      	movs	r3, #0
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3710      	adds	r7, #16
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a8c:	e034      	b.n	8003af8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a8e:	68f8      	ldr	r0, [r7, #12]
 8003a90:	f000 f8e3 	bl	8003c5a <I2C_IsAcknowledgeFailed>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d001      	beq.n	8003a9e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e034      	b.n	8003b08 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003aa4:	d028      	beq.n	8003af8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aa6:	f7fe fce3 	bl	8002470 <HAL_GetTick>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	68ba      	ldr	r2, [r7, #8]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d302      	bcc.n	8003abc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d11d      	bne.n	8003af8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ac6:	2b80      	cmp	r3, #128	@ 0x80
 8003ac8:	d016      	beq.n	8003af8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2200      	movs	r2, #0
 8003ace:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2220      	movs	r2, #32
 8003ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae4:	f043 0220 	orr.w	r2, r3, #32
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e007      	b.n	8003b08 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	695b      	ldr	r3, [r3, #20]
 8003afe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b02:	2b80      	cmp	r3, #128	@ 0x80
 8003b04:	d1c3      	bne.n	8003a8e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003b06:	2300      	movs	r3, #0
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3710      	adds	r7, #16
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b1c:	e034      	b.n	8003b88 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b1e:	68f8      	ldr	r0, [r7, #12]
 8003b20:	f000 f89b 	bl	8003c5a <I2C_IsAcknowledgeFailed>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d001      	beq.n	8003b2e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e034      	b.n	8003b98 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b34:	d028      	beq.n	8003b88 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b36:	f7fe fc9b 	bl	8002470 <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	68ba      	ldr	r2, [r7, #8]
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d302      	bcc.n	8003b4c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d11d      	bne.n	8003b88 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	f003 0304 	and.w	r3, r3, #4
 8003b56:	2b04      	cmp	r3, #4
 8003b58:	d016      	beq.n	8003b88 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2220      	movs	r2, #32
 8003b64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b74:	f043 0220 	orr.w	r2, r3, #32
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e007      	b.n	8003b98 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	f003 0304 	and.w	r3, r3, #4
 8003b92:	2b04      	cmp	r3, #4
 8003b94:	d1c3      	bne.n	8003b1e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003b96:	2300      	movs	r3, #0
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3710      	adds	r7, #16
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	60b9      	str	r1, [r7, #8]
 8003baa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003bac:	e049      	b.n	8003c42 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	695b      	ldr	r3, [r3, #20]
 8003bb4:	f003 0310 	and.w	r3, r3, #16
 8003bb8:	2b10      	cmp	r3, #16
 8003bba:	d119      	bne.n	8003bf0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f06f 0210 	mvn.w	r2, #16
 8003bc4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2220      	movs	r2, #32
 8003bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e030      	b.n	8003c52 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bf0:	f7fe fc3e 	bl	8002470 <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	68ba      	ldr	r2, [r7, #8]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d302      	bcc.n	8003c06 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d11d      	bne.n	8003c42 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	695b      	ldr	r3, [r3, #20]
 8003c0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c10:	2b40      	cmp	r3, #64	@ 0x40
 8003c12:	d016      	beq.n	8003c42 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2200      	movs	r2, #0
 8003c18:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2220      	movs	r2, #32
 8003c1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c2e:	f043 0220 	orr.w	r2, r3, #32
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e007      	b.n	8003c52 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	695b      	ldr	r3, [r3, #20]
 8003c48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c4c:	2b40      	cmp	r3, #64	@ 0x40
 8003c4e:	d1ae      	bne.n	8003bae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3710      	adds	r7, #16
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}

08003c5a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003c5a:	b480      	push	{r7}
 8003c5c:	b083      	sub	sp, #12
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	695b      	ldr	r3, [r3, #20]
 8003c68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c70:	d11b      	bne.n	8003caa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003c7a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2220      	movs	r2, #32
 8003c86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c96:	f043 0204 	orr.w	r2, r3, #4
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e000      	b.n	8003cac <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b086      	sub	sp, #24
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d101      	bne.n	8003cca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e267      	b.n	800419a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0301 	and.w	r3, r3, #1
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d075      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003cd6:	4b88      	ldr	r3, [pc, #544]	@ (8003ef8 <HAL_RCC_OscConfig+0x240>)
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	f003 030c 	and.w	r3, r3, #12
 8003cde:	2b04      	cmp	r3, #4
 8003ce0:	d00c      	beq.n	8003cfc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ce2:	4b85      	ldr	r3, [pc, #532]	@ (8003ef8 <HAL_RCC_OscConfig+0x240>)
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003cea:	2b08      	cmp	r3, #8
 8003cec:	d112      	bne.n	8003d14 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cee:	4b82      	ldr	r3, [pc, #520]	@ (8003ef8 <HAL_RCC_OscConfig+0x240>)
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cf6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003cfa:	d10b      	bne.n	8003d14 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cfc:	4b7e      	ldr	r3, [pc, #504]	@ (8003ef8 <HAL_RCC_OscConfig+0x240>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d05b      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x108>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d157      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e242      	b.n	800419a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d1c:	d106      	bne.n	8003d2c <HAL_RCC_OscConfig+0x74>
 8003d1e:	4b76      	ldr	r3, [pc, #472]	@ (8003ef8 <HAL_RCC_OscConfig+0x240>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a75      	ldr	r2, [pc, #468]	@ (8003ef8 <HAL_RCC_OscConfig+0x240>)
 8003d24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d28:	6013      	str	r3, [r2, #0]
 8003d2a:	e01d      	b.n	8003d68 <HAL_RCC_OscConfig+0xb0>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d34:	d10c      	bne.n	8003d50 <HAL_RCC_OscConfig+0x98>
 8003d36:	4b70      	ldr	r3, [pc, #448]	@ (8003ef8 <HAL_RCC_OscConfig+0x240>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a6f      	ldr	r2, [pc, #444]	@ (8003ef8 <HAL_RCC_OscConfig+0x240>)
 8003d3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d40:	6013      	str	r3, [r2, #0]
 8003d42:	4b6d      	ldr	r3, [pc, #436]	@ (8003ef8 <HAL_RCC_OscConfig+0x240>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a6c      	ldr	r2, [pc, #432]	@ (8003ef8 <HAL_RCC_OscConfig+0x240>)
 8003d48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d4c:	6013      	str	r3, [r2, #0]
 8003d4e:	e00b      	b.n	8003d68 <HAL_RCC_OscConfig+0xb0>
 8003d50:	4b69      	ldr	r3, [pc, #420]	@ (8003ef8 <HAL_RCC_OscConfig+0x240>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a68      	ldr	r2, [pc, #416]	@ (8003ef8 <HAL_RCC_OscConfig+0x240>)
 8003d56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d5a:	6013      	str	r3, [r2, #0]
 8003d5c:	4b66      	ldr	r3, [pc, #408]	@ (8003ef8 <HAL_RCC_OscConfig+0x240>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a65      	ldr	r2, [pc, #404]	@ (8003ef8 <HAL_RCC_OscConfig+0x240>)
 8003d62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d013      	beq.n	8003d98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d70:	f7fe fb7e 	bl	8002470 <HAL_GetTick>
 8003d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d76:	e008      	b.n	8003d8a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d78:	f7fe fb7a 	bl	8002470 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b64      	cmp	r3, #100	@ 0x64
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e207      	b.n	800419a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d8a:	4b5b      	ldr	r3, [pc, #364]	@ (8003ef8 <HAL_RCC_OscConfig+0x240>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d0f0      	beq.n	8003d78 <HAL_RCC_OscConfig+0xc0>
 8003d96:	e014      	b.n	8003dc2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d98:	f7fe fb6a 	bl	8002470 <HAL_GetTick>
 8003d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d9e:	e008      	b.n	8003db2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003da0:	f7fe fb66 	bl	8002470 <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	2b64      	cmp	r3, #100	@ 0x64
 8003dac:	d901      	bls.n	8003db2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e1f3      	b.n	800419a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003db2:	4b51      	ldr	r3, [pc, #324]	@ (8003ef8 <HAL_RCC_OscConfig+0x240>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d1f0      	bne.n	8003da0 <HAL_RCC_OscConfig+0xe8>
 8003dbe:	e000      	b.n	8003dc2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0302 	and.w	r3, r3, #2
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d063      	beq.n	8003e96 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003dce:	4b4a      	ldr	r3, [pc, #296]	@ (8003ef8 <HAL_RCC_OscConfig+0x240>)
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	f003 030c 	and.w	r3, r3, #12
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d00b      	beq.n	8003df2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dda:	4b47      	ldr	r3, [pc, #284]	@ (8003ef8 <HAL_RCC_OscConfig+0x240>)
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003de2:	2b08      	cmp	r3, #8
 8003de4:	d11c      	bne.n	8003e20 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003de6:	4b44      	ldr	r3, [pc, #272]	@ (8003ef8 <HAL_RCC_OscConfig+0x240>)
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d116      	bne.n	8003e20 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003df2:	4b41      	ldr	r3, [pc, #260]	@ (8003ef8 <HAL_RCC_OscConfig+0x240>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0302 	and.w	r3, r3, #2
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d005      	beq.n	8003e0a <HAL_RCC_OscConfig+0x152>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d001      	beq.n	8003e0a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e1c7      	b.n	800419a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e0a:	4b3b      	ldr	r3, [pc, #236]	@ (8003ef8 <HAL_RCC_OscConfig+0x240>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	00db      	lsls	r3, r3, #3
 8003e18:	4937      	ldr	r1, [pc, #220]	@ (8003ef8 <HAL_RCC_OscConfig+0x240>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e1e:	e03a      	b.n	8003e96 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d020      	beq.n	8003e6a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e28:	4b34      	ldr	r3, [pc, #208]	@ (8003efc <HAL_RCC_OscConfig+0x244>)
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e2e:	f7fe fb1f 	bl	8002470 <HAL_GetTick>
 8003e32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e34:	e008      	b.n	8003e48 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e36:	f7fe fb1b 	bl	8002470 <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d901      	bls.n	8003e48 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e1a8      	b.n	800419a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e48:	4b2b      	ldr	r3, [pc, #172]	@ (8003ef8 <HAL_RCC_OscConfig+0x240>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0302 	and.w	r3, r3, #2
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d0f0      	beq.n	8003e36 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e54:	4b28      	ldr	r3, [pc, #160]	@ (8003ef8 <HAL_RCC_OscConfig+0x240>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	691b      	ldr	r3, [r3, #16]
 8003e60:	00db      	lsls	r3, r3, #3
 8003e62:	4925      	ldr	r1, [pc, #148]	@ (8003ef8 <HAL_RCC_OscConfig+0x240>)
 8003e64:	4313      	orrs	r3, r2
 8003e66:	600b      	str	r3, [r1, #0]
 8003e68:	e015      	b.n	8003e96 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e6a:	4b24      	ldr	r3, [pc, #144]	@ (8003efc <HAL_RCC_OscConfig+0x244>)
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e70:	f7fe fafe 	bl	8002470 <HAL_GetTick>
 8003e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e76:	e008      	b.n	8003e8a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e78:	f7fe fafa 	bl	8002470 <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d901      	bls.n	8003e8a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e187      	b.n	800419a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e8a:	4b1b      	ldr	r3, [pc, #108]	@ (8003ef8 <HAL_RCC_OscConfig+0x240>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0302 	and.w	r3, r3, #2
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d1f0      	bne.n	8003e78 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0308 	and.w	r3, r3, #8
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d036      	beq.n	8003f10 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	695b      	ldr	r3, [r3, #20]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d016      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003eaa:	4b15      	ldr	r3, [pc, #84]	@ (8003f00 <HAL_RCC_OscConfig+0x248>)
 8003eac:	2201      	movs	r2, #1
 8003eae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eb0:	f7fe fade 	bl	8002470 <HAL_GetTick>
 8003eb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eb6:	e008      	b.n	8003eca <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003eb8:	f7fe fada 	bl	8002470 <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d901      	bls.n	8003eca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e167      	b.n	800419a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eca:	4b0b      	ldr	r3, [pc, #44]	@ (8003ef8 <HAL_RCC_OscConfig+0x240>)
 8003ecc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ece:	f003 0302 	and.w	r3, r3, #2
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d0f0      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x200>
 8003ed6:	e01b      	b.n	8003f10 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ed8:	4b09      	ldr	r3, [pc, #36]	@ (8003f00 <HAL_RCC_OscConfig+0x248>)
 8003eda:	2200      	movs	r2, #0
 8003edc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ede:	f7fe fac7 	bl	8002470 <HAL_GetTick>
 8003ee2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ee4:	e00e      	b.n	8003f04 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ee6:	f7fe fac3 	bl	8002470 <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d907      	bls.n	8003f04 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e150      	b.n	800419a <HAL_RCC_OscConfig+0x4e2>
 8003ef8:	40023800 	.word	0x40023800
 8003efc:	42470000 	.word	0x42470000
 8003f00:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f04:	4b88      	ldr	r3, [pc, #544]	@ (8004128 <HAL_RCC_OscConfig+0x470>)
 8003f06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f08:	f003 0302 	and.w	r3, r3, #2
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d1ea      	bne.n	8003ee6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0304 	and.w	r3, r3, #4
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	f000 8097 	beq.w	800404c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f22:	4b81      	ldr	r3, [pc, #516]	@ (8004128 <HAL_RCC_OscConfig+0x470>)
 8003f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d10f      	bne.n	8003f4e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f2e:	2300      	movs	r3, #0
 8003f30:	60bb      	str	r3, [r7, #8]
 8003f32:	4b7d      	ldr	r3, [pc, #500]	@ (8004128 <HAL_RCC_OscConfig+0x470>)
 8003f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f36:	4a7c      	ldr	r2, [pc, #496]	@ (8004128 <HAL_RCC_OscConfig+0x470>)
 8003f38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f3e:	4b7a      	ldr	r3, [pc, #488]	@ (8004128 <HAL_RCC_OscConfig+0x470>)
 8003f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f46:	60bb      	str	r3, [r7, #8]
 8003f48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f4e:	4b77      	ldr	r3, [pc, #476]	@ (800412c <HAL_RCC_OscConfig+0x474>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d118      	bne.n	8003f8c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f5a:	4b74      	ldr	r3, [pc, #464]	@ (800412c <HAL_RCC_OscConfig+0x474>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a73      	ldr	r2, [pc, #460]	@ (800412c <HAL_RCC_OscConfig+0x474>)
 8003f60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f66:	f7fe fa83 	bl	8002470 <HAL_GetTick>
 8003f6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f6c:	e008      	b.n	8003f80 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f6e:	f7fe fa7f 	bl	8002470 <HAL_GetTick>
 8003f72:	4602      	mov	r2, r0
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d901      	bls.n	8003f80 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	e10c      	b.n	800419a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f80:	4b6a      	ldr	r3, [pc, #424]	@ (800412c <HAL_RCC_OscConfig+0x474>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d0f0      	beq.n	8003f6e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d106      	bne.n	8003fa2 <HAL_RCC_OscConfig+0x2ea>
 8003f94:	4b64      	ldr	r3, [pc, #400]	@ (8004128 <HAL_RCC_OscConfig+0x470>)
 8003f96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f98:	4a63      	ldr	r2, [pc, #396]	@ (8004128 <HAL_RCC_OscConfig+0x470>)
 8003f9a:	f043 0301 	orr.w	r3, r3, #1
 8003f9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fa0:	e01c      	b.n	8003fdc <HAL_RCC_OscConfig+0x324>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	2b05      	cmp	r3, #5
 8003fa8:	d10c      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x30c>
 8003faa:	4b5f      	ldr	r3, [pc, #380]	@ (8004128 <HAL_RCC_OscConfig+0x470>)
 8003fac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fae:	4a5e      	ldr	r2, [pc, #376]	@ (8004128 <HAL_RCC_OscConfig+0x470>)
 8003fb0:	f043 0304 	orr.w	r3, r3, #4
 8003fb4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fb6:	4b5c      	ldr	r3, [pc, #368]	@ (8004128 <HAL_RCC_OscConfig+0x470>)
 8003fb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fba:	4a5b      	ldr	r2, [pc, #364]	@ (8004128 <HAL_RCC_OscConfig+0x470>)
 8003fbc:	f043 0301 	orr.w	r3, r3, #1
 8003fc0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fc2:	e00b      	b.n	8003fdc <HAL_RCC_OscConfig+0x324>
 8003fc4:	4b58      	ldr	r3, [pc, #352]	@ (8004128 <HAL_RCC_OscConfig+0x470>)
 8003fc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fc8:	4a57      	ldr	r2, [pc, #348]	@ (8004128 <HAL_RCC_OscConfig+0x470>)
 8003fca:	f023 0301 	bic.w	r3, r3, #1
 8003fce:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fd0:	4b55      	ldr	r3, [pc, #340]	@ (8004128 <HAL_RCC_OscConfig+0x470>)
 8003fd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fd4:	4a54      	ldr	r2, [pc, #336]	@ (8004128 <HAL_RCC_OscConfig+0x470>)
 8003fd6:	f023 0304 	bic.w	r3, r3, #4
 8003fda:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d015      	beq.n	8004010 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fe4:	f7fe fa44 	bl	8002470 <HAL_GetTick>
 8003fe8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fea:	e00a      	b.n	8004002 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fec:	f7fe fa40 	bl	8002470 <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d901      	bls.n	8004002 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e0cb      	b.n	800419a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004002:	4b49      	ldr	r3, [pc, #292]	@ (8004128 <HAL_RCC_OscConfig+0x470>)
 8004004:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004006:	f003 0302 	and.w	r3, r3, #2
 800400a:	2b00      	cmp	r3, #0
 800400c:	d0ee      	beq.n	8003fec <HAL_RCC_OscConfig+0x334>
 800400e:	e014      	b.n	800403a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004010:	f7fe fa2e 	bl	8002470 <HAL_GetTick>
 8004014:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004016:	e00a      	b.n	800402e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004018:	f7fe fa2a 	bl	8002470 <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004026:	4293      	cmp	r3, r2
 8004028:	d901      	bls.n	800402e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e0b5      	b.n	800419a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800402e:	4b3e      	ldr	r3, [pc, #248]	@ (8004128 <HAL_RCC_OscConfig+0x470>)
 8004030:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004032:	f003 0302 	and.w	r3, r3, #2
 8004036:	2b00      	cmp	r3, #0
 8004038:	d1ee      	bne.n	8004018 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800403a:	7dfb      	ldrb	r3, [r7, #23]
 800403c:	2b01      	cmp	r3, #1
 800403e:	d105      	bne.n	800404c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004040:	4b39      	ldr	r3, [pc, #228]	@ (8004128 <HAL_RCC_OscConfig+0x470>)
 8004042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004044:	4a38      	ldr	r2, [pc, #224]	@ (8004128 <HAL_RCC_OscConfig+0x470>)
 8004046:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800404a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	699b      	ldr	r3, [r3, #24]
 8004050:	2b00      	cmp	r3, #0
 8004052:	f000 80a1 	beq.w	8004198 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004056:	4b34      	ldr	r3, [pc, #208]	@ (8004128 <HAL_RCC_OscConfig+0x470>)
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f003 030c 	and.w	r3, r3, #12
 800405e:	2b08      	cmp	r3, #8
 8004060:	d05c      	beq.n	800411c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	699b      	ldr	r3, [r3, #24]
 8004066:	2b02      	cmp	r3, #2
 8004068:	d141      	bne.n	80040ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800406a:	4b31      	ldr	r3, [pc, #196]	@ (8004130 <HAL_RCC_OscConfig+0x478>)
 800406c:	2200      	movs	r2, #0
 800406e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004070:	f7fe f9fe 	bl	8002470 <HAL_GetTick>
 8004074:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004076:	e008      	b.n	800408a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004078:	f7fe f9fa 	bl	8002470 <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	2b02      	cmp	r3, #2
 8004084:	d901      	bls.n	800408a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	e087      	b.n	800419a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800408a:	4b27      	ldr	r3, [pc, #156]	@ (8004128 <HAL_RCC_OscConfig+0x470>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d1f0      	bne.n	8004078 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	69da      	ldr	r2, [r3, #28]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a1b      	ldr	r3, [r3, #32]
 800409e:	431a      	orrs	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a4:	019b      	lsls	r3, r3, #6
 80040a6:	431a      	orrs	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040ac:	085b      	lsrs	r3, r3, #1
 80040ae:	3b01      	subs	r3, #1
 80040b0:	041b      	lsls	r3, r3, #16
 80040b2:	431a      	orrs	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040b8:	061b      	lsls	r3, r3, #24
 80040ba:	491b      	ldr	r1, [pc, #108]	@ (8004128 <HAL_RCC_OscConfig+0x470>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040c0:	4b1b      	ldr	r3, [pc, #108]	@ (8004130 <HAL_RCC_OscConfig+0x478>)
 80040c2:	2201      	movs	r2, #1
 80040c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040c6:	f7fe f9d3 	bl	8002470 <HAL_GetTick>
 80040ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040cc:	e008      	b.n	80040e0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040ce:	f7fe f9cf 	bl	8002470 <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d901      	bls.n	80040e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e05c      	b.n	800419a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040e0:	4b11      	ldr	r3, [pc, #68]	@ (8004128 <HAL_RCC_OscConfig+0x470>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d0f0      	beq.n	80040ce <HAL_RCC_OscConfig+0x416>
 80040ec:	e054      	b.n	8004198 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040ee:	4b10      	ldr	r3, [pc, #64]	@ (8004130 <HAL_RCC_OscConfig+0x478>)
 80040f0:	2200      	movs	r2, #0
 80040f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040f4:	f7fe f9bc 	bl	8002470 <HAL_GetTick>
 80040f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040fa:	e008      	b.n	800410e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040fc:	f7fe f9b8 	bl	8002470 <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	2b02      	cmp	r3, #2
 8004108:	d901      	bls.n	800410e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e045      	b.n	800419a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800410e:	4b06      	ldr	r3, [pc, #24]	@ (8004128 <HAL_RCC_OscConfig+0x470>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d1f0      	bne.n	80040fc <HAL_RCC_OscConfig+0x444>
 800411a:	e03d      	b.n	8004198 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	699b      	ldr	r3, [r3, #24]
 8004120:	2b01      	cmp	r3, #1
 8004122:	d107      	bne.n	8004134 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e038      	b.n	800419a <HAL_RCC_OscConfig+0x4e2>
 8004128:	40023800 	.word	0x40023800
 800412c:	40007000 	.word	0x40007000
 8004130:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004134:	4b1b      	ldr	r3, [pc, #108]	@ (80041a4 <HAL_RCC_OscConfig+0x4ec>)
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	699b      	ldr	r3, [r3, #24]
 800413e:	2b01      	cmp	r3, #1
 8004140:	d028      	beq.n	8004194 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800414c:	429a      	cmp	r2, r3
 800414e:	d121      	bne.n	8004194 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800415a:	429a      	cmp	r2, r3
 800415c:	d11a      	bne.n	8004194 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800415e:	68fa      	ldr	r2, [r7, #12]
 8004160:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004164:	4013      	ands	r3, r2
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800416a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800416c:	4293      	cmp	r3, r2
 800416e:	d111      	bne.n	8004194 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800417a:	085b      	lsrs	r3, r3, #1
 800417c:	3b01      	subs	r3, #1
 800417e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004180:	429a      	cmp	r2, r3
 8004182:	d107      	bne.n	8004194 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800418e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004190:	429a      	cmp	r2, r3
 8004192:	d001      	beq.n	8004198 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e000      	b.n	800419a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	3718      	adds	r7, #24
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	40023800 	.word	0x40023800

080041a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d101      	bne.n	80041bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e0cc      	b.n	8004356 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041bc:	4b68      	ldr	r3, [pc, #416]	@ (8004360 <HAL_RCC_ClockConfig+0x1b8>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0307 	and.w	r3, r3, #7
 80041c4:	683a      	ldr	r2, [r7, #0]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d90c      	bls.n	80041e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ca:	4b65      	ldr	r3, [pc, #404]	@ (8004360 <HAL_RCC_ClockConfig+0x1b8>)
 80041cc:	683a      	ldr	r2, [r7, #0]
 80041ce:	b2d2      	uxtb	r2, r2
 80041d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041d2:	4b63      	ldr	r3, [pc, #396]	@ (8004360 <HAL_RCC_ClockConfig+0x1b8>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0307 	and.w	r3, r3, #7
 80041da:	683a      	ldr	r2, [r7, #0]
 80041dc:	429a      	cmp	r2, r3
 80041de:	d001      	beq.n	80041e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e0b8      	b.n	8004356 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0302 	and.w	r3, r3, #2
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d020      	beq.n	8004232 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0304 	and.w	r3, r3, #4
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d005      	beq.n	8004208 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041fc:	4b59      	ldr	r3, [pc, #356]	@ (8004364 <HAL_RCC_ClockConfig+0x1bc>)
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	4a58      	ldr	r2, [pc, #352]	@ (8004364 <HAL_RCC_ClockConfig+0x1bc>)
 8004202:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004206:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0308 	and.w	r3, r3, #8
 8004210:	2b00      	cmp	r3, #0
 8004212:	d005      	beq.n	8004220 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004214:	4b53      	ldr	r3, [pc, #332]	@ (8004364 <HAL_RCC_ClockConfig+0x1bc>)
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	4a52      	ldr	r2, [pc, #328]	@ (8004364 <HAL_RCC_ClockConfig+0x1bc>)
 800421a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800421e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004220:	4b50      	ldr	r3, [pc, #320]	@ (8004364 <HAL_RCC_ClockConfig+0x1bc>)
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	494d      	ldr	r1, [pc, #308]	@ (8004364 <HAL_RCC_ClockConfig+0x1bc>)
 800422e:	4313      	orrs	r3, r2
 8004230:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0301 	and.w	r3, r3, #1
 800423a:	2b00      	cmp	r3, #0
 800423c:	d044      	beq.n	80042c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	2b01      	cmp	r3, #1
 8004244:	d107      	bne.n	8004256 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004246:	4b47      	ldr	r3, [pc, #284]	@ (8004364 <HAL_RCC_ClockConfig+0x1bc>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d119      	bne.n	8004286 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e07f      	b.n	8004356 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	2b02      	cmp	r3, #2
 800425c:	d003      	beq.n	8004266 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004262:	2b03      	cmp	r3, #3
 8004264:	d107      	bne.n	8004276 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004266:	4b3f      	ldr	r3, [pc, #252]	@ (8004364 <HAL_RCC_ClockConfig+0x1bc>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d109      	bne.n	8004286 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e06f      	b.n	8004356 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004276:	4b3b      	ldr	r3, [pc, #236]	@ (8004364 <HAL_RCC_ClockConfig+0x1bc>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0302 	and.w	r3, r3, #2
 800427e:	2b00      	cmp	r3, #0
 8004280:	d101      	bne.n	8004286 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e067      	b.n	8004356 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004286:	4b37      	ldr	r3, [pc, #220]	@ (8004364 <HAL_RCC_ClockConfig+0x1bc>)
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	f023 0203 	bic.w	r2, r3, #3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	4934      	ldr	r1, [pc, #208]	@ (8004364 <HAL_RCC_ClockConfig+0x1bc>)
 8004294:	4313      	orrs	r3, r2
 8004296:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004298:	f7fe f8ea 	bl	8002470 <HAL_GetTick>
 800429c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800429e:	e00a      	b.n	80042b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042a0:	f7fe f8e6 	bl	8002470 <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d901      	bls.n	80042b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e04f      	b.n	8004356 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042b6:	4b2b      	ldr	r3, [pc, #172]	@ (8004364 <HAL_RCC_ClockConfig+0x1bc>)
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	f003 020c 	and.w	r2, r3, #12
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d1eb      	bne.n	80042a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042c8:	4b25      	ldr	r3, [pc, #148]	@ (8004360 <HAL_RCC_ClockConfig+0x1b8>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0307 	and.w	r3, r3, #7
 80042d0:	683a      	ldr	r2, [r7, #0]
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d20c      	bcs.n	80042f0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042d6:	4b22      	ldr	r3, [pc, #136]	@ (8004360 <HAL_RCC_ClockConfig+0x1b8>)
 80042d8:	683a      	ldr	r2, [r7, #0]
 80042da:	b2d2      	uxtb	r2, r2
 80042dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042de:	4b20      	ldr	r3, [pc, #128]	@ (8004360 <HAL_RCC_ClockConfig+0x1b8>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0307 	and.w	r3, r3, #7
 80042e6:	683a      	ldr	r2, [r7, #0]
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d001      	beq.n	80042f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e032      	b.n	8004356 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0304 	and.w	r3, r3, #4
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d008      	beq.n	800430e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042fc:	4b19      	ldr	r3, [pc, #100]	@ (8004364 <HAL_RCC_ClockConfig+0x1bc>)
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	4916      	ldr	r1, [pc, #88]	@ (8004364 <HAL_RCC_ClockConfig+0x1bc>)
 800430a:	4313      	orrs	r3, r2
 800430c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0308 	and.w	r3, r3, #8
 8004316:	2b00      	cmp	r3, #0
 8004318:	d009      	beq.n	800432e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800431a:	4b12      	ldr	r3, [pc, #72]	@ (8004364 <HAL_RCC_ClockConfig+0x1bc>)
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	00db      	lsls	r3, r3, #3
 8004328:	490e      	ldr	r1, [pc, #56]	@ (8004364 <HAL_RCC_ClockConfig+0x1bc>)
 800432a:	4313      	orrs	r3, r2
 800432c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800432e:	f000 f821 	bl	8004374 <HAL_RCC_GetSysClockFreq>
 8004332:	4602      	mov	r2, r0
 8004334:	4b0b      	ldr	r3, [pc, #44]	@ (8004364 <HAL_RCC_ClockConfig+0x1bc>)
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	091b      	lsrs	r3, r3, #4
 800433a:	f003 030f 	and.w	r3, r3, #15
 800433e:	490a      	ldr	r1, [pc, #40]	@ (8004368 <HAL_RCC_ClockConfig+0x1c0>)
 8004340:	5ccb      	ldrb	r3, [r1, r3]
 8004342:	fa22 f303 	lsr.w	r3, r2, r3
 8004346:	4a09      	ldr	r2, [pc, #36]	@ (800436c <HAL_RCC_ClockConfig+0x1c4>)
 8004348:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800434a:	4b09      	ldr	r3, [pc, #36]	@ (8004370 <HAL_RCC_ClockConfig+0x1c8>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4618      	mov	r0, r3
 8004350:	f7fe f84a 	bl	80023e8 <HAL_InitTick>

  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3710      	adds	r7, #16
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	40023c00 	.word	0x40023c00
 8004364:	40023800 	.word	0x40023800
 8004368:	08008c40 	.word	0x08008c40
 800436c:	20000004 	.word	0x20000004
 8004370:	20000008 	.word	0x20000008

08004374 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004374:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004378:	b094      	sub	sp, #80	@ 0x50
 800437a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800437c:	2300      	movs	r3, #0
 800437e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004380:	2300      	movs	r3, #0
 8004382:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004384:	2300      	movs	r3, #0
 8004386:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004388:	2300      	movs	r3, #0
 800438a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800438c:	4b79      	ldr	r3, [pc, #484]	@ (8004574 <HAL_RCC_GetSysClockFreq+0x200>)
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	f003 030c 	and.w	r3, r3, #12
 8004394:	2b08      	cmp	r3, #8
 8004396:	d00d      	beq.n	80043b4 <HAL_RCC_GetSysClockFreq+0x40>
 8004398:	2b08      	cmp	r3, #8
 800439a:	f200 80e1 	bhi.w	8004560 <HAL_RCC_GetSysClockFreq+0x1ec>
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d002      	beq.n	80043a8 <HAL_RCC_GetSysClockFreq+0x34>
 80043a2:	2b04      	cmp	r3, #4
 80043a4:	d003      	beq.n	80043ae <HAL_RCC_GetSysClockFreq+0x3a>
 80043a6:	e0db      	b.n	8004560 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043a8:	4b73      	ldr	r3, [pc, #460]	@ (8004578 <HAL_RCC_GetSysClockFreq+0x204>)
 80043aa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80043ac:	e0db      	b.n	8004566 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043ae:	4b73      	ldr	r3, [pc, #460]	@ (800457c <HAL_RCC_GetSysClockFreq+0x208>)
 80043b0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80043b2:	e0d8      	b.n	8004566 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043b4:	4b6f      	ldr	r3, [pc, #444]	@ (8004574 <HAL_RCC_GetSysClockFreq+0x200>)
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80043bc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043be:	4b6d      	ldr	r3, [pc, #436]	@ (8004574 <HAL_RCC_GetSysClockFreq+0x200>)
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d063      	beq.n	8004492 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043ca:	4b6a      	ldr	r3, [pc, #424]	@ (8004574 <HAL_RCC_GetSysClockFreq+0x200>)
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	099b      	lsrs	r3, r3, #6
 80043d0:	2200      	movs	r2, #0
 80043d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80043d4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80043d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80043de:	2300      	movs	r3, #0
 80043e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80043e2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80043e6:	4622      	mov	r2, r4
 80043e8:	462b      	mov	r3, r5
 80043ea:	f04f 0000 	mov.w	r0, #0
 80043ee:	f04f 0100 	mov.w	r1, #0
 80043f2:	0159      	lsls	r1, r3, #5
 80043f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043f8:	0150      	lsls	r0, r2, #5
 80043fa:	4602      	mov	r2, r0
 80043fc:	460b      	mov	r3, r1
 80043fe:	4621      	mov	r1, r4
 8004400:	1a51      	subs	r1, r2, r1
 8004402:	6139      	str	r1, [r7, #16]
 8004404:	4629      	mov	r1, r5
 8004406:	eb63 0301 	sbc.w	r3, r3, r1
 800440a:	617b      	str	r3, [r7, #20]
 800440c:	f04f 0200 	mov.w	r2, #0
 8004410:	f04f 0300 	mov.w	r3, #0
 8004414:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004418:	4659      	mov	r1, fp
 800441a:	018b      	lsls	r3, r1, #6
 800441c:	4651      	mov	r1, sl
 800441e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004422:	4651      	mov	r1, sl
 8004424:	018a      	lsls	r2, r1, #6
 8004426:	4651      	mov	r1, sl
 8004428:	ebb2 0801 	subs.w	r8, r2, r1
 800442c:	4659      	mov	r1, fp
 800442e:	eb63 0901 	sbc.w	r9, r3, r1
 8004432:	f04f 0200 	mov.w	r2, #0
 8004436:	f04f 0300 	mov.w	r3, #0
 800443a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800443e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004442:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004446:	4690      	mov	r8, r2
 8004448:	4699      	mov	r9, r3
 800444a:	4623      	mov	r3, r4
 800444c:	eb18 0303 	adds.w	r3, r8, r3
 8004450:	60bb      	str	r3, [r7, #8]
 8004452:	462b      	mov	r3, r5
 8004454:	eb49 0303 	adc.w	r3, r9, r3
 8004458:	60fb      	str	r3, [r7, #12]
 800445a:	f04f 0200 	mov.w	r2, #0
 800445e:	f04f 0300 	mov.w	r3, #0
 8004462:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004466:	4629      	mov	r1, r5
 8004468:	024b      	lsls	r3, r1, #9
 800446a:	4621      	mov	r1, r4
 800446c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004470:	4621      	mov	r1, r4
 8004472:	024a      	lsls	r2, r1, #9
 8004474:	4610      	mov	r0, r2
 8004476:	4619      	mov	r1, r3
 8004478:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800447a:	2200      	movs	r2, #0
 800447c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800447e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004480:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004484:	f7fc fc08 	bl	8000c98 <__aeabi_uldivmod>
 8004488:	4602      	mov	r2, r0
 800448a:	460b      	mov	r3, r1
 800448c:	4613      	mov	r3, r2
 800448e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004490:	e058      	b.n	8004544 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004492:	4b38      	ldr	r3, [pc, #224]	@ (8004574 <HAL_RCC_GetSysClockFreq+0x200>)
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	099b      	lsrs	r3, r3, #6
 8004498:	2200      	movs	r2, #0
 800449a:	4618      	mov	r0, r3
 800449c:	4611      	mov	r1, r2
 800449e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80044a2:	623b      	str	r3, [r7, #32]
 80044a4:	2300      	movs	r3, #0
 80044a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80044a8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80044ac:	4642      	mov	r2, r8
 80044ae:	464b      	mov	r3, r9
 80044b0:	f04f 0000 	mov.w	r0, #0
 80044b4:	f04f 0100 	mov.w	r1, #0
 80044b8:	0159      	lsls	r1, r3, #5
 80044ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044be:	0150      	lsls	r0, r2, #5
 80044c0:	4602      	mov	r2, r0
 80044c2:	460b      	mov	r3, r1
 80044c4:	4641      	mov	r1, r8
 80044c6:	ebb2 0a01 	subs.w	sl, r2, r1
 80044ca:	4649      	mov	r1, r9
 80044cc:	eb63 0b01 	sbc.w	fp, r3, r1
 80044d0:	f04f 0200 	mov.w	r2, #0
 80044d4:	f04f 0300 	mov.w	r3, #0
 80044d8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80044dc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80044e0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80044e4:	ebb2 040a 	subs.w	r4, r2, sl
 80044e8:	eb63 050b 	sbc.w	r5, r3, fp
 80044ec:	f04f 0200 	mov.w	r2, #0
 80044f0:	f04f 0300 	mov.w	r3, #0
 80044f4:	00eb      	lsls	r3, r5, #3
 80044f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044fa:	00e2      	lsls	r2, r4, #3
 80044fc:	4614      	mov	r4, r2
 80044fe:	461d      	mov	r5, r3
 8004500:	4643      	mov	r3, r8
 8004502:	18e3      	adds	r3, r4, r3
 8004504:	603b      	str	r3, [r7, #0]
 8004506:	464b      	mov	r3, r9
 8004508:	eb45 0303 	adc.w	r3, r5, r3
 800450c:	607b      	str	r3, [r7, #4]
 800450e:	f04f 0200 	mov.w	r2, #0
 8004512:	f04f 0300 	mov.w	r3, #0
 8004516:	e9d7 4500 	ldrd	r4, r5, [r7]
 800451a:	4629      	mov	r1, r5
 800451c:	028b      	lsls	r3, r1, #10
 800451e:	4621      	mov	r1, r4
 8004520:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004524:	4621      	mov	r1, r4
 8004526:	028a      	lsls	r2, r1, #10
 8004528:	4610      	mov	r0, r2
 800452a:	4619      	mov	r1, r3
 800452c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800452e:	2200      	movs	r2, #0
 8004530:	61bb      	str	r3, [r7, #24]
 8004532:	61fa      	str	r2, [r7, #28]
 8004534:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004538:	f7fc fbae 	bl	8000c98 <__aeabi_uldivmod>
 800453c:	4602      	mov	r2, r0
 800453e:	460b      	mov	r3, r1
 8004540:	4613      	mov	r3, r2
 8004542:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004544:	4b0b      	ldr	r3, [pc, #44]	@ (8004574 <HAL_RCC_GetSysClockFreq+0x200>)
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	0c1b      	lsrs	r3, r3, #16
 800454a:	f003 0303 	and.w	r3, r3, #3
 800454e:	3301      	adds	r3, #1
 8004550:	005b      	lsls	r3, r3, #1
 8004552:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004554:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004556:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004558:	fbb2 f3f3 	udiv	r3, r2, r3
 800455c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800455e:	e002      	b.n	8004566 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004560:	4b05      	ldr	r3, [pc, #20]	@ (8004578 <HAL_RCC_GetSysClockFreq+0x204>)
 8004562:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004564:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004566:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004568:	4618      	mov	r0, r3
 800456a:	3750      	adds	r7, #80	@ 0x50
 800456c:	46bd      	mov	sp, r7
 800456e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004572:	bf00      	nop
 8004574:	40023800 	.word	0x40023800
 8004578:	00f42400 	.word	0x00f42400
 800457c:	007a1200 	.word	0x007a1200

08004580 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004580:	b480      	push	{r7}
 8004582:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004584:	4b03      	ldr	r3, [pc, #12]	@ (8004594 <HAL_RCC_GetHCLKFreq+0x14>)
 8004586:	681b      	ldr	r3, [r3, #0]
}
 8004588:	4618      	mov	r0, r3
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr
 8004592:	bf00      	nop
 8004594:	20000004 	.word	0x20000004

08004598 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800459c:	f7ff fff0 	bl	8004580 <HAL_RCC_GetHCLKFreq>
 80045a0:	4602      	mov	r2, r0
 80045a2:	4b05      	ldr	r3, [pc, #20]	@ (80045b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	0a9b      	lsrs	r3, r3, #10
 80045a8:	f003 0307 	and.w	r3, r3, #7
 80045ac:	4903      	ldr	r1, [pc, #12]	@ (80045bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80045ae:	5ccb      	ldrb	r3, [r1, r3]
 80045b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	40023800 	.word	0x40023800
 80045bc:	08008c50 	.word	0x08008c50

080045c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80045c4:	f7ff ffdc 	bl	8004580 <HAL_RCC_GetHCLKFreq>
 80045c8:	4602      	mov	r2, r0
 80045ca:	4b05      	ldr	r3, [pc, #20]	@ (80045e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	0b5b      	lsrs	r3, r3, #13
 80045d0:	f003 0307 	and.w	r3, r3, #7
 80045d4:	4903      	ldr	r1, [pc, #12]	@ (80045e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045d6:	5ccb      	ldrb	r3, [r1, r3]
 80045d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045dc:	4618      	mov	r0, r3
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	40023800 	.word	0x40023800
 80045e4:	08008c50 	.word	0x08008c50

080045e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d101      	bne.n	80045fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e041      	b.n	800467e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004600:	b2db      	uxtb	r3, r3
 8004602:	2b00      	cmp	r3, #0
 8004604:	d106      	bne.n	8004614 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f7fd fd88 	bl	8002124 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2202      	movs	r2, #2
 8004618:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	3304      	adds	r3, #4
 8004624:	4619      	mov	r1, r3
 8004626:	4610      	mov	r0, r2
 8004628:	f000 fbf4 	bl	8004e14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3708      	adds	r7, #8
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}

08004686 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004686:	b580      	push	{r7, lr}
 8004688:	b082      	sub	sp, #8
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d101      	bne.n	8004698 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e041      	b.n	800471c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d106      	bne.n	80046b2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f000 f839 	bl	8004724 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2202      	movs	r2, #2
 80046b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	3304      	adds	r3, #4
 80046c2:	4619      	mov	r1, r3
 80046c4:	4610      	mov	r0, r2
 80046c6:	f000 fba5 	bl	8004e14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2201      	movs	r2, #1
 80046ce:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2201      	movs	r2, #1
 80046d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2201      	movs	r2, #1
 80046de:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2201      	movs	r2, #1
 80046e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2201      	movs	r2, #1
 80046ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2201      	movs	r2, #1
 80046f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2201      	movs	r2, #1
 80046fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2201      	movs	r2, #1
 8004706:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2201      	movs	r2, #1
 800470e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2201      	movs	r2, #1
 8004716:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800471a:	2300      	movs	r3, #0
}
 800471c:	4618      	mov	r0, r3
 800471e:	3708      	adds	r7, #8
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800472c:	bf00      	nop
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d109      	bne.n	800475c <HAL_TIM_PWM_Start+0x24>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800474e:	b2db      	uxtb	r3, r3
 8004750:	2b01      	cmp	r3, #1
 8004752:	bf14      	ite	ne
 8004754:	2301      	movne	r3, #1
 8004756:	2300      	moveq	r3, #0
 8004758:	b2db      	uxtb	r3, r3
 800475a:	e022      	b.n	80047a2 <HAL_TIM_PWM_Start+0x6a>
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	2b04      	cmp	r3, #4
 8004760:	d109      	bne.n	8004776 <HAL_TIM_PWM_Start+0x3e>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004768:	b2db      	uxtb	r3, r3
 800476a:	2b01      	cmp	r3, #1
 800476c:	bf14      	ite	ne
 800476e:	2301      	movne	r3, #1
 8004770:	2300      	moveq	r3, #0
 8004772:	b2db      	uxtb	r3, r3
 8004774:	e015      	b.n	80047a2 <HAL_TIM_PWM_Start+0x6a>
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	2b08      	cmp	r3, #8
 800477a:	d109      	bne.n	8004790 <HAL_TIM_PWM_Start+0x58>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004782:	b2db      	uxtb	r3, r3
 8004784:	2b01      	cmp	r3, #1
 8004786:	bf14      	ite	ne
 8004788:	2301      	movne	r3, #1
 800478a:	2300      	moveq	r3, #0
 800478c:	b2db      	uxtb	r3, r3
 800478e:	e008      	b.n	80047a2 <HAL_TIM_PWM_Start+0x6a>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004796:	b2db      	uxtb	r3, r3
 8004798:	2b01      	cmp	r3, #1
 800479a:	bf14      	ite	ne
 800479c:	2301      	movne	r3, #1
 800479e:	2300      	moveq	r3, #0
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d001      	beq.n	80047aa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e068      	b.n	800487c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d104      	bne.n	80047ba <HAL_TIM_PWM_Start+0x82>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2202      	movs	r2, #2
 80047b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80047b8:	e013      	b.n	80047e2 <HAL_TIM_PWM_Start+0xaa>
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	2b04      	cmp	r3, #4
 80047be:	d104      	bne.n	80047ca <HAL_TIM_PWM_Start+0x92>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2202      	movs	r2, #2
 80047c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80047c8:	e00b      	b.n	80047e2 <HAL_TIM_PWM_Start+0xaa>
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	2b08      	cmp	r3, #8
 80047ce:	d104      	bne.n	80047da <HAL_TIM_PWM_Start+0xa2>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2202      	movs	r2, #2
 80047d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80047d8:	e003      	b.n	80047e2 <HAL_TIM_PWM_Start+0xaa>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2202      	movs	r2, #2
 80047de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	2201      	movs	r2, #1
 80047e8:	6839      	ldr	r1, [r7, #0]
 80047ea:	4618      	mov	r0, r3
 80047ec:	f000 fdc4 	bl	8005378 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a23      	ldr	r2, [pc, #140]	@ (8004884 <HAL_TIM_PWM_Start+0x14c>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d107      	bne.n	800480a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004808:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a1d      	ldr	r2, [pc, #116]	@ (8004884 <HAL_TIM_PWM_Start+0x14c>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d018      	beq.n	8004846 <HAL_TIM_PWM_Start+0x10e>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800481c:	d013      	beq.n	8004846 <HAL_TIM_PWM_Start+0x10e>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a19      	ldr	r2, [pc, #100]	@ (8004888 <HAL_TIM_PWM_Start+0x150>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d00e      	beq.n	8004846 <HAL_TIM_PWM_Start+0x10e>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a17      	ldr	r2, [pc, #92]	@ (800488c <HAL_TIM_PWM_Start+0x154>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d009      	beq.n	8004846 <HAL_TIM_PWM_Start+0x10e>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a16      	ldr	r2, [pc, #88]	@ (8004890 <HAL_TIM_PWM_Start+0x158>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d004      	beq.n	8004846 <HAL_TIM_PWM_Start+0x10e>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a14      	ldr	r2, [pc, #80]	@ (8004894 <HAL_TIM_PWM_Start+0x15c>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d111      	bne.n	800486a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	f003 0307 	and.w	r3, r3, #7
 8004850:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2b06      	cmp	r3, #6
 8004856:	d010      	beq.n	800487a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f042 0201 	orr.w	r2, r2, #1
 8004866:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004868:	e007      	b.n	800487a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f042 0201 	orr.w	r2, r2, #1
 8004878:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800487a:	2300      	movs	r3, #0
}
 800487c:	4618      	mov	r0, r3
 800487e:	3710      	adds	r7, #16
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}
 8004884:	40010000 	.word	0x40010000
 8004888:	40000400 	.word	0x40000400
 800488c:	40000800 	.word	0x40000800
 8004890:	40000c00 	.word	0x40000c00
 8004894:	40014000 	.word	0x40014000

08004898 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b086      	sub	sp, #24
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d101      	bne.n	80048ac <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e097      	b.n	80049dc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d106      	bne.n	80048c6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f7fd fc51 	bl	8002168 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2202      	movs	r2, #2
 80048ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	6812      	ldr	r2, [r2, #0]
 80048d8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80048dc:	f023 0307 	bic.w	r3, r3, #7
 80048e0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	3304      	adds	r3, #4
 80048ea:	4619      	mov	r1, r3
 80048ec:	4610      	mov	r0, r2
 80048ee:	f000 fa91 	bl	8004e14 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	699b      	ldr	r3, [r3, #24]
 8004900:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	6a1b      	ldr	r3, [r3, #32]
 8004908:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	697a      	ldr	r2, [r7, #20]
 8004910:	4313      	orrs	r3, r2
 8004912:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800491a:	f023 0303 	bic.w	r3, r3, #3
 800491e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	689a      	ldr	r2, [r3, #8]
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	699b      	ldr	r3, [r3, #24]
 8004928:	021b      	lsls	r3, r3, #8
 800492a:	4313      	orrs	r3, r2
 800492c:	693a      	ldr	r2, [r7, #16]
 800492e:	4313      	orrs	r3, r2
 8004930:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004938:	f023 030c 	bic.w	r3, r3, #12
 800493c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004944:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004948:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	68da      	ldr	r2, [r3, #12]
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	69db      	ldr	r3, [r3, #28]
 8004952:	021b      	lsls	r3, r3, #8
 8004954:	4313      	orrs	r3, r2
 8004956:	693a      	ldr	r2, [r7, #16]
 8004958:	4313      	orrs	r3, r2
 800495a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	691b      	ldr	r3, [r3, #16]
 8004960:	011a      	lsls	r2, r3, #4
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	6a1b      	ldr	r3, [r3, #32]
 8004966:	031b      	lsls	r3, r3, #12
 8004968:	4313      	orrs	r3, r2
 800496a:	693a      	ldr	r2, [r7, #16]
 800496c:	4313      	orrs	r3, r2
 800496e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004976:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800497e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	685a      	ldr	r2, [r3, #4]
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	695b      	ldr	r3, [r3, #20]
 8004988:	011b      	lsls	r3, r3, #4
 800498a:	4313      	orrs	r3, r2
 800498c:	68fa      	ldr	r2, [r7, #12]
 800498e:	4313      	orrs	r3, r2
 8004990:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	697a      	ldr	r2, [r7, #20]
 8004998:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	693a      	ldr	r2, [r7, #16]
 80049a0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2201      	movs	r2, #1
 80049ae:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2201      	movs	r2, #1
 80049b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2201      	movs	r2, #1
 80049be:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2201      	movs	r2, #1
 80049c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2201      	movs	r2, #1
 80049ce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2201      	movs	r2, #1
 80049d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80049da:	2300      	movs	r3, #0
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3718      	adds	r7, #24
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}

080049e4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b084      	sub	sp, #16
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80049f4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80049fc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004a04:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004a0c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d110      	bne.n	8004a36 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a14:	7bfb      	ldrb	r3, [r7, #15]
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d102      	bne.n	8004a20 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004a1a:	7b7b      	ldrb	r3, [r7, #13]
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d001      	beq.n	8004a24 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e069      	b.n	8004af8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2202      	movs	r2, #2
 8004a28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2202      	movs	r2, #2
 8004a30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a34:	e031      	b.n	8004a9a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	2b04      	cmp	r3, #4
 8004a3a:	d110      	bne.n	8004a5e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a3c:	7bbb      	ldrb	r3, [r7, #14]
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d102      	bne.n	8004a48 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004a42:	7b3b      	ldrb	r3, [r7, #12]
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d001      	beq.n	8004a4c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e055      	b.n	8004af8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2202      	movs	r2, #2
 8004a50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2202      	movs	r2, #2
 8004a58:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004a5c:	e01d      	b.n	8004a9a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a5e:	7bfb      	ldrb	r3, [r7, #15]
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d108      	bne.n	8004a76 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a64:	7bbb      	ldrb	r3, [r7, #14]
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d105      	bne.n	8004a76 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a6a:	7b7b      	ldrb	r3, [r7, #13]
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d102      	bne.n	8004a76 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004a70:	7b3b      	ldrb	r3, [r7, #12]
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d001      	beq.n	8004a7a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e03e      	b.n	8004af8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2202      	movs	r2, #2
 8004a7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2202      	movs	r2, #2
 8004a86:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2202      	movs	r2, #2
 8004a8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2202      	movs	r2, #2
 8004a96:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d003      	beq.n	8004aa8 <HAL_TIM_Encoder_Start+0xc4>
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	2b04      	cmp	r3, #4
 8004aa4:	d008      	beq.n	8004ab8 <HAL_TIM_Encoder_Start+0xd4>
 8004aa6:	e00f      	b.n	8004ac8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2201      	movs	r2, #1
 8004aae:	2100      	movs	r1, #0
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f000 fc61 	bl	8005378 <TIM_CCxChannelCmd>
      break;
 8004ab6:	e016      	b.n	8004ae6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	2201      	movs	r2, #1
 8004abe:	2104      	movs	r1, #4
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f000 fc59 	bl	8005378 <TIM_CCxChannelCmd>
      break;
 8004ac6:	e00e      	b.n	8004ae6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2201      	movs	r2, #1
 8004ace:	2100      	movs	r1, #0
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f000 fc51 	bl	8005378 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	2201      	movs	r2, #1
 8004adc:	2104      	movs	r1, #4
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f000 fc4a 	bl	8005378 <TIM_CCxChannelCmd>
      break;
 8004ae4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f042 0201 	orr.w	r2, r2, #1
 8004af4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004af6:	2300      	movs	r3, #0
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3710      	adds	r7, #16
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b086      	sub	sp, #24
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	60b9      	str	r1, [r7, #8]
 8004b0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d101      	bne.n	8004b1e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004b1a:	2302      	movs	r3, #2
 8004b1c:	e0ae      	b.n	8004c7c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2201      	movs	r2, #1
 8004b22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2b0c      	cmp	r3, #12
 8004b2a:	f200 809f 	bhi.w	8004c6c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004b2e:	a201      	add	r2, pc, #4	@ (adr r2, 8004b34 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b34:	08004b69 	.word	0x08004b69
 8004b38:	08004c6d 	.word	0x08004c6d
 8004b3c:	08004c6d 	.word	0x08004c6d
 8004b40:	08004c6d 	.word	0x08004c6d
 8004b44:	08004ba9 	.word	0x08004ba9
 8004b48:	08004c6d 	.word	0x08004c6d
 8004b4c:	08004c6d 	.word	0x08004c6d
 8004b50:	08004c6d 	.word	0x08004c6d
 8004b54:	08004beb 	.word	0x08004beb
 8004b58:	08004c6d 	.word	0x08004c6d
 8004b5c:	08004c6d 	.word	0x08004c6d
 8004b60:	08004c6d 	.word	0x08004c6d
 8004b64:	08004c2b 	.word	0x08004c2b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68b9      	ldr	r1, [r7, #8]
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f000 f9dc 	bl	8004f2c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	699a      	ldr	r2, [r3, #24]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f042 0208 	orr.w	r2, r2, #8
 8004b82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	699a      	ldr	r2, [r3, #24]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f022 0204 	bic.w	r2, r2, #4
 8004b92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	6999      	ldr	r1, [r3, #24]
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	691a      	ldr	r2, [r3, #16]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	430a      	orrs	r2, r1
 8004ba4:	619a      	str	r2, [r3, #24]
      break;
 8004ba6:	e064      	b.n	8004c72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68b9      	ldr	r1, [r7, #8]
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f000 fa22 	bl	8004ff8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	699a      	ldr	r2, [r3, #24]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004bc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	699a      	ldr	r2, [r3, #24]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	6999      	ldr	r1, [r3, #24]
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	021a      	lsls	r2, r3, #8
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	430a      	orrs	r2, r1
 8004be6:	619a      	str	r2, [r3, #24]
      break;
 8004be8:	e043      	b.n	8004c72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	68b9      	ldr	r1, [r7, #8]
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f000 fa6d 	bl	80050d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	69da      	ldr	r2, [r3, #28]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f042 0208 	orr.w	r2, r2, #8
 8004c04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	69da      	ldr	r2, [r3, #28]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f022 0204 	bic.w	r2, r2, #4
 8004c14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	69d9      	ldr	r1, [r3, #28]
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	691a      	ldr	r2, [r3, #16]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	430a      	orrs	r2, r1
 8004c26:	61da      	str	r2, [r3, #28]
      break;
 8004c28:	e023      	b.n	8004c72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	68b9      	ldr	r1, [r7, #8]
 8004c30:	4618      	mov	r0, r3
 8004c32:	f000 fab7 	bl	80051a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	69da      	ldr	r2, [r3, #28]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	69da      	ldr	r2, [r3, #28]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	69d9      	ldr	r1, [r3, #28]
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	691b      	ldr	r3, [r3, #16]
 8004c60:	021a      	lsls	r2, r3, #8
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	430a      	orrs	r2, r1
 8004c68:	61da      	str	r2, [r3, #28]
      break;
 8004c6a:	e002      	b.n	8004c72 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	75fb      	strb	r3, [r7, #23]
      break;
 8004c70:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2200      	movs	r2, #0
 8004c76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3718      	adds	r7, #24
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b084      	sub	sp, #16
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d101      	bne.n	8004ca0 <HAL_TIM_ConfigClockSource+0x1c>
 8004c9c:	2302      	movs	r3, #2
 8004c9e:	e0b4      	b.n	8004e0a <HAL_TIM_ConfigClockSource+0x186>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2202      	movs	r2, #2
 8004cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004cbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004cc6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	68ba      	ldr	r2, [r7, #8]
 8004cce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cd8:	d03e      	beq.n	8004d58 <HAL_TIM_ConfigClockSource+0xd4>
 8004cda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cde:	f200 8087 	bhi.w	8004df0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ce2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ce6:	f000 8086 	beq.w	8004df6 <HAL_TIM_ConfigClockSource+0x172>
 8004cea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cee:	d87f      	bhi.n	8004df0 <HAL_TIM_ConfigClockSource+0x16c>
 8004cf0:	2b70      	cmp	r3, #112	@ 0x70
 8004cf2:	d01a      	beq.n	8004d2a <HAL_TIM_ConfigClockSource+0xa6>
 8004cf4:	2b70      	cmp	r3, #112	@ 0x70
 8004cf6:	d87b      	bhi.n	8004df0 <HAL_TIM_ConfigClockSource+0x16c>
 8004cf8:	2b60      	cmp	r3, #96	@ 0x60
 8004cfa:	d050      	beq.n	8004d9e <HAL_TIM_ConfigClockSource+0x11a>
 8004cfc:	2b60      	cmp	r3, #96	@ 0x60
 8004cfe:	d877      	bhi.n	8004df0 <HAL_TIM_ConfigClockSource+0x16c>
 8004d00:	2b50      	cmp	r3, #80	@ 0x50
 8004d02:	d03c      	beq.n	8004d7e <HAL_TIM_ConfigClockSource+0xfa>
 8004d04:	2b50      	cmp	r3, #80	@ 0x50
 8004d06:	d873      	bhi.n	8004df0 <HAL_TIM_ConfigClockSource+0x16c>
 8004d08:	2b40      	cmp	r3, #64	@ 0x40
 8004d0a:	d058      	beq.n	8004dbe <HAL_TIM_ConfigClockSource+0x13a>
 8004d0c:	2b40      	cmp	r3, #64	@ 0x40
 8004d0e:	d86f      	bhi.n	8004df0 <HAL_TIM_ConfigClockSource+0x16c>
 8004d10:	2b30      	cmp	r3, #48	@ 0x30
 8004d12:	d064      	beq.n	8004dde <HAL_TIM_ConfigClockSource+0x15a>
 8004d14:	2b30      	cmp	r3, #48	@ 0x30
 8004d16:	d86b      	bhi.n	8004df0 <HAL_TIM_ConfigClockSource+0x16c>
 8004d18:	2b20      	cmp	r3, #32
 8004d1a:	d060      	beq.n	8004dde <HAL_TIM_ConfigClockSource+0x15a>
 8004d1c:	2b20      	cmp	r3, #32
 8004d1e:	d867      	bhi.n	8004df0 <HAL_TIM_ConfigClockSource+0x16c>
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d05c      	beq.n	8004dde <HAL_TIM_ConfigClockSource+0x15a>
 8004d24:	2b10      	cmp	r3, #16
 8004d26:	d05a      	beq.n	8004dde <HAL_TIM_ConfigClockSource+0x15a>
 8004d28:	e062      	b.n	8004df0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d3a:	f000 fafd 	bl	8005338 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004d4c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	68ba      	ldr	r2, [r7, #8]
 8004d54:	609a      	str	r2, [r3, #8]
      break;
 8004d56:	e04f      	b.n	8004df8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d68:	f000 fae6 	bl	8005338 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	689a      	ldr	r2, [r3, #8]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d7a:	609a      	str	r2, [r3, #8]
      break;
 8004d7c:	e03c      	b.n	8004df8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	f000 fa5a 	bl	8005244 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	2150      	movs	r1, #80	@ 0x50
 8004d96:	4618      	mov	r0, r3
 8004d98:	f000 fab3 	bl	8005302 <TIM_ITRx_SetConfig>
      break;
 8004d9c:	e02c      	b.n	8004df8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004daa:	461a      	mov	r2, r3
 8004dac:	f000 fa79 	bl	80052a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	2160      	movs	r1, #96	@ 0x60
 8004db6:	4618      	mov	r0, r3
 8004db8:	f000 faa3 	bl	8005302 <TIM_ITRx_SetConfig>
      break;
 8004dbc:	e01c      	b.n	8004df8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dca:	461a      	mov	r2, r3
 8004dcc:	f000 fa3a 	bl	8005244 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	2140      	movs	r1, #64	@ 0x40
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f000 fa93 	bl	8005302 <TIM_ITRx_SetConfig>
      break;
 8004ddc:	e00c      	b.n	8004df8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4619      	mov	r1, r3
 8004de8:	4610      	mov	r0, r2
 8004dea:	f000 fa8a 	bl	8005302 <TIM_ITRx_SetConfig>
      break;
 8004dee:	e003      	b.n	8004df8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	73fb      	strb	r3, [r7, #15]
      break;
 8004df4:	e000      	b.n	8004df8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004df6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3710      	adds	r7, #16
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
	...

08004e14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b085      	sub	sp, #20
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	4a3a      	ldr	r2, [pc, #232]	@ (8004f10 <TIM_Base_SetConfig+0xfc>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d00f      	beq.n	8004e4c <TIM_Base_SetConfig+0x38>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e32:	d00b      	beq.n	8004e4c <TIM_Base_SetConfig+0x38>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	4a37      	ldr	r2, [pc, #220]	@ (8004f14 <TIM_Base_SetConfig+0x100>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d007      	beq.n	8004e4c <TIM_Base_SetConfig+0x38>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	4a36      	ldr	r2, [pc, #216]	@ (8004f18 <TIM_Base_SetConfig+0x104>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d003      	beq.n	8004e4c <TIM_Base_SetConfig+0x38>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	4a35      	ldr	r2, [pc, #212]	@ (8004f1c <TIM_Base_SetConfig+0x108>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d108      	bne.n	8004e5e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	68fa      	ldr	r2, [r7, #12]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a2b      	ldr	r2, [pc, #172]	@ (8004f10 <TIM_Base_SetConfig+0xfc>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d01b      	beq.n	8004e9e <TIM_Base_SetConfig+0x8a>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e6c:	d017      	beq.n	8004e9e <TIM_Base_SetConfig+0x8a>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a28      	ldr	r2, [pc, #160]	@ (8004f14 <TIM_Base_SetConfig+0x100>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d013      	beq.n	8004e9e <TIM_Base_SetConfig+0x8a>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a27      	ldr	r2, [pc, #156]	@ (8004f18 <TIM_Base_SetConfig+0x104>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d00f      	beq.n	8004e9e <TIM_Base_SetConfig+0x8a>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a26      	ldr	r2, [pc, #152]	@ (8004f1c <TIM_Base_SetConfig+0x108>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d00b      	beq.n	8004e9e <TIM_Base_SetConfig+0x8a>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a25      	ldr	r2, [pc, #148]	@ (8004f20 <TIM_Base_SetConfig+0x10c>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d007      	beq.n	8004e9e <TIM_Base_SetConfig+0x8a>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a24      	ldr	r2, [pc, #144]	@ (8004f24 <TIM_Base_SetConfig+0x110>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d003      	beq.n	8004e9e <TIM_Base_SetConfig+0x8a>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a23      	ldr	r2, [pc, #140]	@ (8004f28 <TIM_Base_SetConfig+0x114>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d108      	bne.n	8004eb0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ea4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	68fa      	ldr	r2, [r7, #12]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	695b      	ldr	r3, [r3, #20]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	68fa      	ldr	r2, [r7, #12]
 8004ec2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	689a      	ldr	r2, [r3, #8]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4a0e      	ldr	r2, [pc, #56]	@ (8004f10 <TIM_Base_SetConfig+0xfc>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d103      	bne.n	8004ee4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	691a      	ldr	r2, [r3, #16]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	f003 0301 	and.w	r3, r3, #1
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d105      	bne.n	8004f02 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	f023 0201 	bic.w	r2, r3, #1
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	611a      	str	r2, [r3, #16]
  }
}
 8004f02:	bf00      	nop
 8004f04:	3714      	adds	r7, #20
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr
 8004f0e:	bf00      	nop
 8004f10:	40010000 	.word	0x40010000
 8004f14:	40000400 	.word	0x40000400
 8004f18:	40000800 	.word	0x40000800
 8004f1c:	40000c00 	.word	0x40000c00
 8004f20:	40014000 	.word	0x40014000
 8004f24:	40014400 	.word	0x40014400
 8004f28:	40014800 	.word	0x40014800

08004f2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b087      	sub	sp, #28
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a1b      	ldr	r3, [r3, #32]
 8004f3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6a1b      	ldr	r3, [r3, #32]
 8004f40:	f023 0201 	bic.w	r2, r3, #1
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	699b      	ldr	r3, [r3, #24]
 8004f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f023 0303 	bic.w	r3, r3, #3
 8004f62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68fa      	ldr	r2, [r7, #12]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	f023 0302 	bic.w	r3, r3, #2
 8004f74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	697a      	ldr	r2, [r7, #20]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4a1c      	ldr	r2, [pc, #112]	@ (8004ff4 <TIM_OC1_SetConfig+0xc8>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d10c      	bne.n	8004fa2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	f023 0308 	bic.w	r3, r3, #8
 8004f8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	697a      	ldr	r2, [r7, #20]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	f023 0304 	bic.w	r3, r3, #4
 8004fa0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a13      	ldr	r2, [pc, #76]	@ (8004ff4 <TIM_OC1_SetConfig+0xc8>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d111      	bne.n	8004fce <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004fb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004fb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	695b      	ldr	r3, [r3, #20]
 8004fbe:	693a      	ldr	r2, [r7, #16]
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	699b      	ldr	r3, [r3, #24]
 8004fc8:	693a      	ldr	r2, [r7, #16]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	693a      	ldr	r2, [r7, #16]
 8004fd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	68fa      	ldr	r2, [r7, #12]
 8004fd8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	685a      	ldr	r2, [r3, #4]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	697a      	ldr	r2, [r7, #20]
 8004fe6:	621a      	str	r2, [r3, #32]
}
 8004fe8:	bf00      	nop
 8004fea:	371c      	adds	r7, #28
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr
 8004ff4:	40010000 	.word	0x40010000

08004ff8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b087      	sub	sp, #28
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a1b      	ldr	r3, [r3, #32]
 8005006:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a1b      	ldr	r3, [r3, #32]
 800500c:	f023 0210 	bic.w	r2, r3, #16
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	699b      	ldr	r3, [r3, #24]
 800501e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005026:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800502e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	021b      	lsls	r3, r3, #8
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	4313      	orrs	r3, r2
 800503a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	f023 0320 	bic.w	r3, r3, #32
 8005042:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	011b      	lsls	r3, r3, #4
 800504a:	697a      	ldr	r2, [r7, #20]
 800504c:	4313      	orrs	r3, r2
 800504e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4a1e      	ldr	r2, [pc, #120]	@ (80050cc <TIM_OC2_SetConfig+0xd4>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d10d      	bne.n	8005074 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800505e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	011b      	lsls	r3, r3, #4
 8005066:	697a      	ldr	r2, [r7, #20]
 8005068:	4313      	orrs	r3, r2
 800506a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005072:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	4a15      	ldr	r2, [pc, #84]	@ (80050cc <TIM_OC2_SetConfig+0xd4>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d113      	bne.n	80050a4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005082:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800508a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	695b      	ldr	r3, [r3, #20]
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	693a      	ldr	r2, [r7, #16]
 8005094:	4313      	orrs	r3, r2
 8005096:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	699b      	ldr	r3, [r3, #24]
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	693a      	ldr	r2, [r7, #16]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	693a      	ldr	r2, [r7, #16]
 80050a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	68fa      	ldr	r2, [r7, #12]
 80050ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	685a      	ldr	r2, [r3, #4]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	697a      	ldr	r2, [r7, #20]
 80050bc:	621a      	str	r2, [r3, #32]
}
 80050be:	bf00      	nop
 80050c0:	371c      	adds	r7, #28
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr
 80050ca:	bf00      	nop
 80050cc:	40010000 	.word	0x40010000

080050d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b087      	sub	sp, #28
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6a1b      	ldr	r3, [r3, #32]
 80050de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6a1b      	ldr	r3, [r3, #32]
 80050e4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	69db      	ldr	r3, [r3, #28]
 80050f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f023 0303 	bic.w	r3, r3, #3
 8005106:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	68fa      	ldr	r2, [r7, #12]
 800510e:	4313      	orrs	r3, r2
 8005110:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005118:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	021b      	lsls	r3, r3, #8
 8005120:	697a      	ldr	r2, [r7, #20]
 8005122:	4313      	orrs	r3, r2
 8005124:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a1d      	ldr	r2, [pc, #116]	@ (80051a0 <TIM_OC3_SetConfig+0xd0>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d10d      	bne.n	800514a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005134:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	021b      	lsls	r3, r3, #8
 800513c:	697a      	ldr	r2, [r7, #20]
 800513e:	4313      	orrs	r3, r2
 8005140:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005148:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a14      	ldr	r2, [pc, #80]	@ (80051a0 <TIM_OC3_SetConfig+0xd0>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d113      	bne.n	800517a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005158:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005160:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	695b      	ldr	r3, [r3, #20]
 8005166:	011b      	lsls	r3, r3, #4
 8005168:	693a      	ldr	r2, [r7, #16]
 800516a:	4313      	orrs	r3, r2
 800516c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	699b      	ldr	r3, [r3, #24]
 8005172:	011b      	lsls	r3, r3, #4
 8005174:	693a      	ldr	r2, [r7, #16]
 8005176:	4313      	orrs	r3, r2
 8005178:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	693a      	ldr	r2, [r7, #16]
 800517e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	68fa      	ldr	r2, [r7, #12]
 8005184:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	685a      	ldr	r2, [r3, #4]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	697a      	ldr	r2, [r7, #20]
 8005192:	621a      	str	r2, [r3, #32]
}
 8005194:	bf00      	nop
 8005196:	371c      	adds	r7, #28
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr
 80051a0:	40010000 	.word	0x40010000

080051a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b087      	sub	sp, #28
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a1b      	ldr	r3, [r3, #32]
 80051b2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6a1b      	ldr	r3, [r3, #32]
 80051b8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	69db      	ldr	r3, [r3, #28]
 80051ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	021b      	lsls	r3, r3, #8
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80051ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	031b      	lsls	r3, r3, #12
 80051f6:	693a      	ldr	r2, [r7, #16]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4a10      	ldr	r2, [pc, #64]	@ (8005240 <TIM_OC4_SetConfig+0x9c>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d109      	bne.n	8005218 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800520a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	695b      	ldr	r3, [r3, #20]
 8005210:	019b      	lsls	r3, r3, #6
 8005212:	697a      	ldr	r2, [r7, #20]
 8005214:	4313      	orrs	r3, r2
 8005216:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	697a      	ldr	r2, [r7, #20]
 800521c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	68fa      	ldr	r2, [r7, #12]
 8005222:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	685a      	ldr	r2, [r3, #4]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	693a      	ldr	r2, [r7, #16]
 8005230:	621a      	str	r2, [r3, #32]
}
 8005232:	bf00      	nop
 8005234:	371c      	adds	r7, #28
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr
 800523e:	bf00      	nop
 8005240:	40010000 	.word	0x40010000

08005244 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005244:	b480      	push	{r7}
 8005246:	b087      	sub	sp, #28
 8005248:	af00      	add	r7, sp, #0
 800524a:	60f8      	str	r0, [r7, #12]
 800524c:	60b9      	str	r1, [r7, #8]
 800524e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6a1b      	ldr	r3, [r3, #32]
 8005254:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	6a1b      	ldr	r3, [r3, #32]
 800525a:	f023 0201 	bic.w	r2, r3, #1
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	699b      	ldr	r3, [r3, #24]
 8005266:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800526e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	011b      	lsls	r3, r3, #4
 8005274:	693a      	ldr	r2, [r7, #16]
 8005276:	4313      	orrs	r3, r2
 8005278:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	f023 030a 	bic.w	r3, r3, #10
 8005280:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005282:	697a      	ldr	r2, [r7, #20]
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	4313      	orrs	r3, r2
 8005288:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	693a      	ldr	r2, [r7, #16]
 800528e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	697a      	ldr	r2, [r7, #20]
 8005294:	621a      	str	r2, [r3, #32]
}
 8005296:	bf00      	nop
 8005298:	371c      	adds	r7, #28
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr

080052a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052a2:	b480      	push	{r7}
 80052a4:	b087      	sub	sp, #28
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	60f8      	str	r0, [r7, #12]
 80052aa:	60b9      	str	r1, [r7, #8]
 80052ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6a1b      	ldr	r3, [r3, #32]
 80052b2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6a1b      	ldr	r3, [r3, #32]
 80052b8:	f023 0210 	bic.w	r2, r3, #16
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	699b      	ldr	r3, [r3, #24]
 80052c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80052cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	031b      	lsls	r3, r3, #12
 80052d2:	693a      	ldr	r2, [r7, #16]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80052de:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	011b      	lsls	r3, r3, #4
 80052e4:	697a      	ldr	r2, [r7, #20]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	693a      	ldr	r2, [r7, #16]
 80052ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	697a      	ldr	r2, [r7, #20]
 80052f4:	621a      	str	r2, [r3, #32]
}
 80052f6:	bf00      	nop
 80052f8:	371c      	adds	r7, #28
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr

08005302 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005302:	b480      	push	{r7}
 8005304:	b085      	sub	sp, #20
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
 800530a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005318:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800531a:	683a      	ldr	r2, [r7, #0]
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	4313      	orrs	r3, r2
 8005320:	f043 0307 	orr.w	r3, r3, #7
 8005324:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	68fa      	ldr	r2, [r7, #12]
 800532a:	609a      	str	r2, [r3, #8]
}
 800532c:	bf00      	nop
 800532e:	3714      	adds	r7, #20
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr

08005338 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005338:	b480      	push	{r7}
 800533a:	b087      	sub	sp, #28
 800533c:	af00      	add	r7, sp, #0
 800533e:	60f8      	str	r0, [r7, #12]
 8005340:	60b9      	str	r1, [r7, #8]
 8005342:	607a      	str	r2, [r7, #4]
 8005344:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005352:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	021a      	lsls	r2, r3, #8
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	431a      	orrs	r2, r3
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	4313      	orrs	r3, r2
 8005360:	697a      	ldr	r2, [r7, #20]
 8005362:	4313      	orrs	r3, r2
 8005364:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	697a      	ldr	r2, [r7, #20]
 800536a:	609a      	str	r2, [r3, #8]
}
 800536c:	bf00      	nop
 800536e:	371c      	adds	r7, #28
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr

08005378 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005378:	b480      	push	{r7}
 800537a:	b087      	sub	sp, #28
 800537c:	af00      	add	r7, sp, #0
 800537e:	60f8      	str	r0, [r7, #12]
 8005380:	60b9      	str	r1, [r7, #8]
 8005382:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	f003 031f 	and.w	r3, r3, #31
 800538a:	2201      	movs	r2, #1
 800538c:	fa02 f303 	lsl.w	r3, r2, r3
 8005390:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	6a1a      	ldr	r2, [r3, #32]
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	43db      	mvns	r3, r3
 800539a:	401a      	ands	r2, r3
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6a1a      	ldr	r2, [r3, #32]
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	f003 031f 	and.w	r3, r3, #31
 80053aa:	6879      	ldr	r1, [r7, #4]
 80053ac:	fa01 f303 	lsl.w	r3, r1, r3
 80053b0:	431a      	orrs	r2, r3
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	621a      	str	r2, [r3, #32]
}
 80053b6:	bf00      	nop
 80053b8:	371c      	adds	r7, #28
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr
	...

080053c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b085      	sub	sp, #20
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d101      	bne.n	80053dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053d8:	2302      	movs	r3, #2
 80053da:	e050      	b.n	800547e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2202      	movs	r2, #2
 80053e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005402:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	68fa      	ldr	r2, [r7, #12]
 800540a:	4313      	orrs	r3, r2
 800540c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a1c      	ldr	r2, [pc, #112]	@ (800548c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d018      	beq.n	8005452 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005428:	d013      	beq.n	8005452 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a18      	ldr	r2, [pc, #96]	@ (8005490 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d00e      	beq.n	8005452 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a16      	ldr	r2, [pc, #88]	@ (8005494 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d009      	beq.n	8005452 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a15      	ldr	r2, [pc, #84]	@ (8005498 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d004      	beq.n	8005452 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a13      	ldr	r2, [pc, #76]	@ (800549c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d10c      	bne.n	800546c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005458:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	68ba      	ldr	r2, [r7, #8]
 8005460:	4313      	orrs	r3, r2
 8005462:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	68ba      	ldr	r2, [r7, #8]
 800546a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800547c:	2300      	movs	r3, #0
}
 800547e:	4618      	mov	r0, r3
 8005480:	3714      	adds	r7, #20
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr
 800548a:	bf00      	nop
 800548c:	40010000 	.word	0x40010000
 8005490:	40000400 	.word	0x40000400
 8005494:	40000800 	.word	0x40000800
 8005498:	40000c00 	.word	0x40000c00
 800549c:	40014000 	.word	0x40014000

080054a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b085      	sub	sp, #20
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80054aa:	2300      	movs	r3, #0
 80054ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d101      	bne.n	80054bc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80054b8:	2302      	movs	r3, #2
 80054ba:	e03d      	b.n	8005538 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	4313      	orrs	r3, r2
 80054de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4313      	orrs	r3, r2
 80054fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	4313      	orrs	r3, r2
 8005508:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	695b      	ldr	r3, [r3, #20]
 8005514:	4313      	orrs	r3, r2
 8005516:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	69db      	ldr	r3, [r3, #28]
 8005522:	4313      	orrs	r3, r2
 8005524:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	68fa      	ldr	r2, [r7, #12]
 800552c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005536:	2300      	movs	r3, #0
}
 8005538:	4618      	mov	r0, r3
 800553a:	3714      	adds	r7, #20
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr

08005544 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b082      	sub	sp, #8
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d101      	bne.n	8005556 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e042      	b.n	80055dc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800555c:	b2db      	uxtb	r3, r3
 800555e:	2b00      	cmp	r3, #0
 8005560:	d106      	bne.n	8005570 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f7fc fea8 	bl	80022c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2224      	movs	r2, #36	@ 0x24
 8005574:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	68da      	ldr	r2, [r3, #12]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005586:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f000 f973 	bl	8005874 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	691a      	ldr	r2, [r3, #16]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800559c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	695a      	ldr	r2, [r3, #20]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80055ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	68da      	ldr	r2, [r3, #12]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80055bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2220      	movs	r2, #32
 80055c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2220      	movs	r2, #32
 80055d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80055da:	2300      	movs	r3, #0
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3708      	adds	r7, #8
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b08a      	sub	sp, #40	@ 0x28
 80055e8:	af02      	add	r7, sp, #8
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	60b9      	str	r1, [r7, #8]
 80055ee:	603b      	str	r3, [r7, #0]
 80055f0:	4613      	mov	r3, r2
 80055f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80055f4:	2300      	movs	r3, #0
 80055f6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055fe:	b2db      	uxtb	r3, r3
 8005600:	2b20      	cmp	r3, #32
 8005602:	d175      	bne.n	80056f0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d002      	beq.n	8005610 <HAL_UART_Transmit+0x2c>
 800560a:	88fb      	ldrh	r3, [r7, #6]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d101      	bne.n	8005614 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	e06e      	b.n	80056f2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2200      	movs	r2, #0
 8005618:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2221      	movs	r2, #33	@ 0x21
 800561e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005622:	f7fc ff25 	bl	8002470 <HAL_GetTick>
 8005626:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	88fa      	ldrh	r2, [r7, #6]
 800562c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	88fa      	ldrh	r2, [r7, #6]
 8005632:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800563c:	d108      	bne.n	8005650 <HAL_UART_Transmit+0x6c>
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d104      	bne.n	8005650 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005646:	2300      	movs	r3, #0
 8005648:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	61bb      	str	r3, [r7, #24]
 800564e:	e003      	b.n	8005658 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005654:	2300      	movs	r3, #0
 8005656:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005658:	e02e      	b.n	80056b8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	9300      	str	r3, [sp, #0]
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	2200      	movs	r2, #0
 8005662:	2180      	movs	r1, #128	@ 0x80
 8005664:	68f8      	ldr	r0, [r7, #12]
 8005666:	f000 f848 	bl	80056fa <UART_WaitOnFlagUntilTimeout>
 800566a:	4603      	mov	r3, r0
 800566c:	2b00      	cmp	r3, #0
 800566e:	d005      	beq.n	800567c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2220      	movs	r2, #32
 8005674:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005678:	2303      	movs	r3, #3
 800567a:	e03a      	b.n	80056f2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d10b      	bne.n	800569a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005682:	69bb      	ldr	r3, [r7, #24]
 8005684:	881b      	ldrh	r3, [r3, #0]
 8005686:	461a      	mov	r2, r3
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005690:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005692:	69bb      	ldr	r3, [r7, #24]
 8005694:	3302      	adds	r3, #2
 8005696:	61bb      	str	r3, [r7, #24]
 8005698:	e007      	b.n	80056aa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800569a:	69fb      	ldr	r3, [r7, #28]
 800569c:	781a      	ldrb	r2, [r3, #0]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	3301      	adds	r3, #1
 80056a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	3b01      	subs	r3, #1
 80056b2:	b29a      	uxth	r2, r3
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80056bc:	b29b      	uxth	r3, r3
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d1cb      	bne.n	800565a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	9300      	str	r3, [sp, #0]
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	2200      	movs	r2, #0
 80056ca:	2140      	movs	r1, #64	@ 0x40
 80056cc:	68f8      	ldr	r0, [r7, #12]
 80056ce:	f000 f814 	bl	80056fa <UART_WaitOnFlagUntilTimeout>
 80056d2:	4603      	mov	r3, r0
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d005      	beq.n	80056e4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2220      	movs	r2, #32
 80056dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80056e0:	2303      	movs	r3, #3
 80056e2:	e006      	b.n	80056f2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2220      	movs	r2, #32
 80056e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80056ec:	2300      	movs	r3, #0
 80056ee:	e000      	b.n	80056f2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80056f0:	2302      	movs	r3, #2
  }
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3720      	adds	r7, #32
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}

080056fa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80056fa:	b580      	push	{r7, lr}
 80056fc:	b086      	sub	sp, #24
 80056fe:	af00      	add	r7, sp, #0
 8005700:	60f8      	str	r0, [r7, #12]
 8005702:	60b9      	str	r1, [r7, #8]
 8005704:	603b      	str	r3, [r7, #0]
 8005706:	4613      	mov	r3, r2
 8005708:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800570a:	e03b      	b.n	8005784 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800570c:	6a3b      	ldr	r3, [r7, #32]
 800570e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005712:	d037      	beq.n	8005784 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005714:	f7fc feac 	bl	8002470 <HAL_GetTick>
 8005718:	4602      	mov	r2, r0
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	1ad3      	subs	r3, r2, r3
 800571e:	6a3a      	ldr	r2, [r7, #32]
 8005720:	429a      	cmp	r2, r3
 8005722:	d302      	bcc.n	800572a <UART_WaitOnFlagUntilTimeout+0x30>
 8005724:	6a3b      	ldr	r3, [r7, #32]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d101      	bne.n	800572e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800572a:	2303      	movs	r3, #3
 800572c:	e03a      	b.n	80057a4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	f003 0304 	and.w	r3, r3, #4
 8005738:	2b00      	cmp	r3, #0
 800573a:	d023      	beq.n	8005784 <UART_WaitOnFlagUntilTimeout+0x8a>
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	2b80      	cmp	r3, #128	@ 0x80
 8005740:	d020      	beq.n	8005784 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	2b40      	cmp	r3, #64	@ 0x40
 8005746:	d01d      	beq.n	8005784 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 0308 	and.w	r3, r3, #8
 8005752:	2b08      	cmp	r3, #8
 8005754:	d116      	bne.n	8005784 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005756:	2300      	movs	r3, #0
 8005758:	617b      	str	r3, [r7, #20]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	617b      	str	r3, [r7, #20]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	617b      	str	r3, [r7, #20]
 800576a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800576c:	68f8      	ldr	r0, [r7, #12]
 800576e:	f000 f81d 	bl	80057ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2208      	movs	r2, #8
 8005776:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2200      	movs	r2, #0
 800577c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	e00f      	b.n	80057a4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	4013      	ands	r3, r2
 800578e:	68ba      	ldr	r2, [r7, #8]
 8005790:	429a      	cmp	r2, r3
 8005792:	bf0c      	ite	eq
 8005794:	2301      	moveq	r3, #1
 8005796:	2300      	movne	r3, #0
 8005798:	b2db      	uxtb	r3, r3
 800579a:	461a      	mov	r2, r3
 800579c:	79fb      	ldrb	r3, [r7, #7]
 800579e:	429a      	cmp	r2, r3
 80057a0:	d0b4      	beq.n	800570c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80057a2:	2300      	movs	r3, #0
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3718      	adds	r7, #24
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}

080057ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b095      	sub	sp, #84	@ 0x54
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	330c      	adds	r3, #12
 80057ba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057be:	e853 3f00 	ldrex	r3, [r3]
 80057c2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80057c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80057ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	330c      	adds	r3, #12
 80057d2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80057d4:	643a      	str	r2, [r7, #64]	@ 0x40
 80057d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80057da:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80057dc:	e841 2300 	strex	r3, r2, [r1]
 80057e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80057e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d1e5      	bne.n	80057b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	3314      	adds	r3, #20
 80057ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f0:	6a3b      	ldr	r3, [r7, #32]
 80057f2:	e853 3f00 	ldrex	r3, [r3]
 80057f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80057f8:	69fb      	ldr	r3, [r7, #28]
 80057fa:	f023 0301 	bic.w	r3, r3, #1
 80057fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	3314      	adds	r3, #20
 8005806:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005808:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800580a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800580c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800580e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005810:	e841 2300 	strex	r3, r2, [r1]
 8005814:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005818:	2b00      	cmp	r3, #0
 800581a:	d1e5      	bne.n	80057e8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005820:	2b01      	cmp	r3, #1
 8005822:	d119      	bne.n	8005858 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	330c      	adds	r3, #12
 800582a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	e853 3f00 	ldrex	r3, [r3]
 8005832:	60bb      	str	r3, [r7, #8]
   return(result);
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	f023 0310 	bic.w	r3, r3, #16
 800583a:	647b      	str	r3, [r7, #68]	@ 0x44
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	330c      	adds	r3, #12
 8005842:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005844:	61ba      	str	r2, [r7, #24]
 8005846:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005848:	6979      	ldr	r1, [r7, #20]
 800584a:	69ba      	ldr	r2, [r7, #24]
 800584c:	e841 2300 	strex	r3, r2, [r1]
 8005850:	613b      	str	r3, [r7, #16]
   return(result);
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d1e5      	bne.n	8005824 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2220      	movs	r2, #32
 800585c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005866:	bf00      	nop
 8005868:	3754      	adds	r7, #84	@ 0x54
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr
	...

08005874 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005874:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005878:	b0c0      	sub	sp, #256	@ 0x100
 800587a:	af00      	add	r7, sp, #0
 800587c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	691b      	ldr	r3, [r3, #16]
 8005888:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800588c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005890:	68d9      	ldr	r1, [r3, #12]
 8005892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	ea40 0301 	orr.w	r3, r0, r1
 800589c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800589e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058a2:	689a      	ldr	r2, [r3, #8]
 80058a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	431a      	orrs	r2, r3
 80058ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058b0:	695b      	ldr	r3, [r3, #20]
 80058b2:	431a      	orrs	r2, r3
 80058b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058b8:	69db      	ldr	r3, [r3, #28]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80058c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80058cc:	f021 010c 	bic.w	r1, r1, #12
 80058d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80058da:	430b      	orrs	r3, r1
 80058dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80058de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	695b      	ldr	r3, [r3, #20]
 80058e6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80058ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058ee:	6999      	ldr	r1, [r3, #24]
 80058f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	ea40 0301 	orr.w	r3, r0, r1
 80058fa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80058fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	4b8f      	ldr	r3, [pc, #572]	@ (8005b40 <UART_SetConfig+0x2cc>)
 8005904:	429a      	cmp	r2, r3
 8005906:	d005      	beq.n	8005914 <UART_SetConfig+0xa0>
 8005908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	4b8d      	ldr	r3, [pc, #564]	@ (8005b44 <UART_SetConfig+0x2d0>)
 8005910:	429a      	cmp	r2, r3
 8005912:	d104      	bne.n	800591e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005914:	f7fe fe54 	bl	80045c0 <HAL_RCC_GetPCLK2Freq>
 8005918:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800591c:	e003      	b.n	8005926 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800591e:	f7fe fe3b 	bl	8004598 <HAL_RCC_GetPCLK1Freq>
 8005922:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005926:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800592a:	69db      	ldr	r3, [r3, #28]
 800592c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005930:	f040 810c 	bne.w	8005b4c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005934:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005938:	2200      	movs	r2, #0
 800593a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800593e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005942:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005946:	4622      	mov	r2, r4
 8005948:	462b      	mov	r3, r5
 800594a:	1891      	adds	r1, r2, r2
 800594c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800594e:	415b      	adcs	r3, r3
 8005950:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005952:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005956:	4621      	mov	r1, r4
 8005958:	eb12 0801 	adds.w	r8, r2, r1
 800595c:	4629      	mov	r1, r5
 800595e:	eb43 0901 	adc.w	r9, r3, r1
 8005962:	f04f 0200 	mov.w	r2, #0
 8005966:	f04f 0300 	mov.w	r3, #0
 800596a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800596e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005972:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005976:	4690      	mov	r8, r2
 8005978:	4699      	mov	r9, r3
 800597a:	4623      	mov	r3, r4
 800597c:	eb18 0303 	adds.w	r3, r8, r3
 8005980:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005984:	462b      	mov	r3, r5
 8005986:	eb49 0303 	adc.w	r3, r9, r3
 800598a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800598e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	2200      	movs	r2, #0
 8005996:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800599a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800599e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80059a2:	460b      	mov	r3, r1
 80059a4:	18db      	adds	r3, r3, r3
 80059a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80059a8:	4613      	mov	r3, r2
 80059aa:	eb42 0303 	adc.w	r3, r2, r3
 80059ae:	657b      	str	r3, [r7, #84]	@ 0x54
 80059b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80059b4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80059b8:	f7fb f96e 	bl	8000c98 <__aeabi_uldivmod>
 80059bc:	4602      	mov	r2, r0
 80059be:	460b      	mov	r3, r1
 80059c0:	4b61      	ldr	r3, [pc, #388]	@ (8005b48 <UART_SetConfig+0x2d4>)
 80059c2:	fba3 2302 	umull	r2, r3, r3, r2
 80059c6:	095b      	lsrs	r3, r3, #5
 80059c8:	011c      	lsls	r4, r3, #4
 80059ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059ce:	2200      	movs	r2, #0
 80059d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80059d4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80059d8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80059dc:	4642      	mov	r2, r8
 80059de:	464b      	mov	r3, r9
 80059e0:	1891      	adds	r1, r2, r2
 80059e2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80059e4:	415b      	adcs	r3, r3
 80059e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80059ec:	4641      	mov	r1, r8
 80059ee:	eb12 0a01 	adds.w	sl, r2, r1
 80059f2:	4649      	mov	r1, r9
 80059f4:	eb43 0b01 	adc.w	fp, r3, r1
 80059f8:	f04f 0200 	mov.w	r2, #0
 80059fc:	f04f 0300 	mov.w	r3, #0
 8005a00:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005a04:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005a08:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a0c:	4692      	mov	sl, r2
 8005a0e:	469b      	mov	fp, r3
 8005a10:	4643      	mov	r3, r8
 8005a12:	eb1a 0303 	adds.w	r3, sl, r3
 8005a16:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005a1a:	464b      	mov	r3, r9
 8005a1c:	eb4b 0303 	adc.w	r3, fp, r3
 8005a20:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005a30:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005a34:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005a38:	460b      	mov	r3, r1
 8005a3a:	18db      	adds	r3, r3, r3
 8005a3c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a3e:	4613      	mov	r3, r2
 8005a40:	eb42 0303 	adc.w	r3, r2, r3
 8005a44:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a46:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005a4a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005a4e:	f7fb f923 	bl	8000c98 <__aeabi_uldivmod>
 8005a52:	4602      	mov	r2, r0
 8005a54:	460b      	mov	r3, r1
 8005a56:	4611      	mov	r1, r2
 8005a58:	4b3b      	ldr	r3, [pc, #236]	@ (8005b48 <UART_SetConfig+0x2d4>)
 8005a5a:	fba3 2301 	umull	r2, r3, r3, r1
 8005a5e:	095b      	lsrs	r3, r3, #5
 8005a60:	2264      	movs	r2, #100	@ 0x64
 8005a62:	fb02 f303 	mul.w	r3, r2, r3
 8005a66:	1acb      	subs	r3, r1, r3
 8005a68:	00db      	lsls	r3, r3, #3
 8005a6a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005a6e:	4b36      	ldr	r3, [pc, #216]	@ (8005b48 <UART_SetConfig+0x2d4>)
 8005a70:	fba3 2302 	umull	r2, r3, r3, r2
 8005a74:	095b      	lsrs	r3, r3, #5
 8005a76:	005b      	lsls	r3, r3, #1
 8005a78:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005a7c:	441c      	add	r4, r3
 8005a7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a82:	2200      	movs	r2, #0
 8005a84:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005a88:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005a8c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005a90:	4642      	mov	r2, r8
 8005a92:	464b      	mov	r3, r9
 8005a94:	1891      	adds	r1, r2, r2
 8005a96:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005a98:	415b      	adcs	r3, r3
 8005a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a9c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005aa0:	4641      	mov	r1, r8
 8005aa2:	1851      	adds	r1, r2, r1
 8005aa4:	6339      	str	r1, [r7, #48]	@ 0x30
 8005aa6:	4649      	mov	r1, r9
 8005aa8:	414b      	adcs	r3, r1
 8005aaa:	637b      	str	r3, [r7, #52]	@ 0x34
 8005aac:	f04f 0200 	mov.w	r2, #0
 8005ab0:	f04f 0300 	mov.w	r3, #0
 8005ab4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005ab8:	4659      	mov	r1, fp
 8005aba:	00cb      	lsls	r3, r1, #3
 8005abc:	4651      	mov	r1, sl
 8005abe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ac2:	4651      	mov	r1, sl
 8005ac4:	00ca      	lsls	r2, r1, #3
 8005ac6:	4610      	mov	r0, r2
 8005ac8:	4619      	mov	r1, r3
 8005aca:	4603      	mov	r3, r0
 8005acc:	4642      	mov	r2, r8
 8005ace:	189b      	adds	r3, r3, r2
 8005ad0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005ad4:	464b      	mov	r3, r9
 8005ad6:	460a      	mov	r2, r1
 8005ad8:	eb42 0303 	adc.w	r3, r2, r3
 8005adc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005aec:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005af0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005af4:	460b      	mov	r3, r1
 8005af6:	18db      	adds	r3, r3, r3
 8005af8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005afa:	4613      	mov	r3, r2
 8005afc:	eb42 0303 	adc.w	r3, r2, r3
 8005b00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005b06:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005b0a:	f7fb f8c5 	bl	8000c98 <__aeabi_uldivmod>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	460b      	mov	r3, r1
 8005b12:	4b0d      	ldr	r3, [pc, #52]	@ (8005b48 <UART_SetConfig+0x2d4>)
 8005b14:	fba3 1302 	umull	r1, r3, r3, r2
 8005b18:	095b      	lsrs	r3, r3, #5
 8005b1a:	2164      	movs	r1, #100	@ 0x64
 8005b1c:	fb01 f303 	mul.w	r3, r1, r3
 8005b20:	1ad3      	subs	r3, r2, r3
 8005b22:	00db      	lsls	r3, r3, #3
 8005b24:	3332      	adds	r3, #50	@ 0x32
 8005b26:	4a08      	ldr	r2, [pc, #32]	@ (8005b48 <UART_SetConfig+0x2d4>)
 8005b28:	fba2 2303 	umull	r2, r3, r2, r3
 8005b2c:	095b      	lsrs	r3, r3, #5
 8005b2e:	f003 0207 	and.w	r2, r3, #7
 8005b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4422      	add	r2, r4
 8005b3a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005b3c:	e106      	b.n	8005d4c <UART_SetConfig+0x4d8>
 8005b3e:	bf00      	nop
 8005b40:	40011000 	.word	0x40011000
 8005b44:	40011400 	.word	0x40011400
 8005b48:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b50:	2200      	movs	r2, #0
 8005b52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005b56:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005b5a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005b5e:	4642      	mov	r2, r8
 8005b60:	464b      	mov	r3, r9
 8005b62:	1891      	adds	r1, r2, r2
 8005b64:	6239      	str	r1, [r7, #32]
 8005b66:	415b      	adcs	r3, r3
 8005b68:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b6a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005b6e:	4641      	mov	r1, r8
 8005b70:	1854      	adds	r4, r2, r1
 8005b72:	4649      	mov	r1, r9
 8005b74:	eb43 0501 	adc.w	r5, r3, r1
 8005b78:	f04f 0200 	mov.w	r2, #0
 8005b7c:	f04f 0300 	mov.w	r3, #0
 8005b80:	00eb      	lsls	r3, r5, #3
 8005b82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b86:	00e2      	lsls	r2, r4, #3
 8005b88:	4614      	mov	r4, r2
 8005b8a:	461d      	mov	r5, r3
 8005b8c:	4643      	mov	r3, r8
 8005b8e:	18e3      	adds	r3, r4, r3
 8005b90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005b94:	464b      	mov	r3, r9
 8005b96:	eb45 0303 	adc.w	r3, r5, r3
 8005b9a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005baa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005bae:	f04f 0200 	mov.w	r2, #0
 8005bb2:	f04f 0300 	mov.w	r3, #0
 8005bb6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005bba:	4629      	mov	r1, r5
 8005bbc:	008b      	lsls	r3, r1, #2
 8005bbe:	4621      	mov	r1, r4
 8005bc0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005bc4:	4621      	mov	r1, r4
 8005bc6:	008a      	lsls	r2, r1, #2
 8005bc8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005bcc:	f7fb f864 	bl	8000c98 <__aeabi_uldivmod>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	460b      	mov	r3, r1
 8005bd4:	4b60      	ldr	r3, [pc, #384]	@ (8005d58 <UART_SetConfig+0x4e4>)
 8005bd6:	fba3 2302 	umull	r2, r3, r3, r2
 8005bda:	095b      	lsrs	r3, r3, #5
 8005bdc:	011c      	lsls	r4, r3, #4
 8005bde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005be2:	2200      	movs	r2, #0
 8005be4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005be8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005bec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005bf0:	4642      	mov	r2, r8
 8005bf2:	464b      	mov	r3, r9
 8005bf4:	1891      	adds	r1, r2, r2
 8005bf6:	61b9      	str	r1, [r7, #24]
 8005bf8:	415b      	adcs	r3, r3
 8005bfa:	61fb      	str	r3, [r7, #28]
 8005bfc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c00:	4641      	mov	r1, r8
 8005c02:	1851      	adds	r1, r2, r1
 8005c04:	6139      	str	r1, [r7, #16]
 8005c06:	4649      	mov	r1, r9
 8005c08:	414b      	adcs	r3, r1
 8005c0a:	617b      	str	r3, [r7, #20]
 8005c0c:	f04f 0200 	mov.w	r2, #0
 8005c10:	f04f 0300 	mov.w	r3, #0
 8005c14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005c18:	4659      	mov	r1, fp
 8005c1a:	00cb      	lsls	r3, r1, #3
 8005c1c:	4651      	mov	r1, sl
 8005c1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c22:	4651      	mov	r1, sl
 8005c24:	00ca      	lsls	r2, r1, #3
 8005c26:	4610      	mov	r0, r2
 8005c28:	4619      	mov	r1, r3
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	4642      	mov	r2, r8
 8005c2e:	189b      	adds	r3, r3, r2
 8005c30:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005c34:	464b      	mov	r3, r9
 8005c36:	460a      	mov	r2, r1
 8005c38:	eb42 0303 	adc.w	r3, r2, r3
 8005c3c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005c4a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005c4c:	f04f 0200 	mov.w	r2, #0
 8005c50:	f04f 0300 	mov.w	r3, #0
 8005c54:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005c58:	4649      	mov	r1, r9
 8005c5a:	008b      	lsls	r3, r1, #2
 8005c5c:	4641      	mov	r1, r8
 8005c5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c62:	4641      	mov	r1, r8
 8005c64:	008a      	lsls	r2, r1, #2
 8005c66:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005c6a:	f7fb f815 	bl	8000c98 <__aeabi_uldivmod>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	460b      	mov	r3, r1
 8005c72:	4611      	mov	r1, r2
 8005c74:	4b38      	ldr	r3, [pc, #224]	@ (8005d58 <UART_SetConfig+0x4e4>)
 8005c76:	fba3 2301 	umull	r2, r3, r3, r1
 8005c7a:	095b      	lsrs	r3, r3, #5
 8005c7c:	2264      	movs	r2, #100	@ 0x64
 8005c7e:	fb02 f303 	mul.w	r3, r2, r3
 8005c82:	1acb      	subs	r3, r1, r3
 8005c84:	011b      	lsls	r3, r3, #4
 8005c86:	3332      	adds	r3, #50	@ 0x32
 8005c88:	4a33      	ldr	r2, [pc, #204]	@ (8005d58 <UART_SetConfig+0x4e4>)
 8005c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c8e:	095b      	lsrs	r3, r3, #5
 8005c90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005c94:	441c      	add	r4, r3
 8005c96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	673b      	str	r3, [r7, #112]	@ 0x70
 8005c9e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005ca0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005ca4:	4642      	mov	r2, r8
 8005ca6:	464b      	mov	r3, r9
 8005ca8:	1891      	adds	r1, r2, r2
 8005caa:	60b9      	str	r1, [r7, #8]
 8005cac:	415b      	adcs	r3, r3
 8005cae:	60fb      	str	r3, [r7, #12]
 8005cb0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005cb4:	4641      	mov	r1, r8
 8005cb6:	1851      	adds	r1, r2, r1
 8005cb8:	6039      	str	r1, [r7, #0]
 8005cba:	4649      	mov	r1, r9
 8005cbc:	414b      	adcs	r3, r1
 8005cbe:	607b      	str	r3, [r7, #4]
 8005cc0:	f04f 0200 	mov.w	r2, #0
 8005cc4:	f04f 0300 	mov.w	r3, #0
 8005cc8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005ccc:	4659      	mov	r1, fp
 8005cce:	00cb      	lsls	r3, r1, #3
 8005cd0:	4651      	mov	r1, sl
 8005cd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005cd6:	4651      	mov	r1, sl
 8005cd8:	00ca      	lsls	r2, r1, #3
 8005cda:	4610      	mov	r0, r2
 8005cdc:	4619      	mov	r1, r3
 8005cde:	4603      	mov	r3, r0
 8005ce0:	4642      	mov	r2, r8
 8005ce2:	189b      	adds	r3, r3, r2
 8005ce4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005ce6:	464b      	mov	r3, r9
 8005ce8:	460a      	mov	r2, r1
 8005cea:	eb42 0303 	adc.w	r3, r2, r3
 8005cee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	663b      	str	r3, [r7, #96]	@ 0x60
 8005cfa:	667a      	str	r2, [r7, #100]	@ 0x64
 8005cfc:	f04f 0200 	mov.w	r2, #0
 8005d00:	f04f 0300 	mov.w	r3, #0
 8005d04:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005d08:	4649      	mov	r1, r9
 8005d0a:	008b      	lsls	r3, r1, #2
 8005d0c:	4641      	mov	r1, r8
 8005d0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d12:	4641      	mov	r1, r8
 8005d14:	008a      	lsls	r2, r1, #2
 8005d16:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005d1a:	f7fa ffbd 	bl	8000c98 <__aeabi_uldivmod>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	460b      	mov	r3, r1
 8005d22:	4b0d      	ldr	r3, [pc, #52]	@ (8005d58 <UART_SetConfig+0x4e4>)
 8005d24:	fba3 1302 	umull	r1, r3, r3, r2
 8005d28:	095b      	lsrs	r3, r3, #5
 8005d2a:	2164      	movs	r1, #100	@ 0x64
 8005d2c:	fb01 f303 	mul.w	r3, r1, r3
 8005d30:	1ad3      	subs	r3, r2, r3
 8005d32:	011b      	lsls	r3, r3, #4
 8005d34:	3332      	adds	r3, #50	@ 0x32
 8005d36:	4a08      	ldr	r2, [pc, #32]	@ (8005d58 <UART_SetConfig+0x4e4>)
 8005d38:	fba2 2303 	umull	r2, r3, r2, r3
 8005d3c:	095b      	lsrs	r3, r3, #5
 8005d3e:	f003 020f 	and.w	r2, r3, #15
 8005d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4422      	add	r2, r4
 8005d4a:	609a      	str	r2, [r3, #8]
}
 8005d4c:	bf00      	nop
 8005d4e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005d52:	46bd      	mov	sp, r7
 8005d54:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d58:	51eb851f 	.word	0x51eb851f

08005d5c <__cvt>:
 8005d5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d60:	ec57 6b10 	vmov	r6, r7, d0
 8005d64:	2f00      	cmp	r7, #0
 8005d66:	460c      	mov	r4, r1
 8005d68:	4619      	mov	r1, r3
 8005d6a:	463b      	mov	r3, r7
 8005d6c:	bfbb      	ittet	lt
 8005d6e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005d72:	461f      	movlt	r7, r3
 8005d74:	2300      	movge	r3, #0
 8005d76:	232d      	movlt	r3, #45	@ 0x2d
 8005d78:	700b      	strb	r3, [r1, #0]
 8005d7a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005d7c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005d80:	4691      	mov	r9, r2
 8005d82:	f023 0820 	bic.w	r8, r3, #32
 8005d86:	bfbc      	itt	lt
 8005d88:	4632      	movlt	r2, r6
 8005d8a:	4616      	movlt	r6, r2
 8005d8c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005d90:	d005      	beq.n	8005d9e <__cvt+0x42>
 8005d92:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005d96:	d100      	bne.n	8005d9a <__cvt+0x3e>
 8005d98:	3401      	adds	r4, #1
 8005d9a:	2102      	movs	r1, #2
 8005d9c:	e000      	b.n	8005da0 <__cvt+0x44>
 8005d9e:	2103      	movs	r1, #3
 8005da0:	ab03      	add	r3, sp, #12
 8005da2:	9301      	str	r3, [sp, #4]
 8005da4:	ab02      	add	r3, sp, #8
 8005da6:	9300      	str	r3, [sp, #0]
 8005da8:	ec47 6b10 	vmov	d0, r6, r7
 8005dac:	4653      	mov	r3, sl
 8005dae:	4622      	mov	r2, r4
 8005db0:	f000 fe56 	bl	8006a60 <_dtoa_r>
 8005db4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005db8:	4605      	mov	r5, r0
 8005dba:	d119      	bne.n	8005df0 <__cvt+0x94>
 8005dbc:	f019 0f01 	tst.w	r9, #1
 8005dc0:	d00e      	beq.n	8005de0 <__cvt+0x84>
 8005dc2:	eb00 0904 	add.w	r9, r0, r4
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	2300      	movs	r3, #0
 8005dca:	4630      	mov	r0, r6
 8005dcc:	4639      	mov	r1, r7
 8005dce:	f7fa fe83 	bl	8000ad8 <__aeabi_dcmpeq>
 8005dd2:	b108      	cbz	r0, 8005dd8 <__cvt+0x7c>
 8005dd4:	f8cd 900c 	str.w	r9, [sp, #12]
 8005dd8:	2230      	movs	r2, #48	@ 0x30
 8005dda:	9b03      	ldr	r3, [sp, #12]
 8005ddc:	454b      	cmp	r3, r9
 8005dde:	d31e      	bcc.n	8005e1e <__cvt+0xc2>
 8005de0:	9b03      	ldr	r3, [sp, #12]
 8005de2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005de4:	1b5b      	subs	r3, r3, r5
 8005de6:	4628      	mov	r0, r5
 8005de8:	6013      	str	r3, [r2, #0]
 8005dea:	b004      	add	sp, #16
 8005dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005df0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005df4:	eb00 0904 	add.w	r9, r0, r4
 8005df8:	d1e5      	bne.n	8005dc6 <__cvt+0x6a>
 8005dfa:	7803      	ldrb	r3, [r0, #0]
 8005dfc:	2b30      	cmp	r3, #48	@ 0x30
 8005dfe:	d10a      	bne.n	8005e16 <__cvt+0xba>
 8005e00:	2200      	movs	r2, #0
 8005e02:	2300      	movs	r3, #0
 8005e04:	4630      	mov	r0, r6
 8005e06:	4639      	mov	r1, r7
 8005e08:	f7fa fe66 	bl	8000ad8 <__aeabi_dcmpeq>
 8005e0c:	b918      	cbnz	r0, 8005e16 <__cvt+0xba>
 8005e0e:	f1c4 0401 	rsb	r4, r4, #1
 8005e12:	f8ca 4000 	str.w	r4, [sl]
 8005e16:	f8da 3000 	ldr.w	r3, [sl]
 8005e1a:	4499      	add	r9, r3
 8005e1c:	e7d3      	b.n	8005dc6 <__cvt+0x6a>
 8005e1e:	1c59      	adds	r1, r3, #1
 8005e20:	9103      	str	r1, [sp, #12]
 8005e22:	701a      	strb	r2, [r3, #0]
 8005e24:	e7d9      	b.n	8005dda <__cvt+0x7e>

08005e26 <__exponent>:
 8005e26:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e28:	2900      	cmp	r1, #0
 8005e2a:	bfba      	itte	lt
 8005e2c:	4249      	neglt	r1, r1
 8005e2e:	232d      	movlt	r3, #45	@ 0x2d
 8005e30:	232b      	movge	r3, #43	@ 0x2b
 8005e32:	2909      	cmp	r1, #9
 8005e34:	7002      	strb	r2, [r0, #0]
 8005e36:	7043      	strb	r3, [r0, #1]
 8005e38:	dd29      	ble.n	8005e8e <__exponent+0x68>
 8005e3a:	f10d 0307 	add.w	r3, sp, #7
 8005e3e:	461d      	mov	r5, r3
 8005e40:	270a      	movs	r7, #10
 8005e42:	461a      	mov	r2, r3
 8005e44:	fbb1 f6f7 	udiv	r6, r1, r7
 8005e48:	fb07 1416 	mls	r4, r7, r6, r1
 8005e4c:	3430      	adds	r4, #48	@ 0x30
 8005e4e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005e52:	460c      	mov	r4, r1
 8005e54:	2c63      	cmp	r4, #99	@ 0x63
 8005e56:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8005e5a:	4631      	mov	r1, r6
 8005e5c:	dcf1      	bgt.n	8005e42 <__exponent+0x1c>
 8005e5e:	3130      	adds	r1, #48	@ 0x30
 8005e60:	1e94      	subs	r4, r2, #2
 8005e62:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005e66:	1c41      	adds	r1, r0, #1
 8005e68:	4623      	mov	r3, r4
 8005e6a:	42ab      	cmp	r3, r5
 8005e6c:	d30a      	bcc.n	8005e84 <__exponent+0x5e>
 8005e6e:	f10d 0309 	add.w	r3, sp, #9
 8005e72:	1a9b      	subs	r3, r3, r2
 8005e74:	42ac      	cmp	r4, r5
 8005e76:	bf88      	it	hi
 8005e78:	2300      	movhi	r3, #0
 8005e7a:	3302      	adds	r3, #2
 8005e7c:	4403      	add	r3, r0
 8005e7e:	1a18      	subs	r0, r3, r0
 8005e80:	b003      	add	sp, #12
 8005e82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e84:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005e88:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005e8c:	e7ed      	b.n	8005e6a <__exponent+0x44>
 8005e8e:	2330      	movs	r3, #48	@ 0x30
 8005e90:	3130      	adds	r1, #48	@ 0x30
 8005e92:	7083      	strb	r3, [r0, #2]
 8005e94:	70c1      	strb	r1, [r0, #3]
 8005e96:	1d03      	adds	r3, r0, #4
 8005e98:	e7f1      	b.n	8005e7e <__exponent+0x58>
	...

08005e9c <_printf_float>:
 8005e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ea0:	b08d      	sub	sp, #52	@ 0x34
 8005ea2:	460c      	mov	r4, r1
 8005ea4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005ea8:	4616      	mov	r6, r2
 8005eaa:	461f      	mov	r7, r3
 8005eac:	4605      	mov	r5, r0
 8005eae:	f000 fcd5 	bl	800685c <_localeconv_r>
 8005eb2:	6803      	ldr	r3, [r0, #0]
 8005eb4:	9304      	str	r3, [sp, #16]
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f7fa f9e2 	bl	8000280 <strlen>
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	930a      	str	r3, [sp, #40]	@ 0x28
 8005ec0:	f8d8 3000 	ldr.w	r3, [r8]
 8005ec4:	9005      	str	r0, [sp, #20]
 8005ec6:	3307      	adds	r3, #7
 8005ec8:	f023 0307 	bic.w	r3, r3, #7
 8005ecc:	f103 0208 	add.w	r2, r3, #8
 8005ed0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005ed4:	f8d4 b000 	ldr.w	fp, [r4]
 8005ed8:	f8c8 2000 	str.w	r2, [r8]
 8005edc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005ee0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005ee4:	9307      	str	r3, [sp, #28]
 8005ee6:	f8cd 8018 	str.w	r8, [sp, #24]
 8005eea:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005eee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005ef2:	4b9c      	ldr	r3, [pc, #624]	@ (8006164 <_printf_float+0x2c8>)
 8005ef4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005ef8:	f7fa fe20 	bl	8000b3c <__aeabi_dcmpun>
 8005efc:	bb70      	cbnz	r0, 8005f5c <_printf_float+0xc0>
 8005efe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f02:	4b98      	ldr	r3, [pc, #608]	@ (8006164 <_printf_float+0x2c8>)
 8005f04:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005f08:	f7fa fdfa 	bl	8000b00 <__aeabi_dcmple>
 8005f0c:	bb30      	cbnz	r0, 8005f5c <_printf_float+0xc0>
 8005f0e:	2200      	movs	r2, #0
 8005f10:	2300      	movs	r3, #0
 8005f12:	4640      	mov	r0, r8
 8005f14:	4649      	mov	r1, r9
 8005f16:	f7fa fde9 	bl	8000aec <__aeabi_dcmplt>
 8005f1a:	b110      	cbz	r0, 8005f22 <_printf_float+0x86>
 8005f1c:	232d      	movs	r3, #45	@ 0x2d
 8005f1e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f22:	4a91      	ldr	r2, [pc, #580]	@ (8006168 <_printf_float+0x2cc>)
 8005f24:	4b91      	ldr	r3, [pc, #580]	@ (800616c <_printf_float+0x2d0>)
 8005f26:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005f2a:	bf94      	ite	ls
 8005f2c:	4690      	movls	r8, r2
 8005f2e:	4698      	movhi	r8, r3
 8005f30:	2303      	movs	r3, #3
 8005f32:	6123      	str	r3, [r4, #16]
 8005f34:	f02b 0304 	bic.w	r3, fp, #4
 8005f38:	6023      	str	r3, [r4, #0]
 8005f3a:	f04f 0900 	mov.w	r9, #0
 8005f3e:	9700      	str	r7, [sp, #0]
 8005f40:	4633      	mov	r3, r6
 8005f42:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005f44:	4621      	mov	r1, r4
 8005f46:	4628      	mov	r0, r5
 8005f48:	f000 f9d2 	bl	80062f0 <_printf_common>
 8005f4c:	3001      	adds	r0, #1
 8005f4e:	f040 808d 	bne.w	800606c <_printf_float+0x1d0>
 8005f52:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005f56:	b00d      	add	sp, #52	@ 0x34
 8005f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f5c:	4642      	mov	r2, r8
 8005f5e:	464b      	mov	r3, r9
 8005f60:	4640      	mov	r0, r8
 8005f62:	4649      	mov	r1, r9
 8005f64:	f7fa fdea 	bl	8000b3c <__aeabi_dcmpun>
 8005f68:	b140      	cbz	r0, 8005f7c <_printf_float+0xe0>
 8005f6a:	464b      	mov	r3, r9
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	bfbc      	itt	lt
 8005f70:	232d      	movlt	r3, #45	@ 0x2d
 8005f72:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005f76:	4a7e      	ldr	r2, [pc, #504]	@ (8006170 <_printf_float+0x2d4>)
 8005f78:	4b7e      	ldr	r3, [pc, #504]	@ (8006174 <_printf_float+0x2d8>)
 8005f7a:	e7d4      	b.n	8005f26 <_printf_float+0x8a>
 8005f7c:	6863      	ldr	r3, [r4, #4]
 8005f7e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005f82:	9206      	str	r2, [sp, #24]
 8005f84:	1c5a      	adds	r2, r3, #1
 8005f86:	d13b      	bne.n	8006000 <_printf_float+0x164>
 8005f88:	2306      	movs	r3, #6
 8005f8a:	6063      	str	r3, [r4, #4]
 8005f8c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005f90:	2300      	movs	r3, #0
 8005f92:	6022      	str	r2, [r4, #0]
 8005f94:	9303      	str	r3, [sp, #12]
 8005f96:	ab0a      	add	r3, sp, #40	@ 0x28
 8005f98:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005f9c:	ab09      	add	r3, sp, #36	@ 0x24
 8005f9e:	9300      	str	r3, [sp, #0]
 8005fa0:	6861      	ldr	r1, [r4, #4]
 8005fa2:	ec49 8b10 	vmov	d0, r8, r9
 8005fa6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005faa:	4628      	mov	r0, r5
 8005fac:	f7ff fed6 	bl	8005d5c <__cvt>
 8005fb0:	9b06      	ldr	r3, [sp, #24]
 8005fb2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005fb4:	2b47      	cmp	r3, #71	@ 0x47
 8005fb6:	4680      	mov	r8, r0
 8005fb8:	d129      	bne.n	800600e <_printf_float+0x172>
 8005fba:	1cc8      	adds	r0, r1, #3
 8005fbc:	db02      	blt.n	8005fc4 <_printf_float+0x128>
 8005fbe:	6863      	ldr	r3, [r4, #4]
 8005fc0:	4299      	cmp	r1, r3
 8005fc2:	dd41      	ble.n	8006048 <_printf_float+0x1ac>
 8005fc4:	f1aa 0a02 	sub.w	sl, sl, #2
 8005fc8:	fa5f fa8a 	uxtb.w	sl, sl
 8005fcc:	3901      	subs	r1, #1
 8005fce:	4652      	mov	r2, sl
 8005fd0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005fd4:	9109      	str	r1, [sp, #36]	@ 0x24
 8005fd6:	f7ff ff26 	bl	8005e26 <__exponent>
 8005fda:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005fdc:	1813      	adds	r3, r2, r0
 8005fde:	2a01      	cmp	r2, #1
 8005fe0:	4681      	mov	r9, r0
 8005fe2:	6123      	str	r3, [r4, #16]
 8005fe4:	dc02      	bgt.n	8005fec <_printf_float+0x150>
 8005fe6:	6822      	ldr	r2, [r4, #0]
 8005fe8:	07d2      	lsls	r2, r2, #31
 8005fea:	d501      	bpl.n	8005ff0 <_printf_float+0x154>
 8005fec:	3301      	adds	r3, #1
 8005fee:	6123      	str	r3, [r4, #16]
 8005ff0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d0a2      	beq.n	8005f3e <_printf_float+0xa2>
 8005ff8:	232d      	movs	r3, #45	@ 0x2d
 8005ffa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ffe:	e79e      	b.n	8005f3e <_printf_float+0xa2>
 8006000:	9a06      	ldr	r2, [sp, #24]
 8006002:	2a47      	cmp	r2, #71	@ 0x47
 8006004:	d1c2      	bne.n	8005f8c <_printf_float+0xf0>
 8006006:	2b00      	cmp	r3, #0
 8006008:	d1c0      	bne.n	8005f8c <_printf_float+0xf0>
 800600a:	2301      	movs	r3, #1
 800600c:	e7bd      	b.n	8005f8a <_printf_float+0xee>
 800600e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006012:	d9db      	bls.n	8005fcc <_printf_float+0x130>
 8006014:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006018:	d118      	bne.n	800604c <_printf_float+0x1b0>
 800601a:	2900      	cmp	r1, #0
 800601c:	6863      	ldr	r3, [r4, #4]
 800601e:	dd0b      	ble.n	8006038 <_printf_float+0x19c>
 8006020:	6121      	str	r1, [r4, #16]
 8006022:	b913      	cbnz	r3, 800602a <_printf_float+0x18e>
 8006024:	6822      	ldr	r2, [r4, #0]
 8006026:	07d0      	lsls	r0, r2, #31
 8006028:	d502      	bpl.n	8006030 <_printf_float+0x194>
 800602a:	3301      	adds	r3, #1
 800602c:	440b      	add	r3, r1
 800602e:	6123      	str	r3, [r4, #16]
 8006030:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006032:	f04f 0900 	mov.w	r9, #0
 8006036:	e7db      	b.n	8005ff0 <_printf_float+0x154>
 8006038:	b913      	cbnz	r3, 8006040 <_printf_float+0x1a4>
 800603a:	6822      	ldr	r2, [r4, #0]
 800603c:	07d2      	lsls	r2, r2, #31
 800603e:	d501      	bpl.n	8006044 <_printf_float+0x1a8>
 8006040:	3302      	adds	r3, #2
 8006042:	e7f4      	b.n	800602e <_printf_float+0x192>
 8006044:	2301      	movs	r3, #1
 8006046:	e7f2      	b.n	800602e <_printf_float+0x192>
 8006048:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800604c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800604e:	4299      	cmp	r1, r3
 8006050:	db05      	blt.n	800605e <_printf_float+0x1c2>
 8006052:	6823      	ldr	r3, [r4, #0]
 8006054:	6121      	str	r1, [r4, #16]
 8006056:	07d8      	lsls	r0, r3, #31
 8006058:	d5ea      	bpl.n	8006030 <_printf_float+0x194>
 800605a:	1c4b      	adds	r3, r1, #1
 800605c:	e7e7      	b.n	800602e <_printf_float+0x192>
 800605e:	2900      	cmp	r1, #0
 8006060:	bfd4      	ite	le
 8006062:	f1c1 0202 	rsble	r2, r1, #2
 8006066:	2201      	movgt	r2, #1
 8006068:	4413      	add	r3, r2
 800606a:	e7e0      	b.n	800602e <_printf_float+0x192>
 800606c:	6823      	ldr	r3, [r4, #0]
 800606e:	055a      	lsls	r2, r3, #21
 8006070:	d407      	bmi.n	8006082 <_printf_float+0x1e6>
 8006072:	6923      	ldr	r3, [r4, #16]
 8006074:	4642      	mov	r2, r8
 8006076:	4631      	mov	r1, r6
 8006078:	4628      	mov	r0, r5
 800607a:	47b8      	blx	r7
 800607c:	3001      	adds	r0, #1
 800607e:	d12b      	bne.n	80060d8 <_printf_float+0x23c>
 8006080:	e767      	b.n	8005f52 <_printf_float+0xb6>
 8006082:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006086:	f240 80dd 	bls.w	8006244 <_printf_float+0x3a8>
 800608a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800608e:	2200      	movs	r2, #0
 8006090:	2300      	movs	r3, #0
 8006092:	f7fa fd21 	bl	8000ad8 <__aeabi_dcmpeq>
 8006096:	2800      	cmp	r0, #0
 8006098:	d033      	beq.n	8006102 <_printf_float+0x266>
 800609a:	4a37      	ldr	r2, [pc, #220]	@ (8006178 <_printf_float+0x2dc>)
 800609c:	2301      	movs	r3, #1
 800609e:	4631      	mov	r1, r6
 80060a0:	4628      	mov	r0, r5
 80060a2:	47b8      	blx	r7
 80060a4:	3001      	adds	r0, #1
 80060a6:	f43f af54 	beq.w	8005f52 <_printf_float+0xb6>
 80060aa:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80060ae:	4543      	cmp	r3, r8
 80060b0:	db02      	blt.n	80060b8 <_printf_float+0x21c>
 80060b2:	6823      	ldr	r3, [r4, #0]
 80060b4:	07d8      	lsls	r0, r3, #31
 80060b6:	d50f      	bpl.n	80060d8 <_printf_float+0x23c>
 80060b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80060bc:	4631      	mov	r1, r6
 80060be:	4628      	mov	r0, r5
 80060c0:	47b8      	blx	r7
 80060c2:	3001      	adds	r0, #1
 80060c4:	f43f af45 	beq.w	8005f52 <_printf_float+0xb6>
 80060c8:	f04f 0900 	mov.w	r9, #0
 80060cc:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80060d0:	f104 0a1a 	add.w	sl, r4, #26
 80060d4:	45c8      	cmp	r8, r9
 80060d6:	dc09      	bgt.n	80060ec <_printf_float+0x250>
 80060d8:	6823      	ldr	r3, [r4, #0]
 80060da:	079b      	lsls	r3, r3, #30
 80060dc:	f100 8103 	bmi.w	80062e6 <_printf_float+0x44a>
 80060e0:	68e0      	ldr	r0, [r4, #12]
 80060e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80060e4:	4298      	cmp	r0, r3
 80060e6:	bfb8      	it	lt
 80060e8:	4618      	movlt	r0, r3
 80060ea:	e734      	b.n	8005f56 <_printf_float+0xba>
 80060ec:	2301      	movs	r3, #1
 80060ee:	4652      	mov	r2, sl
 80060f0:	4631      	mov	r1, r6
 80060f2:	4628      	mov	r0, r5
 80060f4:	47b8      	blx	r7
 80060f6:	3001      	adds	r0, #1
 80060f8:	f43f af2b 	beq.w	8005f52 <_printf_float+0xb6>
 80060fc:	f109 0901 	add.w	r9, r9, #1
 8006100:	e7e8      	b.n	80060d4 <_printf_float+0x238>
 8006102:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006104:	2b00      	cmp	r3, #0
 8006106:	dc39      	bgt.n	800617c <_printf_float+0x2e0>
 8006108:	4a1b      	ldr	r2, [pc, #108]	@ (8006178 <_printf_float+0x2dc>)
 800610a:	2301      	movs	r3, #1
 800610c:	4631      	mov	r1, r6
 800610e:	4628      	mov	r0, r5
 8006110:	47b8      	blx	r7
 8006112:	3001      	adds	r0, #1
 8006114:	f43f af1d 	beq.w	8005f52 <_printf_float+0xb6>
 8006118:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800611c:	ea59 0303 	orrs.w	r3, r9, r3
 8006120:	d102      	bne.n	8006128 <_printf_float+0x28c>
 8006122:	6823      	ldr	r3, [r4, #0]
 8006124:	07d9      	lsls	r1, r3, #31
 8006126:	d5d7      	bpl.n	80060d8 <_printf_float+0x23c>
 8006128:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800612c:	4631      	mov	r1, r6
 800612e:	4628      	mov	r0, r5
 8006130:	47b8      	blx	r7
 8006132:	3001      	adds	r0, #1
 8006134:	f43f af0d 	beq.w	8005f52 <_printf_float+0xb6>
 8006138:	f04f 0a00 	mov.w	sl, #0
 800613c:	f104 0b1a 	add.w	fp, r4, #26
 8006140:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006142:	425b      	negs	r3, r3
 8006144:	4553      	cmp	r3, sl
 8006146:	dc01      	bgt.n	800614c <_printf_float+0x2b0>
 8006148:	464b      	mov	r3, r9
 800614a:	e793      	b.n	8006074 <_printf_float+0x1d8>
 800614c:	2301      	movs	r3, #1
 800614e:	465a      	mov	r2, fp
 8006150:	4631      	mov	r1, r6
 8006152:	4628      	mov	r0, r5
 8006154:	47b8      	blx	r7
 8006156:	3001      	adds	r0, #1
 8006158:	f43f aefb 	beq.w	8005f52 <_printf_float+0xb6>
 800615c:	f10a 0a01 	add.w	sl, sl, #1
 8006160:	e7ee      	b.n	8006140 <_printf_float+0x2a4>
 8006162:	bf00      	nop
 8006164:	7fefffff 	.word	0x7fefffff
 8006168:	08008c58 	.word	0x08008c58
 800616c:	08008c5c 	.word	0x08008c5c
 8006170:	08008c60 	.word	0x08008c60
 8006174:	08008c64 	.word	0x08008c64
 8006178:	08008c68 	.word	0x08008c68
 800617c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800617e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006182:	4553      	cmp	r3, sl
 8006184:	bfa8      	it	ge
 8006186:	4653      	movge	r3, sl
 8006188:	2b00      	cmp	r3, #0
 800618a:	4699      	mov	r9, r3
 800618c:	dc36      	bgt.n	80061fc <_printf_float+0x360>
 800618e:	f04f 0b00 	mov.w	fp, #0
 8006192:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006196:	f104 021a 	add.w	r2, r4, #26
 800619a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800619c:	9306      	str	r3, [sp, #24]
 800619e:	eba3 0309 	sub.w	r3, r3, r9
 80061a2:	455b      	cmp	r3, fp
 80061a4:	dc31      	bgt.n	800620a <_printf_float+0x36e>
 80061a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061a8:	459a      	cmp	sl, r3
 80061aa:	dc3a      	bgt.n	8006222 <_printf_float+0x386>
 80061ac:	6823      	ldr	r3, [r4, #0]
 80061ae:	07da      	lsls	r2, r3, #31
 80061b0:	d437      	bmi.n	8006222 <_printf_float+0x386>
 80061b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061b4:	ebaa 0903 	sub.w	r9, sl, r3
 80061b8:	9b06      	ldr	r3, [sp, #24]
 80061ba:	ebaa 0303 	sub.w	r3, sl, r3
 80061be:	4599      	cmp	r9, r3
 80061c0:	bfa8      	it	ge
 80061c2:	4699      	movge	r9, r3
 80061c4:	f1b9 0f00 	cmp.w	r9, #0
 80061c8:	dc33      	bgt.n	8006232 <_printf_float+0x396>
 80061ca:	f04f 0800 	mov.w	r8, #0
 80061ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80061d2:	f104 0b1a 	add.w	fp, r4, #26
 80061d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061d8:	ebaa 0303 	sub.w	r3, sl, r3
 80061dc:	eba3 0309 	sub.w	r3, r3, r9
 80061e0:	4543      	cmp	r3, r8
 80061e2:	f77f af79 	ble.w	80060d8 <_printf_float+0x23c>
 80061e6:	2301      	movs	r3, #1
 80061e8:	465a      	mov	r2, fp
 80061ea:	4631      	mov	r1, r6
 80061ec:	4628      	mov	r0, r5
 80061ee:	47b8      	blx	r7
 80061f0:	3001      	adds	r0, #1
 80061f2:	f43f aeae 	beq.w	8005f52 <_printf_float+0xb6>
 80061f6:	f108 0801 	add.w	r8, r8, #1
 80061fa:	e7ec      	b.n	80061d6 <_printf_float+0x33a>
 80061fc:	4642      	mov	r2, r8
 80061fe:	4631      	mov	r1, r6
 8006200:	4628      	mov	r0, r5
 8006202:	47b8      	blx	r7
 8006204:	3001      	adds	r0, #1
 8006206:	d1c2      	bne.n	800618e <_printf_float+0x2f2>
 8006208:	e6a3      	b.n	8005f52 <_printf_float+0xb6>
 800620a:	2301      	movs	r3, #1
 800620c:	4631      	mov	r1, r6
 800620e:	4628      	mov	r0, r5
 8006210:	9206      	str	r2, [sp, #24]
 8006212:	47b8      	blx	r7
 8006214:	3001      	adds	r0, #1
 8006216:	f43f ae9c 	beq.w	8005f52 <_printf_float+0xb6>
 800621a:	9a06      	ldr	r2, [sp, #24]
 800621c:	f10b 0b01 	add.w	fp, fp, #1
 8006220:	e7bb      	b.n	800619a <_printf_float+0x2fe>
 8006222:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006226:	4631      	mov	r1, r6
 8006228:	4628      	mov	r0, r5
 800622a:	47b8      	blx	r7
 800622c:	3001      	adds	r0, #1
 800622e:	d1c0      	bne.n	80061b2 <_printf_float+0x316>
 8006230:	e68f      	b.n	8005f52 <_printf_float+0xb6>
 8006232:	9a06      	ldr	r2, [sp, #24]
 8006234:	464b      	mov	r3, r9
 8006236:	4442      	add	r2, r8
 8006238:	4631      	mov	r1, r6
 800623a:	4628      	mov	r0, r5
 800623c:	47b8      	blx	r7
 800623e:	3001      	adds	r0, #1
 8006240:	d1c3      	bne.n	80061ca <_printf_float+0x32e>
 8006242:	e686      	b.n	8005f52 <_printf_float+0xb6>
 8006244:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006248:	f1ba 0f01 	cmp.w	sl, #1
 800624c:	dc01      	bgt.n	8006252 <_printf_float+0x3b6>
 800624e:	07db      	lsls	r3, r3, #31
 8006250:	d536      	bpl.n	80062c0 <_printf_float+0x424>
 8006252:	2301      	movs	r3, #1
 8006254:	4642      	mov	r2, r8
 8006256:	4631      	mov	r1, r6
 8006258:	4628      	mov	r0, r5
 800625a:	47b8      	blx	r7
 800625c:	3001      	adds	r0, #1
 800625e:	f43f ae78 	beq.w	8005f52 <_printf_float+0xb6>
 8006262:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006266:	4631      	mov	r1, r6
 8006268:	4628      	mov	r0, r5
 800626a:	47b8      	blx	r7
 800626c:	3001      	adds	r0, #1
 800626e:	f43f ae70 	beq.w	8005f52 <_printf_float+0xb6>
 8006272:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006276:	2200      	movs	r2, #0
 8006278:	2300      	movs	r3, #0
 800627a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800627e:	f7fa fc2b 	bl	8000ad8 <__aeabi_dcmpeq>
 8006282:	b9c0      	cbnz	r0, 80062b6 <_printf_float+0x41a>
 8006284:	4653      	mov	r3, sl
 8006286:	f108 0201 	add.w	r2, r8, #1
 800628a:	4631      	mov	r1, r6
 800628c:	4628      	mov	r0, r5
 800628e:	47b8      	blx	r7
 8006290:	3001      	adds	r0, #1
 8006292:	d10c      	bne.n	80062ae <_printf_float+0x412>
 8006294:	e65d      	b.n	8005f52 <_printf_float+0xb6>
 8006296:	2301      	movs	r3, #1
 8006298:	465a      	mov	r2, fp
 800629a:	4631      	mov	r1, r6
 800629c:	4628      	mov	r0, r5
 800629e:	47b8      	blx	r7
 80062a0:	3001      	adds	r0, #1
 80062a2:	f43f ae56 	beq.w	8005f52 <_printf_float+0xb6>
 80062a6:	f108 0801 	add.w	r8, r8, #1
 80062aa:	45d0      	cmp	r8, sl
 80062ac:	dbf3      	blt.n	8006296 <_printf_float+0x3fa>
 80062ae:	464b      	mov	r3, r9
 80062b0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80062b4:	e6df      	b.n	8006076 <_printf_float+0x1da>
 80062b6:	f04f 0800 	mov.w	r8, #0
 80062ba:	f104 0b1a 	add.w	fp, r4, #26
 80062be:	e7f4      	b.n	80062aa <_printf_float+0x40e>
 80062c0:	2301      	movs	r3, #1
 80062c2:	4642      	mov	r2, r8
 80062c4:	e7e1      	b.n	800628a <_printf_float+0x3ee>
 80062c6:	2301      	movs	r3, #1
 80062c8:	464a      	mov	r2, r9
 80062ca:	4631      	mov	r1, r6
 80062cc:	4628      	mov	r0, r5
 80062ce:	47b8      	blx	r7
 80062d0:	3001      	adds	r0, #1
 80062d2:	f43f ae3e 	beq.w	8005f52 <_printf_float+0xb6>
 80062d6:	f108 0801 	add.w	r8, r8, #1
 80062da:	68e3      	ldr	r3, [r4, #12]
 80062dc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80062de:	1a5b      	subs	r3, r3, r1
 80062e0:	4543      	cmp	r3, r8
 80062e2:	dcf0      	bgt.n	80062c6 <_printf_float+0x42a>
 80062e4:	e6fc      	b.n	80060e0 <_printf_float+0x244>
 80062e6:	f04f 0800 	mov.w	r8, #0
 80062ea:	f104 0919 	add.w	r9, r4, #25
 80062ee:	e7f4      	b.n	80062da <_printf_float+0x43e>

080062f0 <_printf_common>:
 80062f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062f4:	4616      	mov	r6, r2
 80062f6:	4698      	mov	r8, r3
 80062f8:	688a      	ldr	r2, [r1, #8]
 80062fa:	690b      	ldr	r3, [r1, #16]
 80062fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006300:	4293      	cmp	r3, r2
 8006302:	bfb8      	it	lt
 8006304:	4613      	movlt	r3, r2
 8006306:	6033      	str	r3, [r6, #0]
 8006308:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800630c:	4607      	mov	r7, r0
 800630e:	460c      	mov	r4, r1
 8006310:	b10a      	cbz	r2, 8006316 <_printf_common+0x26>
 8006312:	3301      	adds	r3, #1
 8006314:	6033      	str	r3, [r6, #0]
 8006316:	6823      	ldr	r3, [r4, #0]
 8006318:	0699      	lsls	r1, r3, #26
 800631a:	bf42      	ittt	mi
 800631c:	6833      	ldrmi	r3, [r6, #0]
 800631e:	3302      	addmi	r3, #2
 8006320:	6033      	strmi	r3, [r6, #0]
 8006322:	6825      	ldr	r5, [r4, #0]
 8006324:	f015 0506 	ands.w	r5, r5, #6
 8006328:	d106      	bne.n	8006338 <_printf_common+0x48>
 800632a:	f104 0a19 	add.w	sl, r4, #25
 800632e:	68e3      	ldr	r3, [r4, #12]
 8006330:	6832      	ldr	r2, [r6, #0]
 8006332:	1a9b      	subs	r3, r3, r2
 8006334:	42ab      	cmp	r3, r5
 8006336:	dc26      	bgt.n	8006386 <_printf_common+0x96>
 8006338:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800633c:	6822      	ldr	r2, [r4, #0]
 800633e:	3b00      	subs	r3, #0
 8006340:	bf18      	it	ne
 8006342:	2301      	movne	r3, #1
 8006344:	0692      	lsls	r2, r2, #26
 8006346:	d42b      	bmi.n	80063a0 <_printf_common+0xb0>
 8006348:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800634c:	4641      	mov	r1, r8
 800634e:	4638      	mov	r0, r7
 8006350:	47c8      	blx	r9
 8006352:	3001      	adds	r0, #1
 8006354:	d01e      	beq.n	8006394 <_printf_common+0xa4>
 8006356:	6823      	ldr	r3, [r4, #0]
 8006358:	6922      	ldr	r2, [r4, #16]
 800635a:	f003 0306 	and.w	r3, r3, #6
 800635e:	2b04      	cmp	r3, #4
 8006360:	bf02      	ittt	eq
 8006362:	68e5      	ldreq	r5, [r4, #12]
 8006364:	6833      	ldreq	r3, [r6, #0]
 8006366:	1aed      	subeq	r5, r5, r3
 8006368:	68a3      	ldr	r3, [r4, #8]
 800636a:	bf0c      	ite	eq
 800636c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006370:	2500      	movne	r5, #0
 8006372:	4293      	cmp	r3, r2
 8006374:	bfc4      	itt	gt
 8006376:	1a9b      	subgt	r3, r3, r2
 8006378:	18ed      	addgt	r5, r5, r3
 800637a:	2600      	movs	r6, #0
 800637c:	341a      	adds	r4, #26
 800637e:	42b5      	cmp	r5, r6
 8006380:	d11a      	bne.n	80063b8 <_printf_common+0xc8>
 8006382:	2000      	movs	r0, #0
 8006384:	e008      	b.n	8006398 <_printf_common+0xa8>
 8006386:	2301      	movs	r3, #1
 8006388:	4652      	mov	r2, sl
 800638a:	4641      	mov	r1, r8
 800638c:	4638      	mov	r0, r7
 800638e:	47c8      	blx	r9
 8006390:	3001      	adds	r0, #1
 8006392:	d103      	bne.n	800639c <_printf_common+0xac>
 8006394:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800639c:	3501      	adds	r5, #1
 800639e:	e7c6      	b.n	800632e <_printf_common+0x3e>
 80063a0:	18e1      	adds	r1, r4, r3
 80063a2:	1c5a      	adds	r2, r3, #1
 80063a4:	2030      	movs	r0, #48	@ 0x30
 80063a6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80063aa:	4422      	add	r2, r4
 80063ac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80063b0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80063b4:	3302      	adds	r3, #2
 80063b6:	e7c7      	b.n	8006348 <_printf_common+0x58>
 80063b8:	2301      	movs	r3, #1
 80063ba:	4622      	mov	r2, r4
 80063bc:	4641      	mov	r1, r8
 80063be:	4638      	mov	r0, r7
 80063c0:	47c8      	blx	r9
 80063c2:	3001      	adds	r0, #1
 80063c4:	d0e6      	beq.n	8006394 <_printf_common+0xa4>
 80063c6:	3601      	adds	r6, #1
 80063c8:	e7d9      	b.n	800637e <_printf_common+0x8e>
	...

080063cc <_printf_i>:
 80063cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063d0:	7e0f      	ldrb	r7, [r1, #24]
 80063d2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80063d4:	2f78      	cmp	r7, #120	@ 0x78
 80063d6:	4691      	mov	r9, r2
 80063d8:	4680      	mov	r8, r0
 80063da:	460c      	mov	r4, r1
 80063dc:	469a      	mov	sl, r3
 80063de:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80063e2:	d807      	bhi.n	80063f4 <_printf_i+0x28>
 80063e4:	2f62      	cmp	r7, #98	@ 0x62
 80063e6:	d80a      	bhi.n	80063fe <_printf_i+0x32>
 80063e8:	2f00      	cmp	r7, #0
 80063ea:	f000 80d2 	beq.w	8006592 <_printf_i+0x1c6>
 80063ee:	2f58      	cmp	r7, #88	@ 0x58
 80063f0:	f000 80b9 	beq.w	8006566 <_printf_i+0x19a>
 80063f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80063f8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80063fc:	e03a      	b.n	8006474 <_printf_i+0xa8>
 80063fe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006402:	2b15      	cmp	r3, #21
 8006404:	d8f6      	bhi.n	80063f4 <_printf_i+0x28>
 8006406:	a101      	add	r1, pc, #4	@ (adr r1, 800640c <_printf_i+0x40>)
 8006408:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800640c:	08006465 	.word	0x08006465
 8006410:	08006479 	.word	0x08006479
 8006414:	080063f5 	.word	0x080063f5
 8006418:	080063f5 	.word	0x080063f5
 800641c:	080063f5 	.word	0x080063f5
 8006420:	080063f5 	.word	0x080063f5
 8006424:	08006479 	.word	0x08006479
 8006428:	080063f5 	.word	0x080063f5
 800642c:	080063f5 	.word	0x080063f5
 8006430:	080063f5 	.word	0x080063f5
 8006434:	080063f5 	.word	0x080063f5
 8006438:	08006579 	.word	0x08006579
 800643c:	080064a3 	.word	0x080064a3
 8006440:	08006533 	.word	0x08006533
 8006444:	080063f5 	.word	0x080063f5
 8006448:	080063f5 	.word	0x080063f5
 800644c:	0800659b 	.word	0x0800659b
 8006450:	080063f5 	.word	0x080063f5
 8006454:	080064a3 	.word	0x080064a3
 8006458:	080063f5 	.word	0x080063f5
 800645c:	080063f5 	.word	0x080063f5
 8006460:	0800653b 	.word	0x0800653b
 8006464:	6833      	ldr	r3, [r6, #0]
 8006466:	1d1a      	adds	r2, r3, #4
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	6032      	str	r2, [r6, #0]
 800646c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006470:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006474:	2301      	movs	r3, #1
 8006476:	e09d      	b.n	80065b4 <_printf_i+0x1e8>
 8006478:	6833      	ldr	r3, [r6, #0]
 800647a:	6820      	ldr	r0, [r4, #0]
 800647c:	1d19      	adds	r1, r3, #4
 800647e:	6031      	str	r1, [r6, #0]
 8006480:	0606      	lsls	r6, r0, #24
 8006482:	d501      	bpl.n	8006488 <_printf_i+0xbc>
 8006484:	681d      	ldr	r5, [r3, #0]
 8006486:	e003      	b.n	8006490 <_printf_i+0xc4>
 8006488:	0645      	lsls	r5, r0, #25
 800648a:	d5fb      	bpl.n	8006484 <_printf_i+0xb8>
 800648c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006490:	2d00      	cmp	r5, #0
 8006492:	da03      	bge.n	800649c <_printf_i+0xd0>
 8006494:	232d      	movs	r3, #45	@ 0x2d
 8006496:	426d      	negs	r5, r5
 8006498:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800649c:	4859      	ldr	r0, [pc, #356]	@ (8006604 <_printf_i+0x238>)
 800649e:	230a      	movs	r3, #10
 80064a0:	e011      	b.n	80064c6 <_printf_i+0xfa>
 80064a2:	6821      	ldr	r1, [r4, #0]
 80064a4:	6833      	ldr	r3, [r6, #0]
 80064a6:	0608      	lsls	r0, r1, #24
 80064a8:	f853 5b04 	ldr.w	r5, [r3], #4
 80064ac:	d402      	bmi.n	80064b4 <_printf_i+0xe8>
 80064ae:	0649      	lsls	r1, r1, #25
 80064b0:	bf48      	it	mi
 80064b2:	b2ad      	uxthmi	r5, r5
 80064b4:	2f6f      	cmp	r7, #111	@ 0x6f
 80064b6:	4853      	ldr	r0, [pc, #332]	@ (8006604 <_printf_i+0x238>)
 80064b8:	6033      	str	r3, [r6, #0]
 80064ba:	bf14      	ite	ne
 80064bc:	230a      	movne	r3, #10
 80064be:	2308      	moveq	r3, #8
 80064c0:	2100      	movs	r1, #0
 80064c2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80064c6:	6866      	ldr	r6, [r4, #4]
 80064c8:	60a6      	str	r6, [r4, #8]
 80064ca:	2e00      	cmp	r6, #0
 80064cc:	bfa2      	ittt	ge
 80064ce:	6821      	ldrge	r1, [r4, #0]
 80064d0:	f021 0104 	bicge.w	r1, r1, #4
 80064d4:	6021      	strge	r1, [r4, #0]
 80064d6:	b90d      	cbnz	r5, 80064dc <_printf_i+0x110>
 80064d8:	2e00      	cmp	r6, #0
 80064da:	d04b      	beq.n	8006574 <_printf_i+0x1a8>
 80064dc:	4616      	mov	r6, r2
 80064de:	fbb5 f1f3 	udiv	r1, r5, r3
 80064e2:	fb03 5711 	mls	r7, r3, r1, r5
 80064e6:	5dc7      	ldrb	r7, [r0, r7]
 80064e8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80064ec:	462f      	mov	r7, r5
 80064ee:	42bb      	cmp	r3, r7
 80064f0:	460d      	mov	r5, r1
 80064f2:	d9f4      	bls.n	80064de <_printf_i+0x112>
 80064f4:	2b08      	cmp	r3, #8
 80064f6:	d10b      	bne.n	8006510 <_printf_i+0x144>
 80064f8:	6823      	ldr	r3, [r4, #0]
 80064fa:	07df      	lsls	r7, r3, #31
 80064fc:	d508      	bpl.n	8006510 <_printf_i+0x144>
 80064fe:	6923      	ldr	r3, [r4, #16]
 8006500:	6861      	ldr	r1, [r4, #4]
 8006502:	4299      	cmp	r1, r3
 8006504:	bfde      	ittt	le
 8006506:	2330      	movle	r3, #48	@ 0x30
 8006508:	f806 3c01 	strble.w	r3, [r6, #-1]
 800650c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006510:	1b92      	subs	r2, r2, r6
 8006512:	6122      	str	r2, [r4, #16]
 8006514:	f8cd a000 	str.w	sl, [sp]
 8006518:	464b      	mov	r3, r9
 800651a:	aa03      	add	r2, sp, #12
 800651c:	4621      	mov	r1, r4
 800651e:	4640      	mov	r0, r8
 8006520:	f7ff fee6 	bl	80062f0 <_printf_common>
 8006524:	3001      	adds	r0, #1
 8006526:	d14a      	bne.n	80065be <_printf_i+0x1f2>
 8006528:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800652c:	b004      	add	sp, #16
 800652e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006532:	6823      	ldr	r3, [r4, #0]
 8006534:	f043 0320 	orr.w	r3, r3, #32
 8006538:	6023      	str	r3, [r4, #0]
 800653a:	4833      	ldr	r0, [pc, #204]	@ (8006608 <_printf_i+0x23c>)
 800653c:	2778      	movs	r7, #120	@ 0x78
 800653e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006542:	6823      	ldr	r3, [r4, #0]
 8006544:	6831      	ldr	r1, [r6, #0]
 8006546:	061f      	lsls	r7, r3, #24
 8006548:	f851 5b04 	ldr.w	r5, [r1], #4
 800654c:	d402      	bmi.n	8006554 <_printf_i+0x188>
 800654e:	065f      	lsls	r7, r3, #25
 8006550:	bf48      	it	mi
 8006552:	b2ad      	uxthmi	r5, r5
 8006554:	6031      	str	r1, [r6, #0]
 8006556:	07d9      	lsls	r1, r3, #31
 8006558:	bf44      	itt	mi
 800655a:	f043 0320 	orrmi.w	r3, r3, #32
 800655e:	6023      	strmi	r3, [r4, #0]
 8006560:	b11d      	cbz	r5, 800656a <_printf_i+0x19e>
 8006562:	2310      	movs	r3, #16
 8006564:	e7ac      	b.n	80064c0 <_printf_i+0xf4>
 8006566:	4827      	ldr	r0, [pc, #156]	@ (8006604 <_printf_i+0x238>)
 8006568:	e7e9      	b.n	800653e <_printf_i+0x172>
 800656a:	6823      	ldr	r3, [r4, #0]
 800656c:	f023 0320 	bic.w	r3, r3, #32
 8006570:	6023      	str	r3, [r4, #0]
 8006572:	e7f6      	b.n	8006562 <_printf_i+0x196>
 8006574:	4616      	mov	r6, r2
 8006576:	e7bd      	b.n	80064f4 <_printf_i+0x128>
 8006578:	6833      	ldr	r3, [r6, #0]
 800657a:	6825      	ldr	r5, [r4, #0]
 800657c:	6961      	ldr	r1, [r4, #20]
 800657e:	1d18      	adds	r0, r3, #4
 8006580:	6030      	str	r0, [r6, #0]
 8006582:	062e      	lsls	r6, r5, #24
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	d501      	bpl.n	800658c <_printf_i+0x1c0>
 8006588:	6019      	str	r1, [r3, #0]
 800658a:	e002      	b.n	8006592 <_printf_i+0x1c6>
 800658c:	0668      	lsls	r0, r5, #25
 800658e:	d5fb      	bpl.n	8006588 <_printf_i+0x1bc>
 8006590:	8019      	strh	r1, [r3, #0]
 8006592:	2300      	movs	r3, #0
 8006594:	6123      	str	r3, [r4, #16]
 8006596:	4616      	mov	r6, r2
 8006598:	e7bc      	b.n	8006514 <_printf_i+0x148>
 800659a:	6833      	ldr	r3, [r6, #0]
 800659c:	1d1a      	adds	r2, r3, #4
 800659e:	6032      	str	r2, [r6, #0]
 80065a0:	681e      	ldr	r6, [r3, #0]
 80065a2:	6862      	ldr	r2, [r4, #4]
 80065a4:	2100      	movs	r1, #0
 80065a6:	4630      	mov	r0, r6
 80065a8:	f7f9 fe1a 	bl	80001e0 <memchr>
 80065ac:	b108      	cbz	r0, 80065b2 <_printf_i+0x1e6>
 80065ae:	1b80      	subs	r0, r0, r6
 80065b0:	6060      	str	r0, [r4, #4]
 80065b2:	6863      	ldr	r3, [r4, #4]
 80065b4:	6123      	str	r3, [r4, #16]
 80065b6:	2300      	movs	r3, #0
 80065b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80065bc:	e7aa      	b.n	8006514 <_printf_i+0x148>
 80065be:	6923      	ldr	r3, [r4, #16]
 80065c0:	4632      	mov	r2, r6
 80065c2:	4649      	mov	r1, r9
 80065c4:	4640      	mov	r0, r8
 80065c6:	47d0      	blx	sl
 80065c8:	3001      	adds	r0, #1
 80065ca:	d0ad      	beq.n	8006528 <_printf_i+0x15c>
 80065cc:	6823      	ldr	r3, [r4, #0]
 80065ce:	079b      	lsls	r3, r3, #30
 80065d0:	d413      	bmi.n	80065fa <_printf_i+0x22e>
 80065d2:	68e0      	ldr	r0, [r4, #12]
 80065d4:	9b03      	ldr	r3, [sp, #12]
 80065d6:	4298      	cmp	r0, r3
 80065d8:	bfb8      	it	lt
 80065da:	4618      	movlt	r0, r3
 80065dc:	e7a6      	b.n	800652c <_printf_i+0x160>
 80065de:	2301      	movs	r3, #1
 80065e0:	4632      	mov	r2, r6
 80065e2:	4649      	mov	r1, r9
 80065e4:	4640      	mov	r0, r8
 80065e6:	47d0      	blx	sl
 80065e8:	3001      	adds	r0, #1
 80065ea:	d09d      	beq.n	8006528 <_printf_i+0x15c>
 80065ec:	3501      	adds	r5, #1
 80065ee:	68e3      	ldr	r3, [r4, #12]
 80065f0:	9903      	ldr	r1, [sp, #12]
 80065f2:	1a5b      	subs	r3, r3, r1
 80065f4:	42ab      	cmp	r3, r5
 80065f6:	dcf2      	bgt.n	80065de <_printf_i+0x212>
 80065f8:	e7eb      	b.n	80065d2 <_printf_i+0x206>
 80065fa:	2500      	movs	r5, #0
 80065fc:	f104 0619 	add.w	r6, r4, #25
 8006600:	e7f5      	b.n	80065ee <_printf_i+0x222>
 8006602:	bf00      	nop
 8006604:	08008c6a 	.word	0x08008c6a
 8006608:	08008c7b 	.word	0x08008c7b

0800660c <std>:
 800660c:	2300      	movs	r3, #0
 800660e:	b510      	push	{r4, lr}
 8006610:	4604      	mov	r4, r0
 8006612:	e9c0 3300 	strd	r3, r3, [r0]
 8006616:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800661a:	6083      	str	r3, [r0, #8]
 800661c:	8181      	strh	r1, [r0, #12]
 800661e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006620:	81c2      	strh	r2, [r0, #14]
 8006622:	6183      	str	r3, [r0, #24]
 8006624:	4619      	mov	r1, r3
 8006626:	2208      	movs	r2, #8
 8006628:	305c      	adds	r0, #92	@ 0x5c
 800662a:	f000 f90e 	bl	800684a <memset>
 800662e:	4b0d      	ldr	r3, [pc, #52]	@ (8006664 <std+0x58>)
 8006630:	6263      	str	r3, [r4, #36]	@ 0x24
 8006632:	4b0d      	ldr	r3, [pc, #52]	@ (8006668 <std+0x5c>)
 8006634:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006636:	4b0d      	ldr	r3, [pc, #52]	@ (800666c <std+0x60>)
 8006638:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800663a:	4b0d      	ldr	r3, [pc, #52]	@ (8006670 <std+0x64>)
 800663c:	6323      	str	r3, [r4, #48]	@ 0x30
 800663e:	4b0d      	ldr	r3, [pc, #52]	@ (8006674 <std+0x68>)
 8006640:	6224      	str	r4, [r4, #32]
 8006642:	429c      	cmp	r4, r3
 8006644:	d006      	beq.n	8006654 <std+0x48>
 8006646:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800664a:	4294      	cmp	r4, r2
 800664c:	d002      	beq.n	8006654 <std+0x48>
 800664e:	33d0      	adds	r3, #208	@ 0xd0
 8006650:	429c      	cmp	r4, r3
 8006652:	d105      	bne.n	8006660 <std+0x54>
 8006654:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800665c:	f000 b972 	b.w	8006944 <__retarget_lock_init_recursive>
 8006660:	bd10      	pop	{r4, pc}
 8006662:	bf00      	nop
 8006664:	080067c5 	.word	0x080067c5
 8006668:	080067e7 	.word	0x080067e7
 800666c:	0800681f 	.word	0x0800681f
 8006670:	08006843 	.word	0x08006843
 8006674:	20000390 	.word	0x20000390

08006678 <stdio_exit_handler>:
 8006678:	4a02      	ldr	r2, [pc, #8]	@ (8006684 <stdio_exit_handler+0xc>)
 800667a:	4903      	ldr	r1, [pc, #12]	@ (8006688 <stdio_exit_handler+0x10>)
 800667c:	4803      	ldr	r0, [pc, #12]	@ (800668c <stdio_exit_handler+0x14>)
 800667e:	f000 b869 	b.w	8006754 <_fwalk_sglue>
 8006682:	bf00      	nop
 8006684:	20000010 	.word	0x20000010
 8006688:	08008279 	.word	0x08008279
 800668c:	20000020 	.word	0x20000020

08006690 <cleanup_stdio>:
 8006690:	6841      	ldr	r1, [r0, #4]
 8006692:	4b0c      	ldr	r3, [pc, #48]	@ (80066c4 <cleanup_stdio+0x34>)
 8006694:	4299      	cmp	r1, r3
 8006696:	b510      	push	{r4, lr}
 8006698:	4604      	mov	r4, r0
 800669a:	d001      	beq.n	80066a0 <cleanup_stdio+0x10>
 800669c:	f001 fdec 	bl	8008278 <_fflush_r>
 80066a0:	68a1      	ldr	r1, [r4, #8]
 80066a2:	4b09      	ldr	r3, [pc, #36]	@ (80066c8 <cleanup_stdio+0x38>)
 80066a4:	4299      	cmp	r1, r3
 80066a6:	d002      	beq.n	80066ae <cleanup_stdio+0x1e>
 80066a8:	4620      	mov	r0, r4
 80066aa:	f001 fde5 	bl	8008278 <_fflush_r>
 80066ae:	68e1      	ldr	r1, [r4, #12]
 80066b0:	4b06      	ldr	r3, [pc, #24]	@ (80066cc <cleanup_stdio+0x3c>)
 80066b2:	4299      	cmp	r1, r3
 80066b4:	d004      	beq.n	80066c0 <cleanup_stdio+0x30>
 80066b6:	4620      	mov	r0, r4
 80066b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066bc:	f001 bddc 	b.w	8008278 <_fflush_r>
 80066c0:	bd10      	pop	{r4, pc}
 80066c2:	bf00      	nop
 80066c4:	20000390 	.word	0x20000390
 80066c8:	200003f8 	.word	0x200003f8
 80066cc:	20000460 	.word	0x20000460

080066d0 <global_stdio_init.part.0>:
 80066d0:	b510      	push	{r4, lr}
 80066d2:	4b0b      	ldr	r3, [pc, #44]	@ (8006700 <global_stdio_init.part.0+0x30>)
 80066d4:	4c0b      	ldr	r4, [pc, #44]	@ (8006704 <global_stdio_init.part.0+0x34>)
 80066d6:	4a0c      	ldr	r2, [pc, #48]	@ (8006708 <global_stdio_init.part.0+0x38>)
 80066d8:	601a      	str	r2, [r3, #0]
 80066da:	4620      	mov	r0, r4
 80066dc:	2200      	movs	r2, #0
 80066de:	2104      	movs	r1, #4
 80066e0:	f7ff ff94 	bl	800660c <std>
 80066e4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80066e8:	2201      	movs	r2, #1
 80066ea:	2109      	movs	r1, #9
 80066ec:	f7ff ff8e 	bl	800660c <std>
 80066f0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80066f4:	2202      	movs	r2, #2
 80066f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066fa:	2112      	movs	r1, #18
 80066fc:	f7ff bf86 	b.w	800660c <std>
 8006700:	200004c8 	.word	0x200004c8
 8006704:	20000390 	.word	0x20000390
 8006708:	08006679 	.word	0x08006679

0800670c <__sfp_lock_acquire>:
 800670c:	4801      	ldr	r0, [pc, #4]	@ (8006714 <__sfp_lock_acquire+0x8>)
 800670e:	f000 b91a 	b.w	8006946 <__retarget_lock_acquire_recursive>
 8006712:	bf00      	nop
 8006714:	200004d1 	.word	0x200004d1

08006718 <__sfp_lock_release>:
 8006718:	4801      	ldr	r0, [pc, #4]	@ (8006720 <__sfp_lock_release+0x8>)
 800671a:	f000 b915 	b.w	8006948 <__retarget_lock_release_recursive>
 800671e:	bf00      	nop
 8006720:	200004d1 	.word	0x200004d1

08006724 <__sinit>:
 8006724:	b510      	push	{r4, lr}
 8006726:	4604      	mov	r4, r0
 8006728:	f7ff fff0 	bl	800670c <__sfp_lock_acquire>
 800672c:	6a23      	ldr	r3, [r4, #32]
 800672e:	b11b      	cbz	r3, 8006738 <__sinit+0x14>
 8006730:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006734:	f7ff bff0 	b.w	8006718 <__sfp_lock_release>
 8006738:	4b04      	ldr	r3, [pc, #16]	@ (800674c <__sinit+0x28>)
 800673a:	6223      	str	r3, [r4, #32]
 800673c:	4b04      	ldr	r3, [pc, #16]	@ (8006750 <__sinit+0x2c>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d1f5      	bne.n	8006730 <__sinit+0xc>
 8006744:	f7ff ffc4 	bl	80066d0 <global_stdio_init.part.0>
 8006748:	e7f2      	b.n	8006730 <__sinit+0xc>
 800674a:	bf00      	nop
 800674c:	08006691 	.word	0x08006691
 8006750:	200004c8 	.word	0x200004c8

08006754 <_fwalk_sglue>:
 8006754:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006758:	4607      	mov	r7, r0
 800675a:	4688      	mov	r8, r1
 800675c:	4614      	mov	r4, r2
 800675e:	2600      	movs	r6, #0
 8006760:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006764:	f1b9 0901 	subs.w	r9, r9, #1
 8006768:	d505      	bpl.n	8006776 <_fwalk_sglue+0x22>
 800676a:	6824      	ldr	r4, [r4, #0]
 800676c:	2c00      	cmp	r4, #0
 800676e:	d1f7      	bne.n	8006760 <_fwalk_sglue+0xc>
 8006770:	4630      	mov	r0, r6
 8006772:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006776:	89ab      	ldrh	r3, [r5, #12]
 8006778:	2b01      	cmp	r3, #1
 800677a:	d907      	bls.n	800678c <_fwalk_sglue+0x38>
 800677c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006780:	3301      	adds	r3, #1
 8006782:	d003      	beq.n	800678c <_fwalk_sglue+0x38>
 8006784:	4629      	mov	r1, r5
 8006786:	4638      	mov	r0, r7
 8006788:	47c0      	blx	r8
 800678a:	4306      	orrs	r6, r0
 800678c:	3568      	adds	r5, #104	@ 0x68
 800678e:	e7e9      	b.n	8006764 <_fwalk_sglue+0x10>

08006790 <iprintf>:
 8006790:	b40f      	push	{r0, r1, r2, r3}
 8006792:	b507      	push	{r0, r1, r2, lr}
 8006794:	4906      	ldr	r1, [pc, #24]	@ (80067b0 <iprintf+0x20>)
 8006796:	ab04      	add	r3, sp, #16
 8006798:	6808      	ldr	r0, [r1, #0]
 800679a:	f853 2b04 	ldr.w	r2, [r3], #4
 800679e:	6881      	ldr	r1, [r0, #8]
 80067a0:	9301      	str	r3, [sp, #4]
 80067a2:	f001 fbcd 	bl	8007f40 <_vfiprintf_r>
 80067a6:	b003      	add	sp, #12
 80067a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80067ac:	b004      	add	sp, #16
 80067ae:	4770      	bx	lr
 80067b0:	2000001c 	.word	0x2000001c

080067b4 <putchar>:
 80067b4:	4b02      	ldr	r3, [pc, #8]	@ (80067c0 <putchar+0xc>)
 80067b6:	4601      	mov	r1, r0
 80067b8:	6818      	ldr	r0, [r3, #0]
 80067ba:	6882      	ldr	r2, [r0, #8]
 80067bc:	f001 bd84 	b.w	80082c8 <_putc_r>
 80067c0:	2000001c 	.word	0x2000001c

080067c4 <__sread>:
 80067c4:	b510      	push	{r4, lr}
 80067c6:	460c      	mov	r4, r1
 80067c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067cc:	f000 f86c 	bl	80068a8 <_read_r>
 80067d0:	2800      	cmp	r0, #0
 80067d2:	bfab      	itete	ge
 80067d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80067d6:	89a3      	ldrhlt	r3, [r4, #12]
 80067d8:	181b      	addge	r3, r3, r0
 80067da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80067de:	bfac      	ite	ge
 80067e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80067e2:	81a3      	strhlt	r3, [r4, #12]
 80067e4:	bd10      	pop	{r4, pc}

080067e6 <__swrite>:
 80067e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067ea:	461f      	mov	r7, r3
 80067ec:	898b      	ldrh	r3, [r1, #12]
 80067ee:	05db      	lsls	r3, r3, #23
 80067f0:	4605      	mov	r5, r0
 80067f2:	460c      	mov	r4, r1
 80067f4:	4616      	mov	r6, r2
 80067f6:	d505      	bpl.n	8006804 <__swrite+0x1e>
 80067f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067fc:	2302      	movs	r3, #2
 80067fe:	2200      	movs	r2, #0
 8006800:	f000 f840 	bl	8006884 <_lseek_r>
 8006804:	89a3      	ldrh	r3, [r4, #12]
 8006806:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800680a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800680e:	81a3      	strh	r3, [r4, #12]
 8006810:	4632      	mov	r2, r6
 8006812:	463b      	mov	r3, r7
 8006814:	4628      	mov	r0, r5
 8006816:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800681a:	f000 b857 	b.w	80068cc <_write_r>

0800681e <__sseek>:
 800681e:	b510      	push	{r4, lr}
 8006820:	460c      	mov	r4, r1
 8006822:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006826:	f000 f82d 	bl	8006884 <_lseek_r>
 800682a:	1c43      	adds	r3, r0, #1
 800682c:	89a3      	ldrh	r3, [r4, #12]
 800682e:	bf15      	itete	ne
 8006830:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006832:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006836:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800683a:	81a3      	strheq	r3, [r4, #12]
 800683c:	bf18      	it	ne
 800683e:	81a3      	strhne	r3, [r4, #12]
 8006840:	bd10      	pop	{r4, pc}

08006842 <__sclose>:
 8006842:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006846:	f000 b80d 	b.w	8006864 <_close_r>

0800684a <memset>:
 800684a:	4402      	add	r2, r0
 800684c:	4603      	mov	r3, r0
 800684e:	4293      	cmp	r3, r2
 8006850:	d100      	bne.n	8006854 <memset+0xa>
 8006852:	4770      	bx	lr
 8006854:	f803 1b01 	strb.w	r1, [r3], #1
 8006858:	e7f9      	b.n	800684e <memset+0x4>
	...

0800685c <_localeconv_r>:
 800685c:	4800      	ldr	r0, [pc, #0]	@ (8006860 <_localeconv_r+0x4>)
 800685e:	4770      	bx	lr
 8006860:	2000015c 	.word	0x2000015c

08006864 <_close_r>:
 8006864:	b538      	push	{r3, r4, r5, lr}
 8006866:	4d06      	ldr	r5, [pc, #24]	@ (8006880 <_close_r+0x1c>)
 8006868:	2300      	movs	r3, #0
 800686a:	4604      	mov	r4, r0
 800686c:	4608      	mov	r0, r1
 800686e:	602b      	str	r3, [r5, #0]
 8006870:	f7fb fadb 	bl	8001e2a <_close>
 8006874:	1c43      	adds	r3, r0, #1
 8006876:	d102      	bne.n	800687e <_close_r+0x1a>
 8006878:	682b      	ldr	r3, [r5, #0]
 800687a:	b103      	cbz	r3, 800687e <_close_r+0x1a>
 800687c:	6023      	str	r3, [r4, #0]
 800687e:	bd38      	pop	{r3, r4, r5, pc}
 8006880:	200004cc 	.word	0x200004cc

08006884 <_lseek_r>:
 8006884:	b538      	push	{r3, r4, r5, lr}
 8006886:	4d07      	ldr	r5, [pc, #28]	@ (80068a4 <_lseek_r+0x20>)
 8006888:	4604      	mov	r4, r0
 800688a:	4608      	mov	r0, r1
 800688c:	4611      	mov	r1, r2
 800688e:	2200      	movs	r2, #0
 8006890:	602a      	str	r2, [r5, #0]
 8006892:	461a      	mov	r2, r3
 8006894:	f7fb faf0 	bl	8001e78 <_lseek>
 8006898:	1c43      	adds	r3, r0, #1
 800689a:	d102      	bne.n	80068a2 <_lseek_r+0x1e>
 800689c:	682b      	ldr	r3, [r5, #0]
 800689e:	b103      	cbz	r3, 80068a2 <_lseek_r+0x1e>
 80068a0:	6023      	str	r3, [r4, #0]
 80068a2:	bd38      	pop	{r3, r4, r5, pc}
 80068a4:	200004cc 	.word	0x200004cc

080068a8 <_read_r>:
 80068a8:	b538      	push	{r3, r4, r5, lr}
 80068aa:	4d07      	ldr	r5, [pc, #28]	@ (80068c8 <_read_r+0x20>)
 80068ac:	4604      	mov	r4, r0
 80068ae:	4608      	mov	r0, r1
 80068b0:	4611      	mov	r1, r2
 80068b2:	2200      	movs	r2, #0
 80068b4:	602a      	str	r2, [r5, #0]
 80068b6:	461a      	mov	r2, r3
 80068b8:	f7fb fa7e 	bl	8001db8 <_read>
 80068bc:	1c43      	adds	r3, r0, #1
 80068be:	d102      	bne.n	80068c6 <_read_r+0x1e>
 80068c0:	682b      	ldr	r3, [r5, #0]
 80068c2:	b103      	cbz	r3, 80068c6 <_read_r+0x1e>
 80068c4:	6023      	str	r3, [r4, #0]
 80068c6:	bd38      	pop	{r3, r4, r5, pc}
 80068c8:	200004cc 	.word	0x200004cc

080068cc <_write_r>:
 80068cc:	b538      	push	{r3, r4, r5, lr}
 80068ce:	4d07      	ldr	r5, [pc, #28]	@ (80068ec <_write_r+0x20>)
 80068d0:	4604      	mov	r4, r0
 80068d2:	4608      	mov	r0, r1
 80068d4:	4611      	mov	r1, r2
 80068d6:	2200      	movs	r2, #0
 80068d8:	602a      	str	r2, [r5, #0]
 80068da:	461a      	mov	r2, r3
 80068dc:	f7fb fa89 	bl	8001df2 <_write>
 80068e0:	1c43      	adds	r3, r0, #1
 80068e2:	d102      	bne.n	80068ea <_write_r+0x1e>
 80068e4:	682b      	ldr	r3, [r5, #0]
 80068e6:	b103      	cbz	r3, 80068ea <_write_r+0x1e>
 80068e8:	6023      	str	r3, [r4, #0]
 80068ea:	bd38      	pop	{r3, r4, r5, pc}
 80068ec:	200004cc 	.word	0x200004cc

080068f0 <__errno>:
 80068f0:	4b01      	ldr	r3, [pc, #4]	@ (80068f8 <__errno+0x8>)
 80068f2:	6818      	ldr	r0, [r3, #0]
 80068f4:	4770      	bx	lr
 80068f6:	bf00      	nop
 80068f8:	2000001c 	.word	0x2000001c

080068fc <__libc_init_array>:
 80068fc:	b570      	push	{r4, r5, r6, lr}
 80068fe:	4d0d      	ldr	r5, [pc, #52]	@ (8006934 <__libc_init_array+0x38>)
 8006900:	4c0d      	ldr	r4, [pc, #52]	@ (8006938 <__libc_init_array+0x3c>)
 8006902:	1b64      	subs	r4, r4, r5
 8006904:	10a4      	asrs	r4, r4, #2
 8006906:	2600      	movs	r6, #0
 8006908:	42a6      	cmp	r6, r4
 800690a:	d109      	bne.n	8006920 <__libc_init_array+0x24>
 800690c:	4d0b      	ldr	r5, [pc, #44]	@ (800693c <__libc_init_array+0x40>)
 800690e:	4c0c      	ldr	r4, [pc, #48]	@ (8006940 <__libc_init_array+0x44>)
 8006910:	f002 f95e 	bl	8008bd0 <_init>
 8006914:	1b64      	subs	r4, r4, r5
 8006916:	10a4      	asrs	r4, r4, #2
 8006918:	2600      	movs	r6, #0
 800691a:	42a6      	cmp	r6, r4
 800691c:	d105      	bne.n	800692a <__libc_init_array+0x2e>
 800691e:	bd70      	pop	{r4, r5, r6, pc}
 8006920:	f855 3b04 	ldr.w	r3, [r5], #4
 8006924:	4798      	blx	r3
 8006926:	3601      	adds	r6, #1
 8006928:	e7ee      	b.n	8006908 <__libc_init_array+0xc>
 800692a:	f855 3b04 	ldr.w	r3, [r5], #4
 800692e:	4798      	blx	r3
 8006930:	3601      	adds	r6, #1
 8006932:	e7f2      	b.n	800691a <__libc_init_array+0x1e>
 8006934:	08009040 	.word	0x08009040
 8006938:	08009040 	.word	0x08009040
 800693c:	08009040 	.word	0x08009040
 8006940:	08009044 	.word	0x08009044

08006944 <__retarget_lock_init_recursive>:
 8006944:	4770      	bx	lr

08006946 <__retarget_lock_acquire_recursive>:
 8006946:	4770      	bx	lr

08006948 <__retarget_lock_release_recursive>:
 8006948:	4770      	bx	lr

0800694a <quorem>:
 800694a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800694e:	6903      	ldr	r3, [r0, #16]
 8006950:	690c      	ldr	r4, [r1, #16]
 8006952:	42a3      	cmp	r3, r4
 8006954:	4607      	mov	r7, r0
 8006956:	db7e      	blt.n	8006a56 <quorem+0x10c>
 8006958:	3c01      	subs	r4, #1
 800695a:	f101 0814 	add.w	r8, r1, #20
 800695e:	00a3      	lsls	r3, r4, #2
 8006960:	f100 0514 	add.w	r5, r0, #20
 8006964:	9300      	str	r3, [sp, #0]
 8006966:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800696a:	9301      	str	r3, [sp, #4]
 800696c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006970:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006974:	3301      	adds	r3, #1
 8006976:	429a      	cmp	r2, r3
 8006978:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800697c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006980:	d32e      	bcc.n	80069e0 <quorem+0x96>
 8006982:	f04f 0a00 	mov.w	sl, #0
 8006986:	46c4      	mov	ip, r8
 8006988:	46ae      	mov	lr, r5
 800698a:	46d3      	mov	fp, sl
 800698c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006990:	b298      	uxth	r0, r3
 8006992:	fb06 a000 	mla	r0, r6, r0, sl
 8006996:	0c02      	lsrs	r2, r0, #16
 8006998:	0c1b      	lsrs	r3, r3, #16
 800699a:	fb06 2303 	mla	r3, r6, r3, r2
 800699e:	f8de 2000 	ldr.w	r2, [lr]
 80069a2:	b280      	uxth	r0, r0
 80069a4:	b292      	uxth	r2, r2
 80069a6:	1a12      	subs	r2, r2, r0
 80069a8:	445a      	add	r2, fp
 80069aa:	f8de 0000 	ldr.w	r0, [lr]
 80069ae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80069b8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80069bc:	b292      	uxth	r2, r2
 80069be:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80069c2:	45e1      	cmp	r9, ip
 80069c4:	f84e 2b04 	str.w	r2, [lr], #4
 80069c8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80069cc:	d2de      	bcs.n	800698c <quorem+0x42>
 80069ce:	9b00      	ldr	r3, [sp, #0]
 80069d0:	58eb      	ldr	r3, [r5, r3]
 80069d2:	b92b      	cbnz	r3, 80069e0 <quorem+0x96>
 80069d4:	9b01      	ldr	r3, [sp, #4]
 80069d6:	3b04      	subs	r3, #4
 80069d8:	429d      	cmp	r5, r3
 80069da:	461a      	mov	r2, r3
 80069dc:	d32f      	bcc.n	8006a3e <quorem+0xf4>
 80069de:	613c      	str	r4, [r7, #16]
 80069e0:	4638      	mov	r0, r7
 80069e2:	f001 f97b 	bl	8007cdc <__mcmp>
 80069e6:	2800      	cmp	r0, #0
 80069e8:	db25      	blt.n	8006a36 <quorem+0xec>
 80069ea:	4629      	mov	r1, r5
 80069ec:	2000      	movs	r0, #0
 80069ee:	f858 2b04 	ldr.w	r2, [r8], #4
 80069f2:	f8d1 c000 	ldr.w	ip, [r1]
 80069f6:	fa1f fe82 	uxth.w	lr, r2
 80069fa:	fa1f f38c 	uxth.w	r3, ip
 80069fe:	eba3 030e 	sub.w	r3, r3, lr
 8006a02:	4403      	add	r3, r0
 8006a04:	0c12      	lsrs	r2, r2, #16
 8006a06:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006a0a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006a14:	45c1      	cmp	r9, r8
 8006a16:	f841 3b04 	str.w	r3, [r1], #4
 8006a1a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006a1e:	d2e6      	bcs.n	80069ee <quorem+0xa4>
 8006a20:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006a24:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006a28:	b922      	cbnz	r2, 8006a34 <quorem+0xea>
 8006a2a:	3b04      	subs	r3, #4
 8006a2c:	429d      	cmp	r5, r3
 8006a2e:	461a      	mov	r2, r3
 8006a30:	d30b      	bcc.n	8006a4a <quorem+0x100>
 8006a32:	613c      	str	r4, [r7, #16]
 8006a34:	3601      	adds	r6, #1
 8006a36:	4630      	mov	r0, r6
 8006a38:	b003      	add	sp, #12
 8006a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a3e:	6812      	ldr	r2, [r2, #0]
 8006a40:	3b04      	subs	r3, #4
 8006a42:	2a00      	cmp	r2, #0
 8006a44:	d1cb      	bne.n	80069de <quorem+0x94>
 8006a46:	3c01      	subs	r4, #1
 8006a48:	e7c6      	b.n	80069d8 <quorem+0x8e>
 8006a4a:	6812      	ldr	r2, [r2, #0]
 8006a4c:	3b04      	subs	r3, #4
 8006a4e:	2a00      	cmp	r2, #0
 8006a50:	d1ef      	bne.n	8006a32 <quorem+0xe8>
 8006a52:	3c01      	subs	r4, #1
 8006a54:	e7ea      	b.n	8006a2c <quorem+0xe2>
 8006a56:	2000      	movs	r0, #0
 8006a58:	e7ee      	b.n	8006a38 <quorem+0xee>
 8006a5a:	0000      	movs	r0, r0
 8006a5c:	0000      	movs	r0, r0
	...

08006a60 <_dtoa_r>:
 8006a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a64:	69c7      	ldr	r7, [r0, #28]
 8006a66:	b099      	sub	sp, #100	@ 0x64
 8006a68:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006a6c:	ec55 4b10 	vmov	r4, r5, d0
 8006a70:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006a72:	9109      	str	r1, [sp, #36]	@ 0x24
 8006a74:	4683      	mov	fp, r0
 8006a76:	920e      	str	r2, [sp, #56]	@ 0x38
 8006a78:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006a7a:	b97f      	cbnz	r7, 8006a9c <_dtoa_r+0x3c>
 8006a7c:	2010      	movs	r0, #16
 8006a7e:	f000 fdfd 	bl	800767c <malloc>
 8006a82:	4602      	mov	r2, r0
 8006a84:	f8cb 001c 	str.w	r0, [fp, #28]
 8006a88:	b920      	cbnz	r0, 8006a94 <_dtoa_r+0x34>
 8006a8a:	4ba7      	ldr	r3, [pc, #668]	@ (8006d28 <_dtoa_r+0x2c8>)
 8006a8c:	21ef      	movs	r1, #239	@ 0xef
 8006a8e:	48a7      	ldr	r0, [pc, #668]	@ (8006d2c <_dtoa_r+0x2cc>)
 8006a90:	f001 fd00 	bl	8008494 <__assert_func>
 8006a94:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006a98:	6007      	str	r7, [r0, #0]
 8006a9a:	60c7      	str	r7, [r0, #12]
 8006a9c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006aa0:	6819      	ldr	r1, [r3, #0]
 8006aa2:	b159      	cbz	r1, 8006abc <_dtoa_r+0x5c>
 8006aa4:	685a      	ldr	r2, [r3, #4]
 8006aa6:	604a      	str	r2, [r1, #4]
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	4093      	lsls	r3, r2
 8006aac:	608b      	str	r3, [r1, #8]
 8006aae:	4658      	mov	r0, fp
 8006ab0:	f000 feda 	bl	8007868 <_Bfree>
 8006ab4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	601a      	str	r2, [r3, #0]
 8006abc:	1e2b      	subs	r3, r5, #0
 8006abe:	bfb9      	ittee	lt
 8006ac0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006ac4:	9303      	strlt	r3, [sp, #12]
 8006ac6:	2300      	movge	r3, #0
 8006ac8:	6033      	strge	r3, [r6, #0]
 8006aca:	9f03      	ldr	r7, [sp, #12]
 8006acc:	4b98      	ldr	r3, [pc, #608]	@ (8006d30 <_dtoa_r+0x2d0>)
 8006ace:	bfbc      	itt	lt
 8006ad0:	2201      	movlt	r2, #1
 8006ad2:	6032      	strlt	r2, [r6, #0]
 8006ad4:	43bb      	bics	r3, r7
 8006ad6:	d112      	bne.n	8006afe <_dtoa_r+0x9e>
 8006ad8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006ada:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006ade:	6013      	str	r3, [r2, #0]
 8006ae0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006ae4:	4323      	orrs	r3, r4
 8006ae6:	f000 854d 	beq.w	8007584 <_dtoa_r+0xb24>
 8006aea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006aec:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006d44 <_dtoa_r+0x2e4>
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	f000 854f 	beq.w	8007594 <_dtoa_r+0xb34>
 8006af6:	f10a 0303 	add.w	r3, sl, #3
 8006afa:	f000 bd49 	b.w	8007590 <_dtoa_r+0xb30>
 8006afe:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006b02:	2200      	movs	r2, #0
 8006b04:	ec51 0b17 	vmov	r0, r1, d7
 8006b08:	2300      	movs	r3, #0
 8006b0a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006b0e:	f7f9 ffe3 	bl	8000ad8 <__aeabi_dcmpeq>
 8006b12:	4680      	mov	r8, r0
 8006b14:	b158      	cbz	r0, 8006b2e <_dtoa_r+0xce>
 8006b16:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006b18:	2301      	movs	r3, #1
 8006b1a:	6013      	str	r3, [r2, #0]
 8006b1c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006b1e:	b113      	cbz	r3, 8006b26 <_dtoa_r+0xc6>
 8006b20:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006b22:	4b84      	ldr	r3, [pc, #528]	@ (8006d34 <_dtoa_r+0x2d4>)
 8006b24:	6013      	str	r3, [r2, #0]
 8006b26:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006d48 <_dtoa_r+0x2e8>
 8006b2a:	f000 bd33 	b.w	8007594 <_dtoa_r+0xb34>
 8006b2e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006b32:	aa16      	add	r2, sp, #88	@ 0x58
 8006b34:	a917      	add	r1, sp, #92	@ 0x5c
 8006b36:	4658      	mov	r0, fp
 8006b38:	f001 f980 	bl	8007e3c <__d2b>
 8006b3c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006b40:	4681      	mov	r9, r0
 8006b42:	2e00      	cmp	r6, #0
 8006b44:	d077      	beq.n	8006c36 <_dtoa_r+0x1d6>
 8006b46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006b48:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006b4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006b54:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006b58:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006b5c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006b60:	4619      	mov	r1, r3
 8006b62:	2200      	movs	r2, #0
 8006b64:	4b74      	ldr	r3, [pc, #464]	@ (8006d38 <_dtoa_r+0x2d8>)
 8006b66:	f7f9 fb97 	bl	8000298 <__aeabi_dsub>
 8006b6a:	a369      	add	r3, pc, #420	@ (adr r3, 8006d10 <_dtoa_r+0x2b0>)
 8006b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b70:	f7f9 fd4a 	bl	8000608 <__aeabi_dmul>
 8006b74:	a368      	add	r3, pc, #416	@ (adr r3, 8006d18 <_dtoa_r+0x2b8>)
 8006b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b7a:	f7f9 fb8f 	bl	800029c <__adddf3>
 8006b7e:	4604      	mov	r4, r0
 8006b80:	4630      	mov	r0, r6
 8006b82:	460d      	mov	r5, r1
 8006b84:	f7f9 fcd6 	bl	8000534 <__aeabi_i2d>
 8006b88:	a365      	add	r3, pc, #404	@ (adr r3, 8006d20 <_dtoa_r+0x2c0>)
 8006b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b8e:	f7f9 fd3b 	bl	8000608 <__aeabi_dmul>
 8006b92:	4602      	mov	r2, r0
 8006b94:	460b      	mov	r3, r1
 8006b96:	4620      	mov	r0, r4
 8006b98:	4629      	mov	r1, r5
 8006b9a:	f7f9 fb7f 	bl	800029c <__adddf3>
 8006b9e:	4604      	mov	r4, r0
 8006ba0:	460d      	mov	r5, r1
 8006ba2:	f7f9 ffe1 	bl	8000b68 <__aeabi_d2iz>
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	4607      	mov	r7, r0
 8006baa:	2300      	movs	r3, #0
 8006bac:	4620      	mov	r0, r4
 8006bae:	4629      	mov	r1, r5
 8006bb0:	f7f9 ff9c 	bl	8000aec <__aeabi_dcmplt>
 8006bb4:	b140      	cbz	r0, 8006bc8 <_dtoa_r+0x168>
 8006bb6:	4638      	mov	r0, r7
 8006bb8:	f7f9 fcbc 	bl	8000534 <__aeabi_i2d>
 8006bbc:	4622      	mov	r2, r4
 8006bbe:	462b      	mov	r3, r5
 8006bc0:	f7f9 ff8a 	bl	8000ad8 <__aeabi_dcmpeq>
 8006bc4:	b900      	cbnz	r0, 8006bc8 <_dtoa_r+0x168>
 8006bc6:	3f01      	subs	r7, #1
 8006bc8:	2f16      	cmp	r7, #22
 8006bca:	d851      	bhi.n	8006c70 <_dtoa_r+0x210>
 8006bcc:	4b5b      	ldr	r3, [pc, #364]	@ (8006d3c <_dtoa_r+0x2dc>)
 8006bce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006bda:	f7f9 ff87 	bl	8000aec <__aeabi_dcmplt>
 8006bde:	2800      	cmp	r0, #0
 8006be0:	d048      	beq.n	8006c74 <_dtoa_r+0x214>
 8006be2:	3f01      	subs	r7, #1
 8006be4:	2300      	movs	r3, #0
 8006be6:	9312      	str	r3, [sp, #72]	@ 0x48
 8006be8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006bea:	1b9b      	subs	r3, r3, r6
 8006bec:	1e5a      	subs	r2, r3, #1
 8006bee:	bf44      	itt	mi
 8006bf0:	f1c3 0801 	rsbmi	r8, r3, #1
 8006bf4:	2300      	movmi	r3, #0
 8006bf6:	9208      	str	r2, [sp, #32]
 8006bf8:	bf54      	ite	pl
 8006bfa:	f04f 0800 	movpl.w	r8, #0
 8006bfe:	9308      	strmi	r3, [sp, #32]
 8006c00:	2f00      	cmp	r7, #0
 8006c02:	db39      	blt.n	8006c78 <_dtoa_r+0x218>
 8006c04:	9b08      	ldr	r3, [sp, #32]
 8006c06:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006c08:	443b      	add	r3, r7
 8006c0a:	9308      	str	r3, [sp, #32]
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c12:	2b09      	cmp	r3, #9
 8006c14:	d864      	bhi.n	8006ce0 <_dtoa_r+0x280>
 8006c16:	2b05      	cmp	r3, #5
 8006c18:	bfc4      	itt	gt
 8006c1a:	3b04      	subgt	r3, #4
 8006c1c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006c1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c20:	f1a3 0302 	sub.w	r3, r3, #2
 8006c24:	bfcc      	ite	gt
 8006c26:	2400      	movgt	r4, #0
 8006c28:	2401      	movle	r4, #1
 8006c2a:	2b03      	cmp	r3, #3
 8006c2c:	d863      	bhi.n	8006cf6 <_dtoa_r+0x296>
 8006c2e:	e8df f003 	tbb	[pc, r3]
 8006c32:	372a      	.short	0x372a
 8006c34:	5535      	.short	0x5535
 8006c36:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006c3a:	441e      	add	r6, r3
 8006c3c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006c40:	2b20      	cmp	r3, #32
 8006c42:	bfc1      	itttt	gt
 8006c44:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006c48:	409f      	lslgt	r7, r3
 8006c4a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006c4e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006c52:	bfd6      	itet	le
 8006c54:	f1c3 0320 	rsble	r3, r3, #32
 8006c58:	ea47 0003 	orrgt.w	r0, r7, r3
 8006c5c:	fa04 f003 	lslle.w	r0, r4, r3
 8006c60:	f7f9 fc58 	bl	8000514 <__aeabi_ui2d>
 8006c64:	2201      	movs	r2, #1
 8006c66:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006c6a:	3e01      	subs	r6, #1
 8006c6c:	9214      	str	r2, [sp, #80]	@ 0x50
 8006c6e:	e777      	b.n	8006b60 <_dtoa_r+0x100>
 8006c70:	2301      	movs	r3, #1
 8006c72:	e7b8      	b.n	8006be6 <_dtoa_r+0x186>
 8006c74:	9012      	str	r0, [sp, #72]	@ 0x48
 8006c76:	e7b7      	b.n	8006be8 <_dtoa_r+0x188>
 8006c78:	427b      	negs	r3, r7
 8006c7a:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	eba8 0807 	sub.w	r8, r8, r7
 8006c82:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006c84:	e7c4      	b.n	8006c10 <_dtoa_r+0x1b0>
 8006c86:	2300      	movs	r3, #0
 8006c88:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006c8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	dc35      	bgt.n	8006cfc <_dtoa_r+0x29c>
 8006c90:	2301      	movs	r3, #1
 8006c92:	9300      	str	r3, [sp, #0]
 8006c94:	9307      	str	r3, [sp, #28]
 8006c96:	461a      	mov	r2, r3
 8006c98:	920e      	str	r2, [sp, #56]	@ 0x38
 8006c9a:	e00b      	b.n	8006cb4 <_dtoa_r+0x254>
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	e7f3      	b.n	8006c88 <_dtoa_r+0x228>
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006ca4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ca6:	18fb      	adds	r3, r7, r3
 8006ca8:	9300      	str	r3, [sp, #0]
 8006caa:	3301      	adds	r3, #1
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	9307      	str	r3, [sp, #28]
 8006cb0:	bfb8      	it	lt
 8006cb2:	2301      	movlt	r3, #1
 8006cb4:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006cb8:	2100      	movs	r1, #0
 8006cba:	2204      	movs	r2, #4
 8006cbc:	f102 0514 	add.w	r5, r2, #20
 8006cc0:	429d      	cmp	r5, r3
 8006cc2:	d91f      	bls.n	8006d04 <_dtoa_r+0x2a4>
 8006cc4:	6041      	str	r1, [r0, #4]
 8006cc6:	4658      	mov	r0, fp
 8006cc8:	f000 fd8e 	bl	80077e8 <_Balloc>
 8006ccc:	4682      	mov	sl, r0
 8006cce:	2800      	cmp	r0, #0
 8006cd0:	d13c      	bne.n	8006d4c <_dtoa_r+0x2ec>
 8006cd2:	4b1b      	ldr	r3, [pc, #108]	@ (8006d40 <_dtoa_r+0x2e0>)
 8006cd4:	4602      	mov	r2, r0
 8006cd6:	f240 11af 	movw	r1, #431	@ 0x1af
 8006cda:	e6d8      	b.n	8006a8e <_dtoa_r+0x2e>
 8006cdc:	2301      	movs	r3, #1
 8006cde:	e7e0      	b.n	8006ca2 <_dtoa_r+0x242>
 8006ce0:	2401      	movs	r4, #1
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ce6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006ce8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006cec:	9300      	str	r3, [sp, #0]
 8006cee:	9307      	str	r3, [sp, #28]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	2312      	movs	r3, #18
 8006cf4:	e7d0      	b.n	8006c98 <_dtoa_r+0x238>
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006cfa:	e7f5      	b.n	8006ce8 <_dtoa_r+0x288>
 8006cfc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006cfe:	9300      	str	r3, [sp, #0]
 8006d00:	9307      	str	r3, [sp, #28]
 8006d02:	e7d7      	b.n	8006cb4 <_dtoa_r+0x254>
 8006d04:	3101      	adds	r1, #1
 8006d06:	0052      	lsls	r2, r2, #1
 8006d08:	e7d8      	b.n	8006cbc <_dtoa_r+0x25c>
 8006d0a:	bf00      	nop
 8006d0c:	f3af 8000 	nop.w
 8006d10:	636f4361 	.word	0x636f4361
 8006d14:	3fd287a7 	.word	0x3fd287a7
 8006d18:	8b60c8b3 	.word	0x8b60c8b3
 8006d1c:	3fc68a28 	.word	0x3fc68a28
 8006d20:	509f79fb 	.word	0x509f79fb
 8006d24:	3fd34413 	.word	0x3fd34413
 8006d28:	08008c99 	.word	0x08008c99
 8006d2c:	08008cb0 	.word	0x08008cb0
 8006d30:	7ff00000 	.word	0x7ff00000
 8006d34:	08008c69 	.word	0x08008c69
 8006d38:	3ff80000 	.word	0x3ff80000
 8006d3c:	08008da8 	.word	0x08008da8
 8006d40:	08008d08 	.word	0x08008d08
 8006d44:	08008c95 	.word	0x08008c95
 8006d48:	08008c68 	.word	0x08008c68
 8006d4c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006d50:	6018      	str	r0, [r3, #0]
 8006d52:	9b07      	ldr	r3, [sp, #28]
 8006d54:	2b0e      	cmp	r3, #14
 8006d56:	f200 80a4 	bhi.w	8006ea2 <_dtoa_r+0x442>
 8006d5a:	2c00      	cmp	r4, #0
 8006d5c:	f000 80a1 	beq.w	8006ea2 <_dtoa_r+0x442>
 8006d60:	2f00      	cmp	r7, #0
 8006d62:	dd33      	ble.n	8006dcc <_dtoa_r+0x36c>
 8006d64:	4bad      	ldr	r3, [pc, #692]	@ (800701c <_dtoa_r+0x5bc>)
 8006d66:	f007 020f 	and.w	r2, r7, #15
 8006d6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d6e:	ed93 7b00 	vldr	d7, [r3]
 8006d72:	05f8      	lsls	r0, r7, #23
 8006d74:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006d78:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006d7c:	d516      	bpl.n	8006dac <_dtoa_r+0x34c>
 8006d7e:	4ba8      	ldr	r3, [pc, #672]	@ (8007020 <_dtoa_r+0x5c0>)
 8006d80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006d84:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006d88:	f7f9 fd68 	bl	800085c <__aeabi_ddiv>
 8006d8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d90:	f004 040f 	and.w	r4, r4, #15
 8006d94:	2603      	movs	r6, #3
 8006d96:	4da2      	ldr	r5, [pc, #648]	@ (8007020 <_dtoa_r+0x5c0>)
 8006d98:	b954      	cbnz	r4, 8006db0 <_dtoa_r+0x350>
 8006d9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006da2:	f7f9 fd5b 	bl	800085c <__aeabi_ddiv>
 8006da6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006daa:	e028      	b.n	8006dfe <_dtoa_r+0x39e>
 8006dac:	2602      	movs	r6, #2
 8006dae:	e7f2      	b.n	8006d96 <_dtoa_r+0x336>
 8006db0:	07e1      	lsls	r1, r4, #31
 8006db2:	d508      	bpl.n	8006dc6 <_dtoa_r+0x366>
 8006db4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006db8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006dbc:	f7f9 fc24 	bl	8000608 <__aeabi_dmul>
 8006dc0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006dc4:	3601      	adds	r6, #1
 8006dc6:	1064      	asrs	r4, r4, #1
 8006dc8:	3508      	adds	r5, #8
 8006dca:	e7e5      	b.n	8006d98 <_dtoa_r+0x338>
 8006dcc:	f000 80d2 	beq.w	8006f74 <_dtoa_r+0x514>
 8006dd0:	427c      	negs	r4, r7
 8006dd2:	4b92      	ldr	r3, [pc, #584]	@ (800701c <_dtoa_r+0x5bc>)
 8006dd4:	4d92      	ldr	r5, [pc, #584]	@ (8007020 <_dtoa_r+0x5c0>)
 8006dd6:	f004 020f 	and.w	r2, r4, #15
 8006dda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006de2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006de6:	f7f9 fc0f 	bl	8000608 <__aeabi_dmul>
 8006dea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006dee:	1124      	asrs	r4, r4, #4
 8006df0:	2300      	movs	r3, #0
 8006df2:	2602      	movs	r6, #2
 8006df4:	2c00      	cmp	r4, #0
 8006df6:	f040 80b2 	bne.w	8006f5e <_dtoa_r+0x4fe>
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d1d3      	bne.n	8006da6 <_dtoa_r+0x346>
 8006dfe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006e00:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	f000 80b7 	beq.w	8006f78 <_dtoa_r+0x518>
 8006e0a:	4b86      	ldr	r3, [pc, #536]	@ (8007024 <_dtoa_r+0x5c4>)
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	4620      	mov	r0, r4
 8006e10:	4629      	mov	r1, r5
 8006e12:	f7f9 fe6b 	bl	8000aec <__aeabi_dcmplt>
 8006e16:	2800      	cmp	r0, #0
 8006e18:	f000 80ae 	beq.w	8006f78 <_dtoa_r+0x518>
 8006e1c:	9b07      	ldr	r3, [sp, #28]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	f000 80aa 	beq.w	8006f78 <_dtoa_r+0x518>
 8006e24:	9b00      	ldr	r3, [sp, #0]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	dd37      	ble.n	8006e9a <_dtoa_r+0x43a>
 8006e2a:	1e7b      	subs	r3, r7, #1
 8006e2c:	9304      	str	r3, [sp, #16]
 8006e2e:	4620      	mov	r0, r4
 8006e30:	4b7d      	ldr	r3, [pc, #500]	@ (8007028 <_dtoa_r+0x5c8>)
 8006e32:	2200      	movs	r2, #0
 8006e34:	4629      	mov	r1, r5
 8006e36:	f7f9 fbe7 	bl	8000608 <__aeabi_dmul>
 8006e3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e3e:	9c00      	ldr	r4, [sp, #0]
 8006e40:	3601      	adds	r6, #1
 8006e42:	4630      	mov	r0, r6
 8006e44:	f7f9 fb76 	bl	8000534 <__aeabi_i2d>
 8006e48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006e4c:	f7f9 fbdc 	bl	8000608 <__aeabi_dmul>
 8006e50:	4b76      	ldr	r3, [pc, #472]	@ (800702c <_dtoa_r+0x5cc>)
 8006e52:	2200      	movs	r2, #0
 8006e54:	f7f9 fa22 	bl	800029c <__adddf3>
 8006e58:	4605      	mov	r5, r0
 8006e5a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006e5e:	2c00      	cmp	r4, #0
 8006e60:	f040 808d 	bne.w	8006f7e <_dtoa_r+0x51e>
 8006e64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e68:	4b71      	ldr	r3, [pc, #452]	@ (8007030 <_dtoa_r+0x5d0>)
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f7f9 fa14 	bl	8000298 <__aeabi_dsub>
 8006e70:	4602      	mov	r2, r0
 8006e72:	460b      	mov	r3, r1
 8006e74:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006e78:	462a      	mov	r2, r5
 8006e7a:	4633      	mov	r3, r6
 8006e7c:	f7f9 fe54 	bl	8000b28 <__aeabi_dcmpgt>
 8006e80:	2800      	cmp	r0, #0
 8006e82:	f040 828b 	bne.w	800739c <_dtoa_r+0x93c>
 8006e86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e8a:	462a      	mov	r2, r5
 8006e8c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006e90:	f7f9 fe2c 	bl	8000aec <__aeabi_dcmplt>
 8006e94:	2800      	cmp	r0, #0
 8006e96:	f040 8128 	bne.w	80070ea <_dtoa_r+0x68a>
 8006e9a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006e9e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006ea2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	f2c0 815a 	blt.w	800715e <_dtoa_r+0x6fe>
 8006eaa:	2f0e      	cmp	r7, #14
 8006eac:	f300 8157 	bgt.w	800715e <_dtoa_r+0x6fe>
 8006eb0:	4b5a      	ldr	r3, [pc, #360]	@ (800701c <_dtoa_r+0x5bc>)
 8006eb2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006eb6:	ed93 7b00 	vldr	d7, [r3]
 8006eba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	ed8d 7b00 	vstr	d7, [sp]
 8006ec2:	da03      	bge.n	8006ecc <_dtoa_r+0x46c>
 8006ec4:	9b07      	ldr	r3, [sp, #28]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	f340 8101 	ble.w	80070ce <_dtoa_r+0x66e>
 8006ecc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006ed0:	4656      	mov	r6, sl
 8006ed2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006ed6:	4620      	mov	r0, r4
 8006ed8:	4629      	mov	r1, r5
 8006eda:	f7f9 fcbf 	bl	800085c <__aeabi_ddiv>
 8006ede:	f7f9 fe43 	bl	8000b68 <__aeabi_d2iz>
 8006ee2:	4680      	mov	r8, r0
 8006ee4:	f7f9 fb26 	bl	8000534 <__aeabi_i2d>
 8006ee8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006eec:	f7f9 fb8c 	bl	8000608 <__aeabi_dmul>
 8006ef0:	4602      	mov	r2, r0
 8006ef2:	460b      	mov	r3, r1
 8006ef4:	4620      	mov	r0, r4
 8006ef6:	4629      	mov	r1, r5
 8006ef8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006efc:	f7f9 f9cc 	bl	8000298 <__aeabi_dsub>
 8006f00:	f806 4b01 	strb.w	r4, [r6], #1
 8006f04:	9d07      	ldr	r5, [sp, #28]
 8006f06:	eba6 040a 	sub.w	r4, r6, sl
 8006f0a:	42a5      	cmp	r5, r4
 8006f0c:	4602      	mov	r2, r0
 8006f0e:	460b      	mov	r3, r1
 8006f10:	f040 8117 	bne.w	8007142 <_dtoa_r+0x6e2>
 8006f14:	f7f9 f9c2 	bl	800029c <__adddf3>
 8006f18:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f1c:	4604      	mov	r4, r0
 8006f1e:	460d      	mov	r5, r1
 8006f20:	f7f9 fe02 	bl	8000b28 <__aeabi_dcmpgt>
 8006f24:	2800      	cmp	r0, #0
 8006f26:	f040 80f9 	bne.w	800711c <_dtoa_r+0x6bc>
 8006f2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f2e:	4620      	mov	r0, r4
 8006f30:	4629      	mov	r1, r5
 8006f32:	f7f9 fdd1 	bl	8000ad8 <__aeabi_dcmpeq>
 8006f36:	b118      	cbz	r0, 8006f40 <_dtoa_r+0x4e0>
 8006f38:	f018 0f01 	tst.w	r8, #1
 8006f3c:	f040 80ee 	bne.w	800711c <_dtoa_r+0x6bc>
 8006f40:	4649      	mov	r1, r9
 8006f42:	4658      	mov	r0, fp
 8006f44:	f000 fc90 	bl	8007868 <_Bfree>
 8006f48:	2300      	movs	r3, #0
 8006f4a:	7033      	strb	r3, [r6, #0]
 8006f4c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006f4e:	3701      	adds	r7, #1
 8006f50:	601f      	str	r7, [r3, #0]
 8006f52:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	f000 831d 	beq.w	8007594 <_dtoa_r+0xb34>
 8006f5a:	601e      	str	r6, [r3, #0]
 8006f5c:	e31a      	b.n	8007594 <_dtoa_r+0xb34>
 8006f5e:	07e2      	lsls	r2, r4, #31
 8006f60:	d505      	bpl.n	8006f6e <_dtoa_r+0x50e>
 8006f62:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006f66:	f7f9 fb4f 	bl	8000608 <__aeabi_dmul>
 8006f6a:	3601      	adds	r6, #1
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	1064      	asrs	r4, r4, #1
 8006f70:	3508      	adds	r5, #8
 8006f72:	e73f      	b.n	8006df4 <_dtoa_r+0x394>
 8006f74:	2602      	movs	r6, #2
 8006f76:	e742      	b.n	8006dfe <_dtoa_r+0x39e>
 8006f78:	9c07      	ldr	r4, [sp, #28]
 8006f7a:	9704      	str	r7, [sp, #16]
 8006f7c:	e761      	b.n	8006e42 <_dtoa_r+0x3e2>
 8006f7e:	4b27      	ldr	r3, [pc, #156]	@ (800701c <_dtoa_r+0x5bc>)
 8006f80:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006f82:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006f86:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006f8a:	4454      	add	r4, sl
 8006f8c:	2900      	cmp	r1, #0
 8006f8e:	d053      	beq.n	8007038 <_dtoa_r+0x5d8>
 8006f90:	4928      	ldr	r1, [pc, #160]	@ (8007034 <_dtoa_r+0x5d4>)
 8006f92:	2000      	movs	r0, #0
 8006f94:	f7f9 fc62 	bl	800085c <__aeabi_ddiv>
 8006f98:	4633      	mov	r3, r6
 8006f9a:	462a      	mov	r2, r5
 8006f9c:	f7f9 f97c 	bl	8000298 <__aeabi_dsub>
 8006fa0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006fa4:	4656      	mov	r6, sl
 8006fa6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006faa:	f7f9 fddd 	bl	8000b68 <__aeabi_d2iz>
 8006fae:	4605      	mov	r5, r0
 8006fb0:	f7f9 fac0 	bl	8000534 <__aeabi_i2d>
 8006fb4:	4602      	mov	r2, r0
 8006fb6:	460b      	mov	r3, r1
 8006fb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006fbc:	f7f9 f96c 	bl	8000298 <__aeabi_dsub>
 8006fc0:	3530      	adds	r5, #48	@ 0x30
 8006fc2:	4602      	mov	r2, r0
 8006fc4:	460b      	mov	r3, r1
 8006fc6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006fca:	f806 5b01 	strb.w	r5, [r6], #1
 8006fce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006fd2:	f7f9 fd8b 	bl	8000aec <__aeabi_dcmplt>
 8006fd6:	2800      	cmp	r0, #0
 8006fd8:	d171      	bne.n	80070be <_dtoa_r+0x65e>
 8006fda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006fde:	4911      	ldr	r1, [pc, #68]	@ (8007024 <_dtoa_r+0x5c4>)
 8006fe0:	2000      	movs	r0, #0
 8006fe2:	f7f9 f959 	bl	8000298 <__aeabi_dsub>
 8006fe6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006fea:	f7f9 fd7f 	bl	8000aec <__aeabi_dcmplt>
 8006fee:	2800      	cmp	r0, #0
 8006ff0:	f040 8095 	bne.w	800711e <_dtoa_r+0x6be>
 8006ff4:	42a6      	cmp	r6, r4
 8006ff6:	f43f af50 	beq.w	8006e9a <_dtoa_r+0x43a>
 8006ffa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006ffe:	4b0a      	ldr	r3, [pc, #40]	@ (8007028 <_dtoa_r+0x5c8>)
 8007000:	2200      	movs	r2, #0
 8007002:	f7f9 fb01 	bl	8000608 <__aeabi_dmul>
 8007006:	4b08      	ldr	r3, [pc, #32]	@ (8007028 <_dtoa_r+0x5c8>)
 8007008:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800700c:	2200      	movs	r2, #0
 800700e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007012:	f7f9 faf9 	bl	8000608 <__aeabi_dmul>
 8007016:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800701a:	e7c4      	b.n	8006fa6 <_dtoa_r+0x546>
 800701c:	08008da8 	.word	0x08008da8
 8007020:	08008d80 	.word	0x08008d80
 8007024:	3ff00000 	.word	0x3ff00000
 8007028:	40240000 	.word	0x40240000
 800702c:	401c0000 	.word	0x401c0000
 8007030:	40140000 	.word	0x40140000
 8007034:	3fe00000 	.word	0x3fe00000
 8007038:	4631      	mov	r1, r6
 800703a:	4628      	mov	r0, r5
 800703c:	f7f9 fae4 	bl	8000608 <__aeabi_dmul>
 8007040:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007044:	9415      	str	r4, [sp, #84]	@ 0x54
 8007046:	4656      	mov	r6, sl
 8007048:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800704c:	f7f9 fd8c 	bl	8000b68 <__aeabi_d2iz>
 8007050:	4605      	mov	r5, r0
 8007052:	f7f9 fa6f 	bl	8000534 <__aeabi_i2d>
 8007056:	4602      	mov	r2, r0
 8007058:	460b      	mov	r3, r1
 800705a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800705e:	f7f9 f91b 	bl	8000298 <__aeabi_dsub>
 8007062:	3530      	adds	r5, #48	@ 0x30
 8007064:	f806 5b01 	strb.w	r5, [r6], #1
 8007068:	4602      	mov	r2, r0
 800706a:	460b      	mov	r3, r1
 800706c:	42a6      	cmp	r6, r4
 800706e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007072:	f04f 0200 	mov.w	r2, #0
 8007076:	d124      	bne.n	80070c2 <_dtoa_r+0x662>
 8007078:	4bac      	ldr	r3, [pc, #688]	@ (800732c <_dtoa_r+0x8cc>)
 800707a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800707e:	f7f9 f90d 	bl	800029c <__adddf3>
 8007082:	4602      	mov	r2, r0
 8007084:	460b      	mov	r3, r1
 8007086:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800708a:	f7f9 fd4d 	bl	8000b28 <__aeabi_dcmpgt>
 800708e:	2800      	cmp	r0, #0
 8007090:	d145      	bne.n	800711e <_dtoa_r+0x6be>
 8007092:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007096:	49a5      	ldr	r1, [pc, #660]	@ (800732c <_dtoa_r+0x8cc>)
 8007098:	2000      	movs	r0, #0
 800709a:	f7f9 f8fd 	bl	8000298 <__aeabi_dsub>
 800709e:	4602      	mov	r2, r0
 80070a0:	460b      	mov	r3, r1
 80070a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070a6:	f7f9 fd21 	bl	8000aec <__aeabi_dcmplt>
 80070aa:	2800      	cmp	r0, #0
 80070ac:	f43f aef5 	beq.w	8006e9a <_dtoa_r+0x43a>
 80070b0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80070b2:	1e73      	subs	r3, r6, #1
 80070b4:	9315      	str	r3, [sp, #84]	@ 0x54
 80070b6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80070ba:	2b30      	cmp	r3, #48	@ 0x30
 80070bc:	d0f8      	beq.n	80070b0 <_dtoa_r+0x650>
 80070be:	9f04      	ldr	r7, [sp, #16]
 80070c0:	e73e      	b.n	8006f40 <_dtoa_r+0x4e0>
 80070c2:	4b9b      	ldr	r3, [pc, #620]	@ (8007330 <_dtoa_r+0x8d0>)
 80070c4:	f7f9 faa0 	bl	8000608 <__aeabi_dmul>
 80070c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80070cc:	e7bc      	b.n	8007048 <_dtoa_r+0x5e8>
 80070ce:	d10c      	bne.n	80070ea <_dtoa_r+0x68a>
 80070d0:	4b98      	ldr	r3, [pc, #608]	@ (8007334 <_dtoa_r+0x8d4>)
 80070d2:	2200      	movs	r2, #0
 80070d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80070d8:	f7f9 fa96 	bl	8000608 <__aeabi_dmul>
 80070dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80070e0:	f7f9 fd18 	bl	8000b14 <__aeabi_dcmpge>
 80070e4:	2800      	cmp	r0, #0
 80070e6:	f000 8157 	beq.w	8007398 <_dtoa_r+0x938>
 80070ea:	2400      	movs	r4, #0
 80070ec:	4625      	mov	r5, r4
 80070ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80070f0:	43db      	mvns	r3, r3
 80070f2:	9304      	str	r3, [sp, #16]
 80070f4:	4656      	mov	r6, sl
 80070f6:	2700      	movs	r7, #0
 80070f8:	4621      	mov	r1, r4
 80070fa:	4658      	mov	r0, fp
 80070fc:	f000 fbb4 	bl	8007868 <_Bfree>
 8007100:	2d00      	cmp	r5, #0
 8007102:	d0dc      	beq.n	80070be <_dtoa_r+0x65e>
 8007104:	b12f      	cbz	r7, 8007112 <_dtoa_r+0x6b2>
 8007106:	42af      	cmp	r7, r5
 8007108:	d003      	beq.n	8007112 <_dtoa_r+0x6b2>
 800710a:	4639      	mov	r1, r7
 800710c:	4658      	mov	r0, fp
 800710e:	f000 fbab 	bl	8007868 <_Bfree>
 8007112:	4629      	mov	r1, r5
 8007114:	4658      	mov	r0, fp
 8007116:	f000 fba7 	bl	8007868 <_Bfree>
 800711a:	e7d0      	b.n	80070be <_dtoa_r+0x65e>
 800711c:	9704      	str	r7, [sp, #16]
 800711e:	4633      	mov	r3, r6
 8007120:	461e      	mov	r6, r3
 8007122:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007126:	2a39      	cmp	r2, #57	@ 0x39
 8007128:	d107      	bne.n	800713a <_dtoa_r+0x6da>
 800712a:	459a      	cmp	sl, r3
 800712c:	d1f8      	bne.n	8007120 <_dtoa_r+0x6c0>
 800712e:	9a04      	ldr	r2, [sp, #16]
 8007130:	3201      	adds	r2, #1
 8007132:	9204      	str	r2, [sp, #16]
 8007134:	2230      	movs	r2, #48	@ 0x30
 8007136:	f88a 2000 	strb.w	r2, [sl]
 800713a:	781a      	ldrb	r2, [r3, #0]
 800713c:	3201      	adds	r2, #1
 800713e:	701a      	strb	r2, [r3, #0]
 8007140:	e7bd      	b.n	80070be <_dtoa_r+0x65e>
 8007142:	4b7b      	ldr	r3, [pc, #492]	@ (8007330 <_dtoa_r+0x8d0>)
 8007144:	2200      	movs	r2, #0
 8007146:	f7f9 fa5f 	bl	8000608 <__aeabi_dmul>
 800714a:	2200      	movs	r2, #0
 800714c:	2300      	movs	r3, #0
 800714e:	4604      	mov	r4, r0
 8007150:	460d      	mov	r5, r1
 8007152:	f7f9 fcc1 	bl	8000ad8 <__aeabi_dcmpeq>
 8007156:	2800      	cmp	r0, #0
 8007158:	f43f aebb 	beq.w	8006ed2 <_dtoa_r+0x472>
 800715c:	e6f0      	b.n	8006f40 <_dtoa_r+0x4e0>
 800715e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007160:	2a00      	cmp	r2, #0
 8007162:	f000 80db 	beq.w	800731c <_dtoa_r+0x8bc>
 8007166:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007168:	2a01      	cmp	r2, #1
 800716a:	f300 80bf 	bgt.w	80072ec <_dtoa_r+0x88c>
 800716e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007170:	2a00      	cmp	r2, #0
 8007172:	f000 80b7 	beq.w	80072e4 <_dtoa_r+0x884>
 8007176:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800717a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800717c:	4646      	mov	r6, r8
 800717e:	9a08      	ldr	r2, [sp, #32]
 8007180:	2101      	movs	r1, #1
 8007182:	441a      	add	r2, r3
 8007184:	4658      	mov	r0, fp
 8007186:	4498      	add	r8, r3
 8007188:	9208      	str	r2, [sp, #32]
 800718a:	f000 fc21 	bl	80079d0 <__i2b>
 800718e:	4605      	mov	r5, r0
 8007190:	b15e      	cbz	r6, 80071aa <_dtoa_r+0x74a>
 8007192:	9b08      	ldr	r3, [sp, #32]
 8007194:	2b00      	cmp	r3, #0
 8007196:	dd08      	ble.n	80071aa <_dtoa_r+0x74a>
 8007198:	42b3      	cmp	r3, r6
 800719a:	9a08      	ldr	r2, [sp, #32]
 800719c:	bfa8      	it	ge
 800719e:	4633      	movge	r3, r6
 80071a0:	eba8 0803 	sub.w	r8, r8, r3
 80071a4:	1af6      	subs	r6, r6, r3
 80071a6:	1ad3      	subs	r3, r2, r3
 80071a8:	9308      	str	r3, [sp, #32]
 80071aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80071ac:	b1f3      	cbz	r3, 80071ec <_dtoa_r+0x78c>
 80071ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	f000 80b7 	beq.w	8007324 <_dtoa_r+0x8c4>
 80071b6:	b18c      	cbz	r4, 80071dc <_dtoa_r+0x77c>
 80071b8:	4629      	mov	r1, r5
 80071ba:	4622      	mov	r2, r4
 80071bc:	4658      	mov	r0, fp
 80071be:	f000 fcc7 	bl	8007b50 <__pow5mult>
 80071c2:	464a      	mov	r2, r9
 80071c4:	4601      	mov	r1, r0
 80071c6:	4605      	mov	r5, r0
 80071c8:	4658      	mov	r0, fp
 80071ca:	f000 fc17 	bl	80079fc <__multiply>
 80071ce:	4649      	mov	r1, r9
 80071d0:	9004      	str	r0, [sp, #16]
 80071d2:	4658      	mov	r0, fp
 80071d4:	f000 fb48 	bl	8007868 <_Bfree>
 80071d8:	9b04      	ldr	r3, [sp, #16]
 80071da:	4699      	mov	r9, r3
 80071dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80071de:	1b1a      	subs	r2, r3, r4
 80071e0:	d004      	beq.n	80071ec <_dtoa_r+0x78c>
 80071e2:	4649      	mov	r1, r9
 80071e4:	4658      	mov	r0, fp
 80071e6:	f000 fcb3 	bl	8007b50 <__pow5mult>
 80071ea:	4681      	mov	r9, r0
 80071ec:	2101      	movs	r1, #1
 80071ee:	4658      	mov	r0, fp
 80071f0:	f000 fbee 	bl	80079d0 <__i2b>
 80071f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80071f6:	4604      	mov	r4, r0
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	f000 81cf 	beq.w	800759c <_dtoa_r+0xb3c>
 80071fe:	461a      	mov	r2, r3
 8007200:	4601      	mov	r1, r0
 8007202:	4658      	mov	r0, fp
 8007204:	f000 fca4 	bl	8007b50 <__pow5mult>
 8007208:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800720a:	2b01      	cmp	r3, #1
 800720c:	4604      	mov	r4, r0
 800720e:	f300 8095 	bgt.w	800733c <_dtoa_r+0x8dc>
 8007212:	9b02      	ldr	r3, [sp, #8]
 8007214:	2b00      	cmp	r3, #0
 8007216:	f040 8087 	bne.w	8007328 <_dtoa_r+0x8c8>
 800721a:	9b03      	ldr	r3, [sp, #12]
 800721c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007220:	2b00      	cmp	r3, #0
 8007222:	f040 8089 	bne.w	8007338 <_dtoa_r+0x8d8>
 8007226:	9b03      	ldr	r3, [sp, #12]
 8007228:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800722c:	0d1b      	lsrs	r3, r3, #20
 800722e:	051b      	lsls	r3, r3, #20
 8007230:	b12b      	cbz	r3, 800723e <_dtoa_r+0x7de>
 8007232:	9b08      	ldr	r3, [sp, #32]
 8007234:	3301      	adds	r3, #1
 8007236:	9308      	str	r3, [sp, #32]
 8007238:	f108 0801 	add.w	r8, r8, #1
 800723c:	2301      	movs	r3, #1
 800723e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007240:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007242:	2b00      	cmp	r3, #0
 8007244:	f000 81b0 	beq.w	80075a8 <_dtoa_r+0xb48>
 8007248:	6923      	ldr	r3, [r4, #16]
 800724a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800724e:	6918      	ldr	r0, [r3, #16]
 8007250:	f000 fb72 	bl	8007938 <__hi0bits>
 8007254:	f1c0 0020 	rsb	r0, r0, #32
 8007258:	9b08      	ldr	r3, [sp, #32]
 800725a:	4418      	add	r0, r3
 800725c:	f010 001f 	ands.w	r0, r0, #31
 8007260:	d077      	beq.n	8007352 <_dtoa_r+0x8f2>
 8007262:	f1c0 0320 	rsb	r3, r0, #32
 8007266:	2b04      	cmp	r3, #4
 8007268:	dd6b      	ble.n	8007342 <_dtoa_r+0x8e2>
 800726a:	9b08      	ldr	r3, [sp, #32]
 800726c:	f1c0 001c 	rsb	r0, r0, #28
 8007270:	4403      	add	r3, r0
 8007272:	4480      	add	r8, r0
 8007274:	4406      	add	r6, r0
 8007276:	9308      	str	r3, [sp, #32]
 8007278:	f1b8 0f00 	cmp.w	r8, #0
 800727c:	dd05      	ble.n	800728a <_dtoa_r+0x82a>
 800727e:	4649      	mov	r1, r9
 8007280:	4642      	mov	r2, r8
 8007282:	4658      	mov	r0, fp
 8007284:	f000 fcbe 	bl	8007c04 <__lshift>
 8007288:	4681      	mov	r9, r0
 800728a:	9b08      	ldr	r3, [sp, #32]
 800728c:	2b00      	cmp	r3, #0
 800728e:	dd05      	ble.n	800729c <_dtoa_r+0x83c>
 8007290:	4621      	mov	r1, r4
 8007292:	461a      	mov	r2, r3
 8007294:	4658      	mov	r0, fp
 8007296:	f000 fcb5 	bl	8007c04 <__lshift>
 800729a:	4604      	mov	r4, r0
 800729c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d059      	beq.n	8007356 <_dtoa_r+0x8f6>
 80072a2:	4621      	mov	r1, r4
 80072a4:	4648      	mov	r0, r9
 80072a6:	f000 fd19 	bl	8007cdc <__mcmp>
 80072aa:	2800      	cmp	r0, #0
 80072ac:	da53      	bge.n	8007356 <_dtoa_r+0x8f6>
 80072ae:	1e7b      	subs	r3, r7, #1
 80072b0:	9304      	str	r3, [sp, #16]
 80072b2:	4649      	mov	r1, r9
 80072b4:	2300      	movs	r3, #0
 80072b6:	220a      	movs	r2, #10
 80072b8:	4658      	mov	r0, fp
 80072ba:	f000 faf7 	bl	80078ac <__multadd>
 80072be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80072c0:	4681      	mov	r9, r0
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	f000 8172 	beq.w	80075ac <_dtoa_r+0xb4c>
 80072c8:	2300      	movs	r3, #0
 80072ca:	4629      	mov	r1, r5
 80072cc:	220a      	movs	r2, #10
 80072ce:	4658      	mov	r0, fp
 80072d0:	f000 faec 	bl	80078ac <__multadd>
 80072d4:	9b00      	ldr	r3, [sp, #0]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	4605      	mov	r5, r0
 80072da:	dc67      	bgt.n	80073ac <_dtoa_r+0x94c>
 80072dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072de:	2b02      	cmp	r3, #2
 80072e0:	dc41      	bgt.n	8007366 <_dtoa_r+0x906>
 80072e2:	e063      	b.n	80073ac <_dtoa_r+0x94c>
 80072e4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80072e6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80072ea:	e746      	b.n	800717a <_dtoa_r+0x71a>
 80072ec:	9b07      	ldr	r3, [sp, #28]
 80072ee:	1e5c      	subs	r4, r3, #1
 80072f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80072f2:	42a3      	cmp	r3, r4
 80072f4:	bfbf      	itttt	lt
 80072f6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80072f8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80072fa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80072fc:	1ae3      	sublt	r3, r4, r3
 80072fe:	bfb4      	ite	lt
 8007300:	18d2      	addlt	r2, r2, r3
 8007302:	1b1c      	subge	r4, r3, r4
 8007304:	9b07      	ldr	r3, [sp, #28]
 8007306:	bfbc      	itt	lt
 8007308:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800730a:	2400      	movlt	r4, #0
 800730c:	2b00      	cmp	r3, #0
 800730e:	bfb5      	itete	lt
 8007310:	eba8 0603 	sublt.w	r6, r8, r3
 8007314:	9b07      	ldrge	r3, [sp, #28]
 8007316:	2300      	movlt	r3, #0
 8007318:	4646      	movge	r6, r8
 800731a:	e730      	b.n	800717e <_dtoa_r+0x71e>
 800731c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800731e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007320:	4646      	mov	r6, r8
 8007322:	e735      	b.n	8007190 <_dtoa_r+0x730>
 8007324:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007326:	e75c      	b.n	80071e2 <_dtoa_r+0x782>
 8007328:	2300      	movs	r3, #0
 800732a:	e788      	b.n	800723e <_dtoa_r+0x7de>
 800732c:	3fe00000 	.word	0x3fe00000
 8007330:	40240000 	.word	0x40240000
 8007334:	40140000 	.word	0x40140000
 8007338:	9b02      	ldr	r3, [sp, #8]
 800733a:	e780      	b.n	800723e <_dtoa_r+0x7de>
 800733c:	2300      	movs	r3, #0
 800733e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007340:	e782      	b.n	8007248 <_dtoa_r+0x7e8>
 8007342:	d099      	beq.n	8007278 <_dtoa_r+0x818>
 8007344:	9a08      	ldr	r2, [sp, #32]
 8007346:	331c      	adds	r3, #28
 8007348:	441a      	add	r2, r3
 800734a:	4498      	add	r8, r3
 800734c:	441e      	add	r6, r3
 800734e:	9208      	str	r2, [sp, #32]
 8007350:	e792      	b.n	8007278 <_dtoa_r+0x818>
 8007352:	4603      	mov	r3, r0
 8007354:	e7f6      	b.n	8007344 <_dtoa_r+0x8e4>
 8007356:	9b07      	ldr	r3, [sp, #28]
 8007358:	9704      	str	r7, [sp, #16]
 800735a:	2b00      	cmp	r3, #0
 800735c:	dc20      	bgt.n	80073a0 <_dtoa_r+0x940>
 800735e:	9300      	str	r3, [sp, #0]
 8007360:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007362:	2b02      	cmp	r3, #2
 8007364:	dd1e      	ble.n	80073a4 <_dtoa_r+0x944>
 8007366:	9b00      	ldr	r3, [sp, #0]
 8007368:	2b00      	cmp	r3, #0
 800736a:	f47f aec0 	bne.w	80070ee <_dtoa_r+0x68e>
 800736e:	4621      	mov	r1, r4
 8007370:	2205      	movs	r2, #5
 8007372:	4658      	mov	r0, fp
 8007374:	f000 fa9a 	bl	80078ac <__multadd>
 8007378:	4601      	mov	r1, r0
 800737a:	4604      	mov	r4, r0
 800737c:	4648      	mov	r0, r9
 800737e:	f000 fcad 	bl	8007cdc <__mcmp>
 8007382:	2800      	cmp	r0, #0
 8007384:	f77f aeb3 	ble.w	80070ee <_dtoa_r+0x68e>
 8007388:	4656      	mov	r6, sl
 800738a:	2331      	movs	r3, #49	@ 0x31
 800738c:	f806 3b01 	strb.w	r3, [r6], #1
 8007390:	9b04      	ldr	r3, [sp, #16]
 8007392:	3301      	adds	r3, #1
 8007394:	9304      	str	r3, [sp, #16]
 8007396:	e6ae      	b.n	80070f6 <_dtoa_r+0x696>
 8007398:	9c07      	ldr	r4, [sp, #28]
 800739a:	9704      	str	r7, [sp, #16]
 800739c:	4625      	mov	r5, r4
 800739e:	e7f3      	b.n	8007388 <_dtoa_r+0x928>
 80073a0:	9b07      	ldr	r3, [sp, #28]
 80073a2:	9300      	str	r3, [sp, #0]
 80073a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	f000 8104 	beq.w	80075b4 <_dtoa_r+0xb54>
 80073ac:	2e00      	cmp	r6, #0
 80073ae:	dd05      	ble.n	80073bc <_dtoa_r+0x95c>
 80073b0:	4629      	mov	r1, r5
 80073b2:	4632      	mov	r2, r6
 80073b4:	4658      	mov	r0, fp
 80073b6:	f000 fc25 	bl	8007c04 <__lshift>
 80073ba:	4605      	mov	r5, r0
 80073bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d05a      	beq.n	8007478 <_dtoa_r+0xa18>
 80073c2:	6869      	ldr	r1, [r5, #4]
 80073c4:	4658      	mov	r0, fp
 80073c6:	f000 fa0f 	bl	80077e8 <_Balloc>
 80073ca:	4606      	mov	r6, r0
 80073cc:	b928      	cbnz	r0, 80073da <_dtoa_r+0x97a>
 80073ce:	4b84      	ldr	r3, [pc, #528]	@ (80075e0 <_dtoa_r+0xb80>)
 80073d0:	4602      	mov	r2, r0
 80073d2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80073d6:	f7ff bb5a 	b.w	8006a8e <_dtoa_r+0x2e>
 80073da:	692a      	ldr	r2, [r5, #16]
 80073dc:	3202      	adds	r2, #2
 80073de:	0092      	lsls	r2, r2, #2
 80073e0:	f105 010c 	add.w	r1, r5, #12
 80073e4:	300c      	adds	r0, #12
 80073e6:	f001 f847 	bl	8008478 <memcpy>
 80073ea:	2201      	movs	r2, #1
 80073ec:	4631      	mov	r1, r6
 80073ee:	4658      	mov	r0, fp
 80073f0:	f000 fc08 	bl	8007c04 <__lshift>
 80073f4:	f10a 0301 	add.w	r3, sl, #1
 80073f8:	9307      	str	r3, [sp, #28]
 80073fa:	9b00      	ldr	r3, [sp, #0]
 80073fc:	4453      	add	r3, sl
 80073fe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007400:	9b02      	ldr	r3, [sp, #8]
 8007402:	f003 0301 	and.w	r3, r3, #1
 8007406:	462f      	mov	r7, r5
 8007408:	930a      	str	r3, [sp, #40]	@ 0x28
 800740a:	4605      	mov	r5, r0
 800740c:	9b07      	ldr	r3, [sp, #28]
 800740e:	4621      	mov	r1, r4
 8007410:	3b01      	subs	r3, #1
 8007412:	4648      	mov	r0, r9
 8007414:	9300      	str	r3, [sp, #0]
 8007416:	f7ff fa98 	bl	800694a <quorem>
 800741a:	4639      	mov	r1, r7
 800741c:	9002      	str	r0, [sp, #8]
 800741e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007422:	4648      	mov	r0, r9
 8007424:	f000 fc5a 	bl	8007cdc <__mcmp>
 8007428:	462a      	mov	r2, r5
 800742a:	9008      	str	r0, [sp, #32]
 800742c:	4621      	mov	r1, r4
 800742e:	4658      	mov	r0, fp
 8007430:	f000 fc70 	bl	8007d14 <__mdiff>
 8007434:	68c2      	ldr	r2, [r0, #12]
 8007436:	4606      	mov	r6, r0
 8007438:	bb02      	cbnz	r2, 800747c <_dtoa_r+0xa1c>
 800743a:	4601      	mov	r1, r0
 800743c:	4648      	mov	r0, r9
 800743e:	f000 fc4d 	bl	8007cdc <__mcmp>
 8007442:	4602      	mov	r2, r0
 8007444:	4631      	mov	r1, r6
 8007446:	4658      	mov	r0, fp
 8007448:	920e      	str	r2, [sp, #56]	@ 0x38
 800744a:	f000 fa0d 	bl	8007868 <_Bfree>
 800744e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007450:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007452:	9e07      	ldr	r6, [sp, #28]
 8007454:	ea43 0102 	orr.w	r1, r3, r2
 8007458:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800745a:	4319      	orrs	r1, r3
 800745c:	d110      	bne.n	8007480 <_dtoa_r+0xa20>
 800745e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007462:	d029      	beq.n	80074b8 <_dtoa_r+0xa58>
 8007464:	9b08      	ldr	r3, [sp, #32]
 8007466:	2b00      	cmp	r3, #0
 8007468:	dd02      	ble.n	8007470 <_dtoa_r+0xa10>
 800746a:	9b02      	ldr	r3, [sp, #8]
 800746c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007470:	9b00      	ldr	r3, [sp, #0]
 8007472:	f883 8000 	strb.w	r8, [r3]
 8007476:	e63f      	b.n	80070f8 <_dtoa_r+0x698>
 8007478:	4628      	mov	r0, r5
 800747a:	e7bb      	b.n	80073f4 <_dtoa_r+0x994>
 800747c:	2201      	movs	r2, #1
 800747e:	e7e1      	b.n	8007444 <_dtoa_r+0x9e4>
 8007480:	9b08      	ldr	r3, [sp, #32]
 8007482:	2b00      	cmp	r3, #0
 8007484:	db04      	blt.n	8007490 <_dtoa_r+0xa30>
 8007486:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007488:	430b      	orrs	r3, r1
 800748a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800748c:	430b      	orrs	r3, r1
 800748e:	d120      	bne.n	80074d2 <_dtoa_r+0xa72>
 8007490:	2a00      	cmp	r2, #0
 8007492:	dded      	ble.n	8007470 <_dtoa_r+0xa10>
 8007494:	4649      	mov	r1, r9
 8007496:	2201      	movs	r2, #1
 8007498:	4658      	mov	r0, fp
 800749a:	f000 fbb3 	bl	8007c04 <__lshift>
 800749e:	4621      	mov	r1, r4
 80074a0:	4681      	mov	r9, r0
 80074a2:	f000 fc1b 	bl	8007cdc <__mcmp>
 80074a6:	2800      	cmp	r0, #0
 80074a8:	dc03      	bgt.n	80074b2 <_dtoa_r+0xa52>
 80074aa:	d1e1      	bne.n	8007470 <_dtoa_r+0xa10>
 80074ac:	f018 0f01 	tst.w	r8, #1
 80074b0:	d0de      	beq.n	8007470 <_dtoa_r+0xa10>
 80074b2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80074b6:	d1d8      	bne.n	800746a <_dtoa_r+0xa0a>
 80074b8:	9a00      	ldr	r2, [sp, #0]
 80074ba:	2339      	movs	r3, #57	@ 0x39
 80074bc:	7013      	strb	r3, [r2, #0]
 80074be:	4633      	mov	r3, r6
 80074c0:	461e      	mov	r6, r3
 80074c2:	3b01      	subs	r3, #1
 80074c4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80074c8:	2a39      	cmp	r2, #57	@ 0x39
 80074ca:	d052      	beq.n	8007572 <_dtoa_r+0xb12>
 80074cc:	3201      	adds	r2, #1
 80074ce:	701a      	strb	r2, [r3, #0]
 80074d0:	e612      	b.n	80070f8 <_dtoa_r+0x698>
 80074d2:	2a00      	cmp	r2, #0
 80074d4:	dd07      	ble.n	80074e6 <_dtoa_r+0xa86>
 80074d6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80074da:	d0ed      	beq.n	80074b8 <_dtoa_r+0xa58>
 80074dc:	9a00      	ldr	r2, [sp, #0]
 80074de:	f108 0301 	add.w	r3, r8, #1
 80074e2:	7013      	strb	r3, [r2, #0]
 80074e4:	e608      	b.n	80070f8 <_dtoa_r+0x698>
 80074e6:	9b07      	ldr	r3, [sp, #28]
 80074e8:	9a07      	ldr	r2, [sp, #28]
 80074ea:	f803 8c01 	strb.w	r8, [r3, #-1]
 80074ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d028      	beq.n	8007546 <_dtoa_r+0xae6>
 80074f4:	4649      	mov	r1, r9
 80074f6:	2300      	movs	r3, #0
 80074f8:	220a      	movs	r2, #10
 80074fa:	4658      	mov	r0, fp
 80074fc:	f000 f9d6 	bl	80078ac <__multadd>
 8007500:	42af      	cmp	r7, r5
 8007502:	4681      	mov	r9, r0
 8007504:	f04f 0300 	mov.w	r3, #0
 8007508:	f04f 020a 	mov.w	r2, #10
 800750c:	4639      	mov	r1, r7
 800750e:	4658      	mov	r0, fp
 8007510:	d107      	bne.n	8007522 <_dtoa_r+0xac2>
 8007512:	f000 f9cb 	bl	80078ac <__multadd>
 8007516:	4607      	mov	r7, r0
 8007518:	4605      	mov	r5, r0
 800751a:	9b07      	ldr	r3, [sp, #28]
 800751c:	3301      	adds	r3, #1
 800751e:	9307      	str	r3, [sp, #28]
 8007520:	e774      	b.n	800740c <_dtoa_r+0x9ac>
 8007522:	f000 f9c3 	bl	80078ac <__multadd>
 8007526:	4629      	mov	r1, r5
 8007528:	4607      	mov	r7, r0
 800752a:	2300      	movs	r3, #0
 800752c:	220a      	movs	r2, #10
 800752e:	4658      	mov	r0, fp
 8007530:	f000 f9bc 	bl	80078ac <__multadd>
 8007534:	4605      	mov	r5, r0
 8007536:	e7f0      	b.n	800751a <_dtoa_r+0xaba>
 8007538:	9b00      	ldr	r3, [sp, #0]
 800753a:	2b00      	cmp	r3, #0
 800753c:	bfcc      	ite	gt
 800753e:	461e      	movgt	r6, r3
 8007540:	2601      	movle	r6, #1
 8007542:	4456      	add	r6, sl
 8007544:	2700      	movs	r7, #0
 8007546:	4649      	mov	r1, r9
 8007548:	2201      	movs	r2, #1
 800754a:	4658      	mov	r0, fp
 800754c:	f000 fb5a 	bl	8007c04 <__lshift>
 8007550:	4621      	mov	r1, r4
 8007552:	4681      	mov	r9, r0
 8007554:	f000 fbc2 	bl	8007cdc <__mcmp>
 8007558:	2800      	cmp	r0, #0
 800755a:	dcb0      	bgt.n	80074be <_dtoa_r+0xa5e>
 800755c:	d102      	bne.n	8007564 <_dtoa_r+0xb04>
 800755e:	f018 0f01 	tst.w	r8, #1
 8007562:	d1ac      	bne.n	80074be <_dtoa_r+0xa5e>
 8007564:	4633      	mov	r3, r6
 8007566:	461e      	mov	r6, r3
 8007568:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800756c:	2a30      	cmp	r2, #48	@ 0x30
 800756e:	d0fa      	beq.n	8007566 <_dtoa_r+0xb06>
 8007570:	e5c2      	b.n	80070f8 <_dtoa_r+0x698>
 8007572:	459a      	cmp	sl, r3
 8007574:	d1a4      	bne.n	80074c0 <_dtoa_r+0xa60>
 8007576:	9b04      	ldr	r3, [sp, #16]
 8007578:	3301      	adds	r3, #1
 800757a:	9304      	str	r3, [sp, #16]
 800757c:	2331      	movs	r3, #49	@ 0x31
 800757e:	f88a 3000 	strb.w	r3, [sl]
 8007582:	e5b9      	b.n	80070f8 <_dtoa_r+0x698>
 8007584:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007586:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80075e4 <_dtoa_r+0xb84>
 800758a:	b11b      	cbz	r3, 8007594 <_dtoa_r+0xb34>
 800758c:	f10a 0308 	add.w	r3, sl, #8
 8007590:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007592:	6013      	str	r3, [r2, #0]
 8007594:	4650      	mov	r0, sl
 8007596:	b019      	add	sp, #100	@ 0x64
 8007598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800759c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800759e:	2b01      	cmp	r3, #1
 80075a0:	f77f ae37 	ble.w	8007212 <_dtoa_r+0x7b2>
 80075a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80075a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80075a8:	2001      	movs	r0, #1
 80075aa:	e655      	b.n	8007258 <_dtoa_r+0x7f8>
 80075ac:	9b00      	ldr	r3, [sp, #0]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	f77f aed6 	ble.w	8007360 <_dtoa_r+0x900>
 80075b4:	4656      	mov	r6, sl
 80075b6:	4621      	mov	r1, r4
 80075b8:	4648      	mov	r0, r9
 80075ba:	f7ff f9c6 	bl	800694a <quorem>
 80075be:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80075c2:	f806 8b01 	strb.w	r8, [r6], #1
 80075c6:	9b00      	ldr	r3, [sp, #0]
 80075c8:	eba6 020a 	sub.w	r2, r6, sl
 80075cc:	4293      	cmp	r3, r2
 80075ce:	ddb3      	ble.n	8007538 <_dtoa_r+0xad8>
 80075d0:	4649      	mov	r1, r9
 80075d2:	2300      	movs	r3, #0
 80075d4:	220a      	movs	r2, #10
 80075d6:	4658      	mov	r0, fp
 80075d8:	f000 f968 	bl	80078ac <__multadd>
 80075dc:	4681      	mov	r9, r0
 80075de:	e7ea      	b.n	80075b6 <_dtoa_r+0xb56>
 80075e0:	08008d08 	.word	0x08008d08
 80075e4:	08008c8c 	.word	0x08008c8c

080075e8 <_free_r>:
 80075e8:	b538      	push	{r3, r4, r5, lr}
 80075ea:	4605      	mov	r5, r0
 80075ec:	2900      	cmp	r1, #0
 80075ee:	d041      	beq.n	8007674 <_free_r+0x8c>
 80075f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075f4:	1f0c      	subs	r4, r1, #4
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	bfb8      	it	lt
 80075fa:	18e4      	addlt	r4, r4, r3
 80075fc:	f000 f8e8 	bl	80077d0 <__malloc_lock>
 8007600:	4a1d      	ldr	r2, [pc, #116]	@ (8007678 <_free_r+0x90>)
 8007602:	6813      	ldr	r3, [r2, #0]
 8007604:	b933      	cbnz	r3, 8007614 <_free_r+0x2c>
 8007606:	6063      	str	r3, [r4, #4]
 8007608:	6014      	str	r4, [r2, #0]
 800760a:	4628      	mov	r0, r5
 800760c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007610:	f000 b8e4 	b.w	80077dc <__malloc_unlock>
 8007614:	42a3      	cmp	r3, r4
 8007616:	d908      	bls.n	800762a <_free_r+0x42>
 8007618:	6820      	ldr	r0, [r4, #0]
 800761a:	1821      	adds	r1, r4, r0
 800761c:	428b      	cmp	r3, r1
 800761e:	bf01      	itttt	eq
 8007620:	6819      	ldreq	r1, [r3, #0]
 8007622:	685b      	ldreq	r3, [r3, #4]
 8007624:	1809      	addeq	r1, r1, r0
 8007626:	6021      	streq	r1, [r4, #0]
 8007628:	e7ed      	b.n	8007606 <_free_r+0x1e>
 800762a:	461a      	mov	r2, r3
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	b10b      	cbz	r3, 8007634 <_free_r+0x4c>
 8007630:	42a3      	cmp	r3, r4
 8007632:	d9fa      	bls.n	800762a <_free_r+0x42>
 8007634:	6811      	ldr	r1, [r2, #0]
 8007636:	1850      	adds	r0, r2, r1
 8007638:	42a0      	cmp	r0, r4
 800763a:	d10b      	bne.n	8007654 <_free_r+0x6c>
 800763c:	6820      	ldr	r0, [r4, #0]
 800763e:	4401      	add	r1, r0
 8007640:	1850      	adds	r0, r2, r1
 8007642:	4283      	cmp	r3, r0
 8007644:	6011      	str	r1, [r2, #0]
 8007646:	d1e0      	bne.n	800760a <_free_r+0x22>
 8007648:	6818      	ldr	r0, [r3, #0]
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	6053      	str	r3, [r2, #4]
 800764e:	4408      	add	r0, r1
 8007650:	6010      	str	r0, [r2, #0]
 8007652:	e7da      	b.n	800760a <_free_r+0x22>
 8007654:	d902      	bls.n	800765c <_free_r+0x74>
 8007656:	230c      	movs	r3, #12
 8007658:	602b      	str	r3, [r5, #0]
 800765a:	e7d6      	b.n	800760a <_free_r+0x22>
 800765c:	6820      	ldr	r0, [r4, #0]
 800765e:	1821      	adds	r1, r4, r0
 8007660:	428b      	cmp	r3, r1
 8007662:	bf04      	itt	eq
 8007664:	6819      	ldreq	r1, [r3, #0]
 8007666:	685b      	ldreq	r3, [r3, #4]
 8007668:	6063      	str	r3, [r4, #4]
 800766a:	bf04      	itt	eq
 800766c:	1809      	addeq	r1, r1, r0
 800766e:	6021      	streq	r1, [r4, #0]
 8007670:	6054      	str	r4, [r2, #4]
 8007672:	e7ca      	b.n	800760a <_free_r+0x22>
 8007674:	bd38      	pop	{r3, r4, r5, pc}
 8007676:	bf00      	nop
 8007678:	200004d8 	.word	0x200004d8

0800767c <malloc>:
 800767c:	4b02      	ldr	r3, [pc, #8]	@ (8007688 <malloc+0xc>)
 800767e:	4601      	mov	r1, r0
 8007680:	6818      	ldr	r0, [r3, #0]
 8007682:	f000 b825 	b.w	80076d0 <_malloc_r>
 8007686:	bf00      	nop
 8007688:	2000001c 	.word	0x2000001c

0800768c <sbrk_aligned>:
 800768c:	b570      	push	{r4, r5, r6, lr}
 800768e:	4e0f      	ldr	r6, [pc, #60]	@ (80076cc <sbrk_aligned+0x40>)
 8007690:	460c      	mov	r4, r1
 8007692:	6831      	ldr	r1, [r6, #0]
 8007694:	4605      	mov	r5, r0
 8007696:	b911      	cbnz	r1, 800769e <sbrk_aligned+0x12>
 8007698:	f000 fede 	bl	8008458 <_sbrk_r>
 800769c:	6030      	str	r0, [r6, #0]
 800769e:	4621      	mov	r1, r4
 80076a0:	4628      	mov	r0, r5
 80076a2:	f000 fed9 	bl	8008458 <_sbrk_r>
 80076a6:	1c43      	adds	r3, r0, #1
 80076a8:	d103      	bne.n	80076b2 <sbrk_aligned+0x26>
 80076aa:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80076ae:	4620      	mov	r0, r4
 80076b0:	bd70      	pop	{r4, r5, r6, pc}
 80076b2:	1cc4      	adds	r4, r0, #3
 80076b4:	f024 0403 	bic.w	r4, r4, #3
 80076b8:	42a0      	cmp	r0, r4
 80076ba:	d0f8      	beq.n	80076ae <sbrk_aligned+0x22>
 80076bc:	1a21      	subs	r1, r4, r0
 80076be:	4628      	mov	r0, r5
 80076c0:	f000 feca 	bl	8008458 <_sbrk_r>
 80076c4:	3001      	adds	r0, #1
 80076c6:	d1f2      	bne.n	80076ae <sbrk_aligned+0x22>
 80076c8:	e7ef      	b.n	80076aa <sbrk_aligned+0x1e>
 80076ca:	bf00      	nop
 80076cc:	200004d4 	.word	0x200004d4

080076d0 <_malloc_r>:
 80076d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076d4:	1ccd      	adds	r5, r1, #3
 80076d6:	f025 0503 	bic.w	r5, r5, #3
 80076da:	3508      	adds	r5, #8
 80076dc:	2d0c      	cmp	r5, #12
 80076de:	bf38      	it	cc
 80076e0:	250c      	movcc	r5, #12
 80076e2:	2d00      	cmp	r5, #0
 80076e4:	4606      	mov	r6, r0
 80076e6:	db01      	blt.n	80076ec <_malloc_r+0x1c>
 80076e8:	42a9      	cmp	r1, r5
 80076ea:	d904      	bls.n	80076f6 <_malloc_r+0x26>
 80076ec:	230c      	movs	r3, #12
 80076ee:	6033      	str	r3, [r6, #0]
 80076f0:	2000      	movs	r0, #0
 80076f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80077cc <_malloc_r+0xfc>
 80076fa:	f000 f869 	bl	80077d0 <__malloc_lock>
 80076fe:	f8d8 3000 	ldr.w	r3, [r8]
 8007702:	461c      	mov	r4, r3
 8007704:	bb44      	cbnz	r4, 8007758 <_malloc_r+0x88>
 8007706:	4629      	mov	r1, r5
 8007708:	4630      	mov	r0, r6
 800770a:	f7ff ffbf 	bl	800768c <sbrk_aligned>
 800770e:	1c43      	adds	r3, r0, #1
 8007710:	4604      	mov	r4, r0
 8007712:	d158      	bne.n	80077c6 <_malloc_r+0xf6>
 8007714:	f8d8 4000 	ldr.w	r4, [r8]
 8007718:	4627      	mov	r7, r4
 800771a:	2f00      	cmp	r7, #0
 800771c:	d143      	bne.n	80077a6 <_malloc_r+0xd6>
 800771e:	2c00      	cmp	r4, #0
 8007720:	d04b      	beq.n	80077ba <_malloc_r+0xea>
 8007722:	6823      	ldr	r3, [r4, #0]
 8007724:	4639      	mov	r1, r7
 8007726:	4630      	mov	r0, r6
 8007728:	eb04 0903 	add.w	r9, r4, r3
 800772c:	f000 fe94 	bl	8008458 <_sbrk_r>
 8007730:	4581      	cmp	r9, r0
 8007732:	d142      	bne.n	80077ba <_malloc_r+0xea>
 8007734:	6821      	ldr	r1, [r4, #0]
 8007736:	1a6d      	subs	r5, r5, r1
 8007738:	4629      	mov	r1, r5
 800773a:	4630      	mov	r0, r6
 800773c:	f7ff ffa6 	bl	800768c <sbrk_aligned>
 8007740:	3001      	adds	r0, #1
 8007742:	d03a      	beq.n	80077ba <_malloc_r+0xea>
 8007744:	6823      	ldr	r3, [r4, #0]
 8007746:	442b      	add	r3, r5
 8007748:	6023      	str	r3, [r4, #0]
 800774a:	f8d8 3000 	ldr.w	r3, [r8]
 800774e:	685a      	ldr	r2, [r3, #4]
 8007750:	bb62      	cbnz	r2, 80077ac <_malloc_r+0xdc>
 8007752:	f8c8 7000 	str.w	r7, [r8]
 8007756:	e00f      	b.n	8007778 <_malloc_r+0xa8>
 8007758:	6822      	ldr	r2, [r4, #0]
 800775a:	1b52      	subs	r2, r2, r5
 800775c:	d420      	bmi.n	80077a0 <_malloc_r+0xd0>
 800775e:	2a0b      	cmp	r2, #11
 8007760:	d917      	bls.n	8007792 <_malloc_r+0xc2>
 8007762:	1961      	adds	r1, r4, r5
 8007764:	42a3      	cmp	r3, r4
 8007766:	6025      	str	r5, [r4, #0]
 8007768:	bf18      	it	ne
 800776a:	6059      	strne	r1, [r3, #4]
 800776c:	6863      	ldr	r3, [r4, #4]
 800776e:	bf08      	it	eq
 8007770:	f8c8 1000 	streq.w	r1, [r8]
 8007774:	5162      	str	r2, [r4, r5]
 8007776:	604b      	str	r3, [r1, #4]
 8007778:	4630      	mov	r0, r6
 800777a:	f000 f82f 	bl	80077dc <__malloc_unlock>
 800777e:	f104 000b 	add.w	r0, r4, #11
 8007782:	1d23      	adds	r3, r4, #4
 8007784:	f020 0007 	bic.w	r0, r0, #7
 8007788:	1ac2      	subs	r2, r0, r3
 800778a:	bf1c      	itt	ne
 800778c:	1a1b      	subne	r3, r3, r0
 800778e:	50a3      	strne	r3, [r4, r2]
 8007790:	e7af      	b.n	80076f2 <_malloc_r+0x22>
 8007792:	6862      	ldr	r2, [r4, #4]
 8007794:	42a3      	cmp	r3, r4
 8007796:	bf0c      	ite	eq
 8007798:	f8c8 2000 	streq.w	r2, [r8]
 800779c:	605a      	strne	r2, [r3, #4]
 800779e:	e7eb      	b.n	8007778 <_malloc_r+0xa8>
 80077a0:	4623      	mov	r3, r4
 80077a2:	6864      	ldr	r4, [r4, #4]
 80077a4:	e7ae      	b.n	8007704 <_malloc_r+0x34>
 80077a6:	463c      	mov	r4, r7
 80077a8:	687f      	ldr	r7, [r7, #4]
 80077aa:	e7b6      	b.n	800771a <_malloc_r+0x4a>
 80077ac:	461a      	mov	r2, r3
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	42a3      	cmp	r3, r4
 80077b2:	d1fb      	bne.n	80077ac <_malloc_r+0xdc>
 80077b4:	2300      	movs	r3, #0
 80077b6:	6053      	str	r3, [r2, #4]
 80077b8:	e7de      	b.n	8007778 <_malloc_r+0xa8>
 80077ba:	230c      	movs	r3, #12
 80077bc:	6033      	str	r3, [r6, #0]
 80077be:	4630      	mov	r0, r6
 80077c0:	f000 f80c 	bl	80077dc <__malloc_unlock>
 80077c4:	e794      	b.n	80076f0 <_malloc_r+0x20>
 80077c6:	6005      	str	r5, [r0, #0]
 80077c8:	e7d6      	b.n	8007778 <_malloc_r+0xa8>
 80077ca:	bf00      	nop
 80077cc:	200004d8 	.word	0x200004d8

080077d0 <__malloc_lock>:
 80077d0:	4801      	ldr	r0, [pc, #4]	@ (80077d8 <__malloc_lock+0x8>)
 80077d2:	f7ff b8b8 	b.w	8006946 <__retarget_lock_acquire_recursive>
 80077d6:	bf00      	nop
 80077d8:	200004d0 	.word	0x200004d0

080077dc <__malloc_unlock>:
 80077dc:	4801      	ldr	r0, [pc, #4]	@ (80077e4 <__malloc_unlock+0x8>)
 80077de:	f7ff b8b3 	b.w	8006948 <__retarget_lock_release_recursive>
 80077e2:	bf00      	nop
 80077e4:	200004d0 	.word	0x200004d0

080077e8 <_Balloc>:
 80077e8:	b570      	push	{r4, r5, r6, lr}
 80077ea:	69c6      	ldr	r6, [r0, #28]
 80077ec:	4604      	mov	r4, r0
 80077ee:	460d      	mov	r5, r1
 80077f0:	b976      	cbnz	r6, 8007810 <_Balloc+0x28>
 80077f2:	2010      	movs	r0, #16
 80077f4:	f7ff ff42 	bl	800767c <malloc>
 80077f8:	4602      	mov	r2, r0
 80077fa:	61e0      	str	r0, [r4, #28]
 80077fc:	b920      	cbnz	r0, 8007808 <_Balloc+0x20>
 80077fe:	4b18      	ldr	r3, [pc, #96]	@ (8007860 <_Balloc+0x78>)
 8007800:	4818      	ldr	r0, [pc, #96]	@ (8007864 <_Balloc+0x7c>)
 8007802:	216b      	movs	r1, #107	@ 0x6b
 8007804:	f000 fe46 	bl	8008494 <__assert_func>
 8007808:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800780c:	6006      	str	r6, [r0, #0]
 800780e:	60c6      	str	r6, [r0, #12]
 8007810:	69e6      	ldr	r6, [r4, #28]
 8007812:	68f3      	ldr	r3, [r6, #12]
 8007814:	b183      	cbz	r3, 8007838 <_Balloc+0x50>
 8007816:	69e3      	ldr	r3, [r4, #28]
 8007818:	68db      	ldr	r3, [r3, #12]
 800781a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800781e:	b9b8      	cbnz	r0, 8007850 <_Balloc+0x68>
 8007820:	2101      	movs	r1, #1
 8007822:	fa01 f605 	lsl.w	r6, r1, r5
 8007826:	1d72      	adds	r2, r6, #5
 8007828:	0092      	lsls	r2, r2, #2
 800782a:	4620      	mov	r0, r4
 800782c:	f000 fe50 	bl	80084d0 <_calloc_r>
 8007830:	b160      	cbz	r0, 800784c <_Balloc+0x64>
 8007832:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007836:	e00e      	b.n	8007856 <_Balloc+0x6e>
 8007838:	2221      	movs	r2, #33	@ 0x21
 800783a:	2104      	movs	r1, #4
 800783c:	4620      	mov	r0, r4
 800783e:	f000 fe47 	bl	80084d0 <_calloc_r>
 8007842:	69e3      	ldr	r3, [r4, #28]
 8007844:	60f0      	str	r0, [r6, #12]
 8007846:	68db      	ldr	r3, [r3, #12]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d1e4      	bne.n	8007816 <_Balloc+0x2e>
 800784c:	2000      	movs	r0, #0
 800784e:	bd70      	pop	{r4, r5, r6, pc}
 8007850:	6802      	ldr	r2, [r0, #0]
 8007852:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007856:	2300      	movs	r3, #0
 8007858:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800785c:	e7f7      	b.n	800784e <_Balloc+0x66>
 800785e:	bf00      	nop
 8007860:	08008c99 	.word	0x08008c99
 8007864:	08008d19 	.word	0x08008d19

08007868 <_Bfree>:
 8007868:	b570      	push	{r4, r5, r6, lr}
 800786a:	69c6      	ldr	r6, [r0, #28]
 800786c:	4605      	mov	r5, r0
 800786e:	460c      	mov	r4, r1
 8007870:	b976      	cbnz	r6, 8007890 <_Bfree+0x28>
 8007872:	2010      	movs	r0, #16
 8007874:	f7ff ff02 	bl	800767c <malloc>
 8007878:	4602      	mov	r2, r0
 800787a:	61e8      	str	r0, [r5, #28]
 800787c:	b920      	cbnz	r0, 8007888 <_Bfree+0x20>
 800787e:	4b09      	ldr	r3, [pc, #36]	@ (80078a4 <_Bfree+0x3c>)
 8007880:	4809      	ldr	r0, [pc, #36]	@ (80078a8 <_Bfree+0x40>)
 8007882:	218f      	movs	r1, #143	@ 0x8f
 8007884:	f000 fe06 	bl	8008494 <__assert_func>
 8007888:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800788c:	6006      	str	r6, [r0, #0]
 800788e:	60c6      	str	r6, [r0, #12]
 8007890:	b13c      	cbz	r4, 80078a2 <_Bfree+0x3a>
 8007892:	69eb      	ldr	r3, [r5, #28]
 8007894:	6862      	ldr	r2, [r4, #4]
 8007896:	68db      	ldr	r3, [r3, #12]
 8007898:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800789c:	6021      	str	r1, [r4, #0]
 800789e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80078a2:	bd70      	pop	{r4, r5, r6, pc}
 80078a4:	08008c99 	.word	0x08008c99
 80078a8:	08008d19 	.word	0x08008d19

080078ac <__multadd>:
 80078ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078b0:	690d      	ldr	r5, [r1, #16]
 80078b2:	4607      	mov	r7, r0
 80078b4:	460c      	mov	r4, r1
 80078b6:	461e      	mov	r6, r3
 80078b8:	f101 0c14 	add.w	ip, r1, #20
 80078bc:	2000      	movs	r0, #0
 80078be:	f8dc 3000 	ldr.w	r3, [ip]
 80078c2:	b299      	uxth	r1, r3
 80078c4:	fb02 6101 	mla	r1, r2, r1, r6
 80078c8:	0c1e      	lsrs	r6, r3, #16
 80078ca:	0c0b      	lsrs	r3, r1, #16
 80078cc:	fb02 3306 	mla	r3, r2, r6, r3
 80078d0:	b289      	uxth	r1, r1
 80078d2:	3001      	adds	r0, #1
 80078d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80078d8:	4285      	cmp	r5, r0
 80078da:	f84c 1b04 	str.w	r1, [ip], #4
 80078de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80078e2:	dcec      	bgt.n	80078be <__multadd+0x12>
 80078e4:	b30e      	cbz	r6, 800792a <__multadd+0x7e>
 80078e6:	68a3      	ldr	r3, [r4, #8]
 80078e8:	42ab      	cmp	r3, r5
 80078ea:	dc19      	bgt.n	8007920 <__multadd+0x74>
 80078ec:	6861      	ldr	r1, [r4, #4]
 80078ee:	4638      	mov	r0, r7
 80078f0:	3101      	adds	r1, #1
 80078f2:	f7ff ff79 	bl	80077e8 <_Balloc>
 80078f6:	4680      	mov	r8, r0
 80078f8:	b928      	cbnz	r0, 8007906 <__multadd+0x5a>
 80078fa:	4602      	mov	r2, r0
 80078fc:	4b0c      	ldr	r3, [pc, #48]	@ (8007930 <__multadd+0x84>)
 80078fe:	480d      	ldr	r0, [pc, #52]	@ (8007934 <__multadd+0x88>)
 8007900:	21ba      	movs	r1, #186	@ 0xba
 8007902:	f000 fdc7 	bl	8008494 <__assert_func>
 8007906:	6922      	ldr	r2, [r4, #16]
 8007908:	3202      	adds	r2, #2
 800790a:	f104 010c 	add.w	r1, r4, #12
 800790e:	0092      	lsls	r2, r2, #2
 8007910:	300c      	adds	r0, #12
 8007912:	f000 fdb1 	bl	8008478 <memcpy>
 8007916:	4621      	mov	r1, r4
 8007918:	4638      	mov	r0, r7
 800791a:	f7ff ffa5 	bl	8007868 <_Bfree>
 800791e:	4644      	mov	r4, r8
 8007920:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007924:	3501      	adds	r5, #1
 8007926:	615e      	str	r6, [r3, #20]
 8007928:	6125      	str	r5, [r4, #16]
 800792a:	4620      	mov	r0, r4
 800792c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007930:	08008d08 	.word	0x08008d08
 8007934:	08008d19 	.word	0x08008d19

08007938 <__hi0bits>:
 8007938:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800793c:	4603      	mov	r3, r0
 800793e:	bf36      	itet	cc
 8007940:	0403      	lslcc	r3, r0, #16
 8007942:	2000      	movcs	r0, #0
 8007944:	2010      	movcc	r0, #16
 8007946:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800794a:	bf3c      	itt	cc
 800794c:	021b      	lslcc	r3, r3, #8
 800794e:	3008      	addcc	r0, #8
 8007950:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007954:	bf3c      	itt	cc
 8007956:	011b      	lslcc	r3, r3, #4
 8007958:	3004      	addcc	r0, #4
 800795a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800795e:	bf3c      	itt	cc
 8007960:	009b      	lslcc	r3, r3, #2
 8007962:	3002      	addcc	r0, #2
 8007964:	2b00      	cmp	r3, #0
 8007966:	db05      	blt.n	8007974 <__hi0bits+0x3c>
 8007968:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800796c:	f100 0001 	add.w	r0, r0, #1
 8007970:	bf08      	it	eq
 8007972:	2020      	moveq	r0, #32
 8007974:	4770      	bx	lr

08007976 <__lo0bits>:
 8007976:	6803      	ldr	r3, [r0, #0]
 8007978:	4602      	mov	r2, r0
 800797a:	f013 0007 	ands.w	r0, r3, #7
 800797e:	d00b      	beq.n	8007998 <__lo0bits+0x22>
 8007980:	07d9      	lsls	r1, r3, #31
 8007982:	d421      	bmi.n	80079c8 <__lo0bits+0x52>
 8007984:	0798      	lsls	r0, r3, #30
 8007986:	bf49      	itett	mi
 8007988:	085b      	lsrmi	r3, r3, #1
 800798a:	089b      	lsrpl	r3, r3, #2
 800798c:	2001      	movmi	r0, #1
 800798e:	6013      	strmi	r3, [r2, #0]
 8007990:	bf5c      	itt	pl
 8007992:	6013      	strpl	r3, [r2, #0]
 8007994:	2002      	movpl	r0, #2
 8007996:	4770      	bx	lr
 8007998:	b299      	uxth	r1, r3
 800799a:	b909      	cbnz	r1, 80079a0 <__lo0bits+0x2a>
 800799c:	0c1b      	lsrs	r3, r3, #16
 800799e:	2010      	movs	r0, #16
 80079a0:	b2d9      	uxtb	r1, r3
 80079a2:	b909      	cbnz	r1, 80079a8 <__lo0bits+0x32>
 80079a4:	3008      	adds	r0, #8
 80079a6:	0a1b      	lsrs	r3, r3, #8
 80079a8:	0719      	lsls	r1, r3, #28
 80079aa:	bf04      	itt	eq
 80079ac:	091b      	lsreq	r3, r3, #4
 80079ae:	3004      	addeq	r0, #4
 80079b0:	0799      	lsls	r1, r3, #30
 80079b2:	bf04      	itt	eq
 80079b4:	089b      	lsreq	r3, r3, #2
 80079b6:	3002      	addeq	r0, #2
 80079b8:	07d9      	lsls	r1, r3, #31
 80079ba:	d403      	bmi.n	80079c4 <__lo0bits+0x4e>
 80079bc:	085b      	lsrs	r3, r3, #1
 80079be:	f100 0001 	add.w	r0, r0, #1
 80079c2:	d003      	beq.n	80079cc <__lo0bits+0x56>
 80079c4:	6013      	str	r3, [r2, #0]
 80079c6:	4770      	bx	lr
 80079c8:	2000      	movs	r0, #0
 80079ca:	4770      	bx	lr
 80079cc:	2020      	movs	r0, #32
 80079ce:	4770      	bx	lr

080079d0 <__i2b>:
 80079d0:	b510      	push	{r4, lr}
 80079d2:	460c      	mov	r4, r1
 80079d4:	2101      	movs	r1, #1
 80079d6:	f7ff ff07 	bl	80077e8 <_Balloc>
 80079da:	4602      	mov	r2, r0
 80079dc:	b928      	cbnz	r0, 80079ea <__i2b+0x1a>
 80079de:	4b05      	ldr	r3, [pc, #20]	@ (80079f4 <__i2b+0x24>)
 80079e0:	4805      	ldr	r0, [pc, #20]	@ (80079f8 <__i2b+0x28>)
 80079e2:	f240 1145 	movw	r1, #325	@ 0x145
 80079e6:	f000 fd55 	bl	8008494 <__assert_func>
 80079ea:	2301      	movs	r3, #1
 80079ec:	6144      	str	r4, [r0, #20]
 80079ee:	6103      	str	r3, [r0, #16]
 80079f0:	bd10      	pop	{r4, pc}
 80079f2:	bf00      	nop
 80079f4:	08008d08 	.word	0x08008d08
 80079f8:	08008d19 	.word	0x08008d19

080079fc <__multiply>:
 80079fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a00:	4614      	mov	r4, r2
 8007a02:	690a      	ldr	r2, [r1, #16]
 8007a04:	6923      	ldr	r3, [r4, #16]
 8007a06:	429a      	cmp	r2, r3
 8007a08:	bfa8      	it	ge
 8007a0a:	4623      	movge	r3, r4
 8007a0c:	460f      	mov	r7, r1
 8007a0e:	bfa4      	itt	ge
 8007a10:	460c      	movge	r4, r1
 8007a12:	461f      	movge	r7, r3
 8007a14:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007a18:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007a1c:	68a3      	ldr	r3, [r4, #8]
 8007a1e:	6861      	ldr	r1, [r4, #4]
 8007a20:	eb0a 0609 	add.w	r6, sl, r9
 8007a24:	42b3      	cmp	r3, r6
 8007a26:	b085      	sub	sp, #20
 8007a28:	bfb8      	it	lt
 8007a2a:	3101      	addlt	r1, #1
 8007a2c:	f7ff fedc 	bl	80077e8 <_Balloc>
 8007a30:	b930      	cbnz	r0, 8007a40 <__multiply+0x44>
 8007a32:	4602      	mov	r2, r0
 8007a34:	4b44      	ldr	r3, [pc, #272]	@ (8007b48 <__multiply+0x14c>)
 8007a36:	4845      	ldr	r0, [pc, #276]	@ (8007b4c <__multiply+0x150>)
 8007a38:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007a3c:	f000 fd2a 	bl	8008494 <__assert_func>
 8007a40:	f100 0514 	add.w	r5, r0, #20
 8007a44:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007a48:	462b      	mov	r3, r5
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	4543      	cmp	r3, r8
 8007a4e:	d321      	bcc.n	8007a94 <__multiply+0x98>
 8007a50:	f107 0114 	add.w	r1, r7, #20
 8007a54:	f104 0214 	add.w	r2, r4, #20
 8007a58:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007a5c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007a60:	9302      	str	r3, [sp, #8]
 8007a62:	1b13      	subs	r3, r2, r4
 8007a64:	3b15      	subs	r3, #21
 8007a66:	f023 0303 	bic.w	r3, r3, #3
 8007a6a:	3304      	adds	r3, #4
 8007a6c:	f104 0715 	add.w	r7, r4, #21
 8007a70:	42ba      	cmp	r2, r7
 8007a72:	bf38      	it	cc
 8007a74:	2304      	movcc	r3, #4
 8007a76:	9301      	str	r3, [sp, #4]
 8007a78:	9b02      	ldr	r3, [sp, #8]
 8007a7a:	9103      	str	r1, [sp, #12]
 8007a7c:	428b      	cmp	r3, r1
 8007a7e:	d80c      	bhi.n	8007a9a <__multiply+0x9e>
 8007a80:	2e00      	cmp	r6, #0
 8007a82:	dd03      	ble.n	8007a8c <__multiply+0x90>
 8007a84:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d05b      	beq.n	8007b44 <__multiply+0x148>
 8007a8c:	6106      	str	r6, [r0, #16]
 8007a8e:	b005      	add	sp, #20
 8007a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a94:	f843 2b04 	str.w	r2, [r3], #4
 8007a98:	e7d8      	b.n	8007a4c <__multiply+0x50>
 8007a9a:	f8b1 a000 	ldrh.w	sl, [r1]
 8007a9e:	f1ba 0f00 	cmp.w	sl, #0
 8007aa2:	d024      	beq.n	8007aee <__multiply+0xf2>
 8007aa4:	f104 0e14 	add.w	lr, r4, #20
 8007aa8:	46a9      	mov	r9, r5
 8007aaa:	f04f 0c00 	mov.w	ip, #0
 8007aae:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007ab2:	f8d9 3000 	ldr.w	r3, [r9]
 8007ab6:	fa1f fb87 	uxth.w	fp, r7
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	fb0a 330b 	mla	r3, sl, fp, r3
 8007ac0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007ac4:	f8d9 7000 	ldr.w	r7, [r9]
 8007ac8:	4463      	add	r3, ip
 8007aca:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007ace:	fb0a c70b 	mla	r7, sl, fp, ip
 8007ad2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007ad6:	b29b      	uxth	r3, r3
 8007ad8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007adc:	4572      	cmp	r2, lr
 8007ade:	f849 3b04 	str.w	r3, [r9], #4
 8007ae2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007ae6:	d8e2      	bhi.n	8007aae <__multiply+0xb2>
 8007ae8:	9b01      	ldr	r3, [sp, #4]
 8007aea:	f845 c003 	str.w	ip, [r5, r3]
 8007aee:	9b03      	ldr	r3, [sp, #12]
 8007af0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007af4:	3104      	adds	r1, #4
 8007af6:	f1b9 0f00 	cmp.w	r9, #0
 8007afa:	d021      	beq.n	8007b40 <__multiply+0x144>
 8007afc:	682b      	ldr	r3, [r5, #0]
 8007afe:	f104 0c14 	add.w	ip, r4, #20
 8007b02:	46ae      	mov	lr, r5
 8007b04:	f04f 0a00 	mov.w	sl, #0
 8007b08:	f8bc b000 	ldrh.w	fp, [ip]
 8007b0c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007b10:	fb09 770b 	mla	r7, r9, fp, r7
 8007b14:	4457      	add	r7, sl
 8007b16:	b29b      	uxth	r3, r3
 8007b18:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007b1c:	f84e 3b04 	str.w	r3, [lr], #4
 8007b20:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007b24:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007b28:	f8be 3000 	ldrh.w	r3, [lr]
 8007b2c:	fb09 330a 	mla	r3, r9, sl, r3
 8007b30:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007b34:	4562      	cmp	r2, ip
 8007b36:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007b3a:	d8e5      	bhi.n	8007b08 <__multiply+0x10c>
 8007b3c:	9f01      	ldr	r7, [sp, #4]
 8007b3e:	51eb      	str	r3, [r5, r7]
 8007b40:	3504      	adds	r5, #4
 8007b42:	e799      	b.n	8007a78 <__multiply+0x7c>
 8007b44:	3e01      	subs	r6, #1
 8007b46:	e79b      	b.n	8007a80 <__multiply+0x84>
 8007b48:	08008d08 	.word	0x08008d08
 8007b4c:	08008d19 	.word	0x08008d19

08007b50 <__pow5mult>:
 8007b50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b54:	4615      	mov	r5, r2
 8007b56:	f012 0203 	ands.w	r2, r2, #3
 8007b5a:	4607      	mov	r7, r0
 8007b5c:	460e      	mov	r6, r1
 8007b5e:	d007      	beq.n	8007b70 <__pow5mult+0x20>
 8007b60:	4c25      	ldr	r4, [pc, #148]	@ (8007bf8 <__pow5mult+0xa8>)
 8007b62:	3a01      	subs	r2, #1
 8007b64:	2300      	movs	r3, #0
 8007b66:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007b6a:	f7ff fe9f 	bl	80078ac <__multadd>
 8007b6e:	4606      	mov	r6, r0
 8007b70:	10ad      	asrs	r5, r5, #2
 8007b72:	d03d      	beq.n	8007bf0 <__pow5mult+0xa0>
 8007b74:	69fc      	ldr	r4, [r7, #28]
 8007b76:	b97c      	cbnz	r4, 8007b98 <__pow5mult+0x48>
 8007b78:	2010      	movs	r0, #16
 8007b7a:	f7ff fd7f 	bl	800767c <malloc>
 8007b7e:	4602      	mov	r2, r0
 8007b80:	61f8      	str	r0, [r7, #28]
 8007b82:	b928      	cbnz	r0, 8007b90 <__pow5mult+0x40>
 8007b84:	4b1d      	ldr	r3, [pc, #116]	@ (8007bfc <__pow5mult+0xac>)
 8007b86:	481e      	ldr	r0, [pc, #120]	@ (8007c00 <__pow5mult+0xb0>)
 8007b88:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007b8c:	f000 fc82 	bl	8008494 <__assert_func>
 8007b90:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007b94:	6004      	str	r4, [r0, #0]
 8007b96:	60c4      	str	r4, [r0, #12]
 8007b98:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007b9c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007ba0:	b94c      	cbnz	r4, 8007bb6 <__pow5mult+0x66>
 8007ba2:	f240 2171 	movw	r1, #625	@ 0x271
 8007ba6:	4638      	mov	r0, r7
 8007ba8:	f7ff ff12 	bl	80079d0 <__i2b>
 8007bac:	2300      	movs	r3, #0
 8007bae:	f8c8 0008 	str.w	r0, [r8, #8]
 8007bb2:	4604      	mov	r4, r0
 8007bb4:	6003      	str	r3, [r0, #0]
 8007bb6:	f04f 0900 	mov.w	r9, #0
 8007bba:	07eb      	lsls	r3, r5, #31
 8007bbc:	d50a      	bpl.n	8007bd4 <__pow5mult+0x84>
 8007bbe:	4631      	mov	r1, r6
 8007bc0:	4622      	mov	r2, r4
 8007bc2:	4638      	mov	r0, r7
 8007bc4:	f7ff ff1a 	bl	80079fc <__multiply>
 8007bc8:	4631      	mov	r1, r6
 8007bca:	4680      	mov	r8, r0
 8007bcc:	4638      	mov	r0, r7
 8007bce:	f7ff fe4b 	bl	8007868 <_Bfree>
 8007bd2:	4646      	mov	r6, r8
 8007bd4:	106d      	asrs	r5, r5, #1
 8007bd6:	d00b      	beq.n	8007bf0 <__pow5mult+0xa0>
 8007bd8:	6820      	ldr	r0, [r4, #0]
 8007bda:	b938      	cbnz	r0, 8007bec <__pow5mult+0x9c>
 8007bdc:	4622      	mov	r2, r4
 8007bde:	4621      	mov	r1, r4
 8007be0:	4638      	mov	r0, r7
 8007be2:	f7ff ff0b 	bl	80079fc <__multiply>
 8007be6:	6020      	str	r0, [r4, #0]
 8007be8:	f8c0 9000 	str.w	r9, [r0]
 8007bec:	4604      	mov	r4, r0
 8007bee:	e7e4      	b.n	8007bba <__pow5mult+0x6a>
 8007bf0:	4630      	mov	r0, r6
 8007bf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bf6:	bf00      	nop
 8007bf8:	08008d74 	.word	0x08008d74
 8007bfc:	08008c99 	.word	0x08008c99
 8007c00:	08008d19 	.word	0x08008d19

08007c04 <__lshift>:
 8007c04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c08:	460c      	mov	r4, r1
 8007c0a:	6849      	ldr	r1, [r1, #4]
 8007c0c:	6923      	ldr	r3, [r4, #16]
 8007c0e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007c12:	68a3      	ldr	r3, [r4, #8]
 8007c14:	4607      	mov	r7, r0
 8007c16:	4691      	mov	r9, r2
 8007c18:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007c1c:	f108 0601 	add.w	r6, r8, #1
 8007c20:	42b3      	cmp	r3, r6
 8007c22:	db0b      	blt.n	8007c3c <__lshift+0x38>
 8007c24:	4638      	mov	r0, r7
 8007c26:	f7ff fddf 	bl	80077e8 <_Balloc>
 8007c2a:	4605      	mov	r5, r0
 8007c2c:	b948      	cbnz	r0, 8007c42 <__lshift+0x3e>
 8007c2e:	4602      	mov	r2, r0
 8007c30:	4b28      	ldr	r3, [pc, #160]	@ (8007cd4 <__lshift+0xd0>)
 8007c32:	4829      	ldr	r0, [pc, #164]	@ (8007cd8 <__lshift+0xd4>)
 8007c34:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007c38:	f000 fc2c 	bl	8008494 <__assert_func>
 8007c3c:	3101      	adds	r1, #1
 8007c3e:	005b      	lsls	r3, r3, #1
 8007c40:	e7ee      	b.n	8007c20 <__lshift+0x1c>
 8007c42:	2300      	movs	r3, #0
 8007c44:	f100 0114 	add.w	r1, r0, #20
 8007c48:	f100 0210 	add.w	r2, r0, #16
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	4553      	cmp	r3, sl
 8007c50:	db33      	blt.n	8007cba <__lshift+0xb6>
 8007c52:	6920      	ldr	r0, [r4, #16]
 8007c54:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007c58:	f104 0314 	add.w	r3, r4, #20
 8007c5c:	f019 091f 	ands.w	r9, r9, #31
 8007c60:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007c64:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007c68:	d02b      	beq.n	8007cc2 <__lshift+0xbe>
 8007c6a:	f1c9 0e20 	rsb	lr, r9, #32
 8007c6e:	468a      	mov	sl, r1
 8007c70:	2200      	movs	r2, #0
 8007c72:	6818      	ldr	r0, [r3, #0]
 8007c74:	fa00 f009 	lsl.w	r0, r0, r9
 8007c78:	4310      	orrs	r0, r2
 8007c7a:	f84a 0b04 	str.w	r0, [sl], #4
 8007c7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c82:	459c      	cmp	ip, r3
 8007c84:	fa22 f20e 	lsr.w	r2, r2, lr
 8007c88:	d8f3      	bhi.n	8007c72 <__lshift+0x6e>
 8007c8a:	ebac 0304 	sub.w	r3, ip, r4
 8007c8e:	3b15      	subs	r3, #21
 8007c90:	f023 0303 	bic.w	r3, r3, #3
 8007c94:	3304      	adds	r3, #4
 8007c96:	f104 0015 	add.w	r0, r4, #21
 8007c9a:	4584      	cmp	ip, r0
 8007c9c:	bf38      	it	cc
 8007c9e:	2304      	movcc	r3, #4
 8007ca0:	50ca      	str	r2, [r1, r3]
 8007ca2:	b10a      	cbz	r2, 8007ca8 <__lshift+0xa4>
 8007ca4:	f108 0602 	add.w	r6, r8, #2
 8007ca8:	3e01      	subs	r6, #1
 8007caa:	4638      	mov	r0, r7
 8007cac:	612e      	str	r6, [r5, #16]
 8007cae:	4621      	mov	r1, r4
 8007cb0:	f7ff fdda 	bl	8007868 <_Bfree>
 8007cb4:	4628      	mov	r0, r5
 8007cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cba:	f842 0f04 	str.w	r0, [r2, #4]!
 8007cbe:	3301      	adds	r3, #1
 8007cc0:	e7c5      	b.n	8007c4e <__lshift+0x4a>
 8007cc2:	3904      	subs	r1, #4
 8007cc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cc8:	f841 2f04 	str.w	r2, [r1, #4]!
 8007ccc:	459c      	cmp	ip, r3
 8007cce:	d8f9      	bhi.n	8007cc4 <__lshift+0xc0>
 8007cd0:	e7ea      	b.n	8007ca8 <__lshift+0xa4>
 8007cd2:	bf00      	nop
 8007cd4:	08008d08 	.word	0x08008d08
 8007cd8:	08008d19 	.word	0x08008d19

08007cdc <__mcmp>:
 8007cdc:	690a      	ldr	r2, [r1, #16]
 8007cde:	4603      	mov	r3, r0
 8007ce0:	6900      	ldr	r0, [r0, #16]
 8007ce2:	1a80      	subs	r0, r0, r2
 8007ce4:	b530      	push	{r4, r5, lr}
 8007ce6:	d10e      	bne.n	8007d06 <__mcmp+0x2a>
 8007ce8:	3314      	adds	r3, #20
 8007cea:	3114      	adds	r1, #20
 8007cec:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007cf0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007cf4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007cf8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007cfc:	4295      	cmp	r5, r2
 8007cfe:	d003      	beq.n	8007d08 <__mcmp+0x2c>
 8007d00:	d205      	bcs.n	8007d0e <__mcmp+0x32>
 8007d02:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007d06:	bd30      	pop	{r4, r5, pc}
 8007d08:	42a3      	cmp	r3, r4
 8007d0a:	d3f3      	bcc.n	8007cf4 <__mcmp+0x18>
 8007d0c:	e7fb      	b.n	8007d06 <__mcmp+0x2a>
 8007d0e:	2001      	movs	r0, #1
 8007d10:	e7f9      	b.n	8007d06 <__mcmp+0x2a>
	...

08007d14 <__mdiff>:
 8007d14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d18:	4689      	mov	r9, r1
 8007d1a:	4606      	mov	r6, r0
 8007d1c:	4611      	mov	r1, r2
 8007d1e:	4648      	mov	r0, r9
 8007d20:	4614      	mov	r4, r2
 8007d22:	f7ff ffdb 	bl	8007cdc <__mcmp>
 8007d26:	1e05      	subs	r5, r0, #0
 8007d28:	d112      	bne.n	8007d50 <__mdiff+0x3c>
 8007d2a:	4629      	mov	r1, r5
 8007d2c:	4630      	mov	r0, r6
 8007d2e:	f7ff fd5b 	bl	80077e8 <_Balloc>
 8007d32:	4602      	mov	r2, r0
 8007d34:	b928      	cbnz	r0, 8007d42 <__mdiff+0x2e>
 8007d36:	4b3f      	ldr	r3, [pc, #252]	@ (8007e34 <__mdiff+0x120>)
 8007d38:	f240 2137 	movw	r1, #567	@ 0x237
 8007d3c:	483e      	ldr	r0, [pc, #248]	@ (8007e38 <__mdiff+0x124>)
 8007d3e:	f000 fba9 	bl	8008494 <__assert_func>
 8007d42:	2301      	movs	r3, #1
 8007d44:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007d48:	4610      	mov	r0, r2
 8007d4a:	b003      	add	sp, #12
 8007d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d50:	bfbc      	itt	lt
 8007d52:	464b      	movlt	r3, r9
 8007d54:	46a1      	movlt	r9, r4
 8007d56:	4630      	mov	r0, r6
 8007d58:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007d5c:	bfba      	itte	lt
 8007d5e:	461c      	movlt	r4, r3
 8007d60:	2501      	movlt	r5, #1
 8007d62:	2500      	movge	r5, #0
 8007d64:	f7ff fd40 	bl	80077e8 <_Balloc>
 8007d68:	4602      	mov	r2, r0
 8007d6a:	b918      	cbnz	r0, 8007d74 <__mdiff+0x60>
 8007d6c:	4b31      	ldr	r3, [pc, #196]	@ (8007e34 <__mdiff+0x120>)
 8007d6e:	f240 2145 	movw	r1, #581	@ 0x245
 8007d72:	e7e3      	b.n	8007d3c <__mdiff+0x28>
 8007d74:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007d78:	6926      	ldr	r6, [r4, #16]
 8007d7a:	60c5      	str	r5, [r0, #12]
 8007d7c:	f109 0310 	add.w	r3, r9, #16
 8007d80:	f109 0514 	add.w	r5, r9, #20
 8007d84:	f104 0e14 	add.w	lr, r4, #20
 8007d88:	f100 0b14 	add.w	fp, r0, #20
 8007d8c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007d90:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007d94:	9301      	str	r3, [sp, #4]
 8007d96:	46d9      	mov	r9, fp
 8007d98:	f04f 0c00 	mov.w	ip, #0
 8007d9c:	9b01      	ldr	r3, [sp, #4]
 8007d9e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007da2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007da6:	9301      	str	r3, [sp, #4]
 8007da8:	fa1f f38a 	uxth.w	r3, sl
 8007dac:	4619      	mov	r1, r3
 8007dae:	b283      	uxth	r3, r0
 8007db0:	1acb      	subs	r3, r1, r3
 8007db2:	0c00      	lsrs	r0, r0, #16
 8007db4:	4463      	add	r3, ip
 8007db6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007dba:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007dc4:	4576      	cmp	r6, lr
 8007dc6:	f849 3b04 	str.w	r3, [r9], #4
 8007dca:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007dce:	d8e5      	bhi.n	8007d9c <__mdiff+0x88>
 8007dd0:	1b33      	subs	r3, r6, r4
 8007dd2:	3b15      	subs	r3, #21
 8007dd4:	f023 0303 	bic.w	r3, r3, #3
 8007dd8:	3415      	adds	r4, #21
 8007dda:	3304      	adds	r3, #4
 8007ddc:	42a6      	cmp	r6, r4
 8007dde:	bf38      	it	cc
 8007de0:	2304      	movcc	r3, #4
 8007de2:	441d      	add	r5, r3
 8007de4:	445b      	add	r3, fp
 8007de6:	461e      	mov	r6, r3
 8007de8:	462c      	mov	r4, r5
 8007dea:	4544      	cmp	r4, r8
 8007dec:	d30e      	bcc.n	8007e0c <__mdiff+0xf8>
 8007dee:	f108 0103 	add.w	r1, r8, #3
 8007df2:	1b49      	subs	r1, r1, r5
 8007df4:	f021 0103 	bic.w	r1, r1, #3
 8007df8:	3d03      	subs	r5, #3
 8007dfa:	45a8      	cmp	r8, r5
 8007dfc:	bf38      	it	cc
 8007dfe:	2100      	movcc	r1, #0
 8007e00:	440b      	add	r3, r1
 8007e02:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007e06:	b191      	cbz	r1, 8007e2e <__mdiff+0x11a>
 8007e08:	6117      	str	r7, [r2, #16]
 8007e0a:	e79d      	b.n	8007d48 <__mdiff+0x34>
 8007e0c:	f854 1b04 	ldr.w	r1, [r4], #4
 8007e10:	46e6      	mov	lr, ip
 8007e12:	0c08      	lsrs	r0, r1, #16
 8007e14:	fa1c fc81 	uxtah	ip, ip, r1
 8007e18:	4471      	add	r1, lr
 8007e1a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007e1e:	b289      	uxth	r1, r1
 8007e20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007e24:	f846 1b04 	str.w	r1, [r6], #4
 8007e28:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007e2c:	e7dd      	b.n	8007dea <__mdiff+0xd6>
 8007e2e:	3f01      	subs	r7, #1
 8007e30:	e7e7      	b.n	8007e02 <__mdiff+0xee>
 8007e32:	bf00      	nop
 8007e34:	08008d08 	.word	0x08008d08
 8007e38:	08008d19 	.word	0x08008d19

08007e3c <__d2b>:
 8007e3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007e40:	460f      	mov	r7, r1
 8007e42:	2101      	movs	r1, #1
 8007e44:	ec59 8b10 	vmov	r8, r9, d0
 8007e48:	4616      	mov	r6, r2
 8007e4a:	f7ff fccd 	bl	80077e8 <_Balloc>
 8007e4e:	4604      	mov	r4, r0
 8007e50:	b930      	cbnz	r0, 8007e60 <__d2b+0x24>
 8007e52:	4602      	mov	r2, r0
 8007e54:	4b23      	ldr	r3, [pc, #140]	@ (8007ee4 <__d2b+0xa8>)
 8007e56:	4824      	ldr	r0, [pc, #144]	@ (8007ee8 <__d2b+0xac>)
 8007e58:	f240 310f 	movw	r1, #783	@ 0x30f
 8007e5c:	f000 fb1a 	bl	8008494 <__assert_func>
 8007e60:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007e64:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007e68:	b10d      	cbz	r5, 8007e6e <__d2b+0x32>
 8007e6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007e6e:	9301      	str	r3, [sp, #4]
 8007e70:	f1b8 0300 	subs.w	r3, r8, #0
 8007e74:	d023      	beq.n	8007ebe <__d2b+0x82>
 8007e76:	4668      	mov	r0, sp
 8007e78:	9300      	str	r3, [sp, #0]
 8007e7a:	f7ff fd7c 	bl	8007976 <__lo0bits>
 8007e7e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007e82:	b1d0      	cbz	r0, 8007eba <__d2b+0x7e>
 8007e84:	f1c0 0320 	rsb	r3, r0, #32
 8007e88:	fa02 f303 	lsl.w	r3, r2, r3
 8007e8c:	430b      	orrs	r3, r1
 8007e8e:	40c2      	lsrs	r2, r0
 8007e90:	6163      	str	r3, [r4, #20]
 8007e92:	9201      	str	r2, [sp, #4]
 8007e94:	9b01      	ldr	r3, [sp, #4]
 8007e96:	61a3      	str	r3, [r4, #24]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	bf0c      	ite	eq
 8007e9c:	2201      	moveq	r2, #1
 8007e9e:	2202      	movne	r2, #2
 8007ea0:	6122      	str	r2, [r4, #16]
 8007ea2:	b1a5      	cbz	r5, 8007ece <__d2b+0x92>
 8007ea4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007ea8:	4405      	add	r5, r0
 8007eaa:	603d      	str	r5, [r7, #0]
 8007eac:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007eb0:	6030      	str	r0, [r6, #0]
 8007eb2:	4620      	mov	r0, r4
 8007eb4:	b003      	add	sp, #12
 8007eb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007eba:	6161      	str	r1, [r4, #20]
 8007ebc:	e7ea      	b.n	8007e94 <__d2b+0x58>
 8007ebe:	a801      	add	r0, sp, #4
 8007ec0:	f7ff fd59 	bl	8007976 <__lo0bits>
 8007ec4:	9b01      	ldr	r3, [sp, #4]
 8007ec6:	6163      	str	r3, [r4, #20]
 8007ec8:	3020      	adds	r0, #32
 8007eca:	2201      	movs	r2, #1
 8007ecc:	e7e8      	b.n	8007ea0 <__d2b+0x64>
 8007ece:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007ed2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007ed6:	6038      	str	r0, [r7, #0]
 8007ed8:	6918      	ldr	r0, [r3, #16]
 8007eda:	f7ff fd2d 	bl	8007938 <__hi0bits>
 8007ede:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007ee2:	e7e5      	b.n	8007eb0 <__d2b+0x74>
 8007ee4:	08008d08 	.word	0x08008d08
 8007ee8:	08008d19 	.word	0x08008d19

08007eec <__sfputc_r>:
 8007eec:	6893      	ldr	r3, [r2, #8]
 8007eee:	3b01      	subs	r3, #1
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	b410      	push	{r4}
 8007ef4:	6093      	str	r3, [r2, #8]
 8007ef6:	da08      	bge.n	8007f0a <__sfputc_r+0x1e>
 8007ef8:	6994      	ldr	r4, [r2, #24]
 8007efa:	42a3      	cmp	r3, r4
 8007efc:	db01      	blt.n	8007f02 <__sfputc_r+0x16>
 8007efe:	290a      	cmp	r1, #10
 8007f00:	d103      	bne.n	8007f0a <__sfputc_r+0x1e>
 8007f02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f06:	f000 ba13 	b.w	8008330 <__swbuf_r>
 8007f0a:	6813      	ldr	r3, [r2, #0]
 8007f0c:	1c58      	adds	r0, r3, #1
 8007f0e:	6010      	str	r0, [r2, #0]
 8007f10:	7019      	strb	r1, [r3, #0]
 8007f12:	4608      	mov	r0, r1
 8007f14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f18:	4770      	bx	lr

08007f1a <__sfputs_r>:
 8007f1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f1c:	4606      	mov	r6, r0
 8007f1e:	460f      	mov	r7, r1
 8007f20:	4614      	mov	r4, r2
 8007f22:	18d5      	adds	r5, r2, r3
 8007f24:	42ac      	cmp	r4, r5
 8007f26:	d101      	bne.n	8007f2c <__sfputs_r+0x12>
 8007f28:	2000      	movs	r0, #0
 8007f2a:	e007      	b.n	8007f3c <__sfputs_r+0x22>
 8007f2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f30:	463a      	mov	r2, r7
 8007f32:	4630      	mov	r0, r6
 8007f34:	f7ff ffda 	bl	8007eec <__sfputc_r>
 8007f38:	1c43      	adds	r3, r0, #1
 8007f3a:	d1f3      	bne.n	8007f24 <__sfputs_r+0xa>
 8007f3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007f40 <_vfiprintf_r>:
 8007f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f44:	460d      	mov	r5, r1
 8007f46:	b09d      	sub	sp, #116	@ 0x74
 8007f48:	4614      	mov	r4, r2
 8007f4a:	4698      	mov	r8, r3
 8007f4c:	4606      	mov	r6, r0
 8007f4e:	b118      	cbz	r0, 8007f58 <_vfiprintf_r+0x18>
 8007f50:	6a03      	ldr	r3, [r0, #32]
 8007f52:	b90b      	cbnz	r3, 8007f58 <_vfiprintf_r+0x18>
 8007f54:	f7fe fbe6 	bl	8006724 <__sinit>
 8007f58:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007f5a:	07d9      	lsls	r1, r3, #31
 8007f5c:	d405      	bmi.n	8007f6a <_vfiprintf_r+0x2a>
 8007f5e:	89ab      	ldrh	r3, [r5, #12]
 8007f60:	059a      	lsls	r2, r3, #22
 8007f62:	d402      	bmi.n	8007f6a <_vfiprintf_r+0x2a>
 8007f64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007f66:	f7fe fcee 	bl	8006946 <__retarget_lock_acquire_recursive>
 8007f6a:	89ab      	ldrh	r3, [r5, #12]
 8007f6c:	071b      	lsls	r3, r3, #28
 8007f6e:	d501      	bpl.n	8007f74 <_vfiprintf_r+0x34>
 8007f70:	692b      	ldr	r3, [r5, #16]
 8007f72:	b99b      	cbnz	r3, 8007f9c <_vfiprintf_r+0x5c>
 8007f74:	4629      	mov	r1, r5
 8007f76:	4630      	mov	r0, r6
 8007f78:	f000 fa18 	bl	80083ac <__swsetup_r>
 8007f7c:	b170      	cbz	r0, 8007f9c <_vfiprintf_r+0x5c>
 8007f7e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007f80:	07dc      	lsls	r4, r3, #31
 8007f82:	d504      	bpl.n	8007f8e <_vfiprintf_r+0x4e>
 8007f84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007f88:	b01d      	add	sp, #116	@ 0x74
 8007f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f8e:	89ab      	ldrh	r3, [r5, #12]
 8007f90:	0598      	lsls	r0, r3, #22
 8007f92:	d4f7      	bmi.n	8007f84 <_vfiprintf_r+0x44>
 8007f94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007f96:	f7fe fcd7 	bl	8006948 <__retarget_lock_release_recursive>
 8007f9a:	e7f3      	b.n	8007f84 <_vfiprintf_r+0x44>
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007fa0:	2320      	movs	r3, #32
 8007fa2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007fa6:	f8cd 800c 	str.w	r8, [sp, #12]
 8007faa:	2330      	movs	r3, #48	@ 0x30
 8007fac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800815c <_vfiprintf_r+0x21c>
 8007fb0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007fb4:	f04f 0901 	mov.w	r9, #1
 8007fb8:	4623      	mov	r3, r4
 8007fba:	469a      	mov	sl, r3
 8007fbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007fc0:	b10a      	cbz	r2, 8007fc6 <_vfiprintf_r+0x86>
 8007fc2:	2a25      	cmp	r2, #37	@ 0x25
 8007fc4:	d1f9      	bne.n	8007fba <_vfiprintf_r+0x7a>
 8007fc6:	ebba 0b04 	subs.w	fp, sl, r4
 8007fca:	d00b      	beq.n	8007fe4 <_vfiprintf_r+0xa4>
 8007fcc:	465b      	mov	r3, fp
 8007fce:	4622      	mov	r2, r4
 8007fd0:	4629      	mov	r1, r5
 8007fd2:	4630      	mov	r0, r6
 8007fd4:	f7ff ffa1 	bl	8007f1a <__sfputs_r>
 8007fd8:	3001      	adds	r0, #1
 8007fda:	f000 80a7 	beq.w	800812c <_vfiprintf_r+0x1ec>
 8007fde:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007fe0:	445a      	add	r2, fp
 8007fe2:	9209      	str	r2, [sp, #36]	@ 0x24
 8007fe4:	f89a 3000 	ldrb.w	r3, [sl]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	f000 809f 	beq.w	800812c <_vfiprintf_r+0x1ec>
 8007fee:	2300      	movs	r3, #0
 8007ff0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007ff4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ff8:	f10a 0a01 	add.w	sl, sl, #1
 8007ffc:	9304      	str	r3, [sp, #16]
 8007ffe:	9307      	str	r3, [sp, #28]
 8008000:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008004:	931a      	str	r3, [sp, #104]	@ 0x68
 8008006:	4654      	mov	r4, sl
 8008008:	2205      	movs	r2, #5
 800800a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800800e:	4853      	ldr	r0, [pc, #332]	@ (800815c <_vfiprintf_r+0x21c>)
 8008010:	f7f8 f8e6 	bl	80001e0 <memchr>
 8008014:	9a04      	ldr	r2, [sp, #16]
 8008016:	b9d8      	cbnz	r0, 8008050 <_vfiprintf_r+0x110>
 8008018:	06d1      	lsls	r1, r2, #27
 800801a:	bf44      	itt	mi
 800801c:	2320      	movmi	r3, #32
 800801e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008022:	0713      	lsls	r3, r2, #28
 8008024:	bf44      	itt	mi
 8008026:	232b      	movmi	r3, #43	@ 0x2b
 8008028:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800802c:	f89a 3000 	ldrb.w	r3, [sl]
 8008030:	2b2a      	cmp	r3, #42	@ 0x2a
 8008032:	d015      	beq.n	8008060 <_vfiprintf_r+0x120>
 8008034:	9a07      	ldr	r2, [sp, #28]
 8008036:	4654      	mov	r4, sl
 8008038:	2000      	movs	r0, #0
 800803a:	f04f 0c0a 	mov.w	ip, #10
 800803e:	4621      	mov	r1, r4
 8008040:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008044:	3b30      	subs	r3, #48	@ 0x30
 8008046:	2b09      	cmp	r3, #9
 8008048:	d94b      	bls.n	80080e2 <_vfiprintf_r+0x1a2>
 800804a:	b1b0      	cbz	r0, 800807a <_vfiprintf_r+0x13a>
 800804c:	9207      	str	r2, [sp, #28]
 800804e:	e014      	b.n	800807a <_vfiprintf_r+0x13a>
 8008050:	eba0 0308 	sub.w	r3, r0, r8
 8008054:	fa09 f303 	lsl.w	r3, r9, r3
 8008058:	4313      	orrs	r3, r2
 800805a:	9304      	str	r3, [sp, #16]
 800805c:	46a2      	mov	sl, r4
 800805e:	e7d2      	b.n	8008006 <_vfiprintf_r+0xc6>
 8008060:	9b03      	ldr	r3, [sp, #12]
 8008062:	1d19      	adds	r1, r3, #4
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	9103      	str	r1, [sp, #12]
 8008068:	2b00      	cmp	r3, #0
 800806a:	bfbb      	ittet	lt
 800806c:	425b      	neglt	r3, r3
 800806e:	f042 0202 	orrlt.w	r2, r2, #2
 8008072:	9307      	strge	r3, [sp, #28]
 8008074:	9307      	strlt	r3, [sp, #28]
 8008076:	bfb8      	it	lt
 8008078:	9204      	strlt	r2, [sp, #16]
 800807a:	7823      	ldrb	r3, [r4, #0]
 800807c:	2b2e      	cmp	r3, #46	@ 0x2e
 800807e:	d10a      	bne.n	8008096 <_vfiprintf_r+0x156>
 8008080:	7863      	ldrb	r3, [r4, #1]
 8008082:	2b2a      	cmp	r3, #42	@ 0x2a
 8008084:	d132      	bne.n	80080ec <_vfiprintf_r+0x1ac>
 8008086:	9b03      	ldr	r3, [sp, #12]
 8008088:	1d1a      	adds	r2, r3, #4
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	9203      	str	r2, [sp, #12]
 800808e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008092:	3402      	adds	r4, #2
 8008094:	9305      	str	r3, [sp, #20]
 8008096:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800816c <_vfiprintf_r+0x22c>
 800809a:	7821      	ldrb	r1, [r4, #0]
 800809c:	2203      	movs	r2, #3
 800809e:	4650      	mov	r0, sl
 80080a0:	f7f8 f89e 	bl	80001e0 <memchr>
 80080a4:	b138      	cbz	r0, 80080b6 <_vfiprintf_r+0x176>
 80080a6:	9b04      	ldr	r3, [sp, #16]
 80080a8:	eba0 000a 	sub.w	r0, r0, sl
 80080ac:	2240      	movs	r2, #64	@ 0x40
 80080ae:	4082      	lsls	r2, r0
 80080b0:	4313      	orrs	r3, r2
 80080b2:	3401      	adds	r4, #1
 80080b4:	9304      	str	r3, [sp, #16]
 80080b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080ba:	4829      	ldr	r0, [pc, #164]	@ (8008160 <_vfiprintf_r+0x220>)
 80080bc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80080c0:	2206      	movs	r2, #6
 80080c2:	f7f8 f88d 	bl	80001e0 <memchr>
 80080c6:	2800      	cmp	r0, #0
 80080c8:	d03f      	beq.n	800814a <_vfiprintf_r+0x20a>
 80080ca:	4b26      	ldr	r3, [pc, #152]	@ (8008164 <_vfiprintf_r+0x224>)
 80080cc:	bb1b      	cbnz	r3, 8008116 <_vfiprintf_r+0x1d6>
 80080ce:	9b03      	ldr	r3, [sp, #12]
 80080d0:	3307      	adds	r3, #7
 80080d2:	f023 0307 	bic.w	r3, r3, #7
 80080d6:	3308      	adds	r3, #8
 80080d8:	9303      	str	r3, [sp, #12]
 80080da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080dc:	443b      	add	r3, r7
 80080de:	9309      	str	r3, [sp, #36]	@ 0x24
 80080e0:	e76a      	b.n	8007fb8 <_vfiprintf_r+0x78>
 80080e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80080e6:	460c      	mov	r4, r1
 80080e8:	2001      	movs	r0, #1
 80080ea:	e7a8      	b.n	800803e <_vfiprintf_r+0xfe>
 80080ec:	2300      	movs	r3, #0
 80080ee:	3401      	adds	r4, #1
 80080f0:	9305      	str	r3, [sp, #20]
 80080f2:	4619      	mov	r1, r3
 80080f4:	f04f 0c0a 	mov.w	ip, #10
 80080f8:	4620      	mov	r0, r4
 80080fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80080fe:	3a30      	subs	r2, #48	@ 0x30
 8008100:	2a09      	cmp	r2, #9
 8008102:	d903      	bls.n	800810c <_vfiprintf_r+0x1cc>
 8008104:	2b00      	cmp	r3, #0
 8008106:	d0c6      	beq.n	8008096 <_vfiprintf_r+0x156>
 8008108:	9105      	str	r1, [sp, #20]
 800810a:	e7c4      	b.n	8008096 <_vfiprintf_r+0x156>
 800810c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008110:	4604      	mov	r4, r0
 8008112:	2301      	movs	r3, #1
 8008114:	e7f0      	b.n	80080f8 <_vfiprintf_r+0x1b8>
 8008116:	ab03      	add	r3, sp, #12
 8008118:	9300      	str	r3, [sp, #0]
 800811a:	462a      	mov	r2, r5
 800811c:	4b12      	ldr	r3, [pc, #72]	@ (8008168 <_vfiprintf_r+0x228>)
 800811e:	a904      	add	r1, sp, #16
 8008120:	4630      	mov	r0, r6
 8008122:	f7fd febb 	bl	8005e9c <_printf_float>
 8008126:	4607      	mov	r7, r0
 8008128:	1c78      	adds	r0, r7, #1
 800812a:	d1d6      	bne.n	80080da <_vfiprintf_r+0x19a>
 800812c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800812e:	07d9      	lsls	r1, r3, #31
 8008130:	d405      	bmi.n	800813e <_vfiprintf_r+0x1fe>
 8008132:	89ab      	ldrh	r3, [r5, #12]
 8008134:	059a      	lsls	r2, r3, #22
 8008136:	d402      	bmi.n	800813e <_vfiprintf_r+0x1fe>
 8008138:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800813a:	f7fe fc05 	bl	8006948 <__retarget_lock_release_recursive>
 800813e:	89ab      	ldrh	r3, [r5, #12]
 8008140:	065b      	lsls	r3, r3, #25
 8008142:	f53f af1f 	bmi.w	8007f84 <_vfiprintf_r+0x44>
 8008146:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008148:	e71e      	b.n	8007f88 <_vfiprintf_r+0x48>
 800814a:	ab03      	add	r3, sp, #12
 800814c:	9300      	str	r3, [sp, #0]
 800814e:	462a      	mov	r2, r5
 8008150:	4b05      	ldr	r3, [pc, #20]	@ (8008168 <_vfiprintf_r+0x228>)
 8008152:	a904      	add	r1, sp, #16
 8008154:	4630      	mov	r0, r6
 8008156:	f7fe f939 	bl	80063cc <_printf_i>
 800815a:	e7e4      	b.n	8008126 <_vfiprintf_r+0x1e6>
 800815c:	08008e70 	.word	0x08008e70
 8008160:	08008e7a 	.word	0x08008e7a
 8008164:	08005e9d 	.word	0x08005e9d
 8008168:	08007f1b 	.word	0x08007f1b
 800816c:	08008e76 	.word	0x08008e76

08008170 <__sflush_r>:
 8008170:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008178:	0716      	lsls	r6, r2, #28
 800817a:	4605      	mov	r5, r0
 800817c:	460c      	mov	r4, r1
 800817e:	d454      	bmi.n	800822a <__sflush_r+0xba>
 8008180:	684b      	ldr	r3, [r1, #4]
 8008182:	2b00      	cmp	r3, #0
 8008184:	dc02      	bgt.n	800818c <__sflush_r+0x1c>
 8008186:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008188:	2b00      	cmp	r3, #0
 800818a:	dd48      	ble.n	800821e <__sflush_r+0xae>
 800818c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800818e:	2e00      	cmp	r6, #0
 8008190:	d045      	beq.n	800821e <__sflush_r+0xae>
 8008192:	2300      	movs	r3, #0
 8008194:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008198:	682f      	ldr	r7, [r5, #0]
 800819a:	6a21      	ldr	r1, [r4, #32]
 800819c:	602b      	str	r3, [r5, #0]
 800819e:	d030      	beq.n	8008202 <__sflush_r+0x92>
 80081a0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80081a2:	89a3      	ldrh	r3, [r4, #12]
 80081a4:	0759      	lsls	r1, r3, #29
 80081a6:	d505      	bpl.n	80081b4 <__sflush_r+0x44>
 80081a8:	6863      	ldr	r3, [r4, #4]
 80081aa:	1ad2      	subs	r2, r2, r3
 80081ac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80081ae:	b10b      	cbz	r3, 80081b4 <__sflush_r+0x44>
 80081b0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80081b2:	1ad2      	subs	r2, r2, r3
 80081b4:	2300      	movs	r3, #0
 80081b6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80081b8:	6a21      	ldr	r1, [r4, #32]
 80081ba:	4628      	mov	r0, r5
 80081bc:	47b0      	blx	r6
 80081be:	1c43      	adds	r3, r0, #1
 80081c0:	89a3      	ldrh	r3, [r4, #12]
 80081c2:	d106      	bne.n	80081d2 <__sflush_r+0x62>
 80081c4:	6829      	ldr	r1, [r5, #0]
 80081c6:	291d      	cmp	r1, #29
 80081c8:	d82b      	bhi.n	8008222 <__sflush_r+0xb2>
 80081ca:	4a2a      	ldr	r2, [pc, #168]	@ (8008274 <__sflush_r+0x104>)
 80081cc:	410a      	asrs	r2, r1
 80081ce:	07d6      	lsls	r6, r2, #31
 80081d0:	d427      	bmi.n	8008222 <__sflush_r+0xb2>
 80081d2:	2200      	movs	r2, #0
 80081d4:	6062      	str	r2, [r4, #4]
 80081d6:	04d9      	lsls	r1, r3, #19
 80081d8:	6922      	ldr	r2, [r4, #16]
 80081da:	6022      	str	r2, [r4, #0]
 80081dc:	d504      	bpl.n	80081e8 <__sflush_r+0x78>
 80081de:	1c42      	adds	r2, r0, #1
 80081e0:	d101      	bne.n	80081e6 <__sflush_r+0x76>
 80081e2:	682b      	ldr	r3, [r5, #0]
 80081e4:	b903      	cbnz	r3, 80081e8 <__sflush_r+0x78>
 80081e6:	6560      	str	r0, [r4, #84]	@ 0x54
 80081e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80081ea:	602f      	str	r7, [r5, #0]
 80081ec:	b1b9      	cbz	r1, 800821e <__sflush_r+0xae>
 80081ee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80081f2:	4299      	cmp	r1, r3
 80081f4:	d002      	beq.n	80081fc <__sflush_r+0x8c>
 80081f6:	4628      	mov	r0, r5
 80081f8:	f7ff f9f6 	bl	80075e8 <_free_r>
 80081fc:	2300      	movs	r3, #0
 80081fe:	6363      	str	r3, [r4, #52]	@ 0x34
 8008200:	e00d      	b.n	800821e <__sflush_r+0xae>
 8008202:	2301      	movs	r3, #1
 8008204:	4628      	mov	r0, r5
 8008206:	47b0      	blx	r6
 8008208:	4602      	mov	r2, r0
 800820a:	1c50      	adds	r0, r2, #1
 800820c:	d1c9      	bne.n	80081a2 <__sflush_r+0x32>
 800820e:	682b      	ldr	r3, [r5, #0]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d0c6      	beq.n	80081a2 <__sflush_r+0x32>
 8008214:	2b1d      	cmp	r3, #29
 8008216:	d001      	beq.n	800821c <__sflush_r+0xac>
 8008218:	2b16      	cmp	r3, #22
 800821a:	d11e      	bne.n	800825a <__sflush_r+0xea>
 800821c:	602f      	str	r7, [r5, #0]
 800821e:	2000      	movs	r0, #0
 8008220:	e022      	b.n	8008268 <__sflush_r+0xf8>
 8008222:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008226:	b21b      	sxth	r3, r3
 8008228:	e01b      	b.n	8008262 <__sflush_r+0xf2>
 800822a:	690f      	ldr	r7, [r1, #16]
 800822c:	2f00      	cmp	r7, #0
 800822e:	d0f6      	beq.n	800821e <__sflush_r+0xae>
 8008230:	0793      	lsls	r3, r2, #30
 8008232:	680e      	ldr	r6, [r1, #0]
 8008234:	bf08      	it	eq
 8008236:	694b      	ldreq	r3, [r1, #20]
 8008238:	600f      	str	r7, [r1, #0]
 800823a:	bf18      	it	ne
 800823c:	2300      	movne	r3, #0
 800823e:	eba6 0807 	sub.w	r8, r6, r7
 8008242:	608b      	str	r3, [r1, #8]
 8008244:	f1b8 0f00 	cmp.w	r8, #0
 8008248:	dde9      	ble.n	800821e <__sflush_r+0xae>
 800824a:	6a21      	ldr	r1, [r4, #32]
 800824c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800824e:	4643      	mov	r3, r8
 8008250:	463a      	mov	r2, r7
 8008252:	4628      	mov	r0, r5
 8008254:	47b0      	blx	r6
 8008256:	2800      	cmp	r0, #0
 8008258:	dc08      	bgt.n	800826c <__sflush_r+0xfc>
 800825a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800825e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008262:	81a3      	strh	r3, [r4, #12]
 8008264:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800826c:	4407      	add	r7, r0
 800826e:	eba8 0800 	sub.w	r8, r8, r0
 8008272:	e7e7      	b.n	8008244 <__sflush_r+0xd4>
 8008274:	dfbffffe 	.word	0xdfbffffe

08008278 <_fflush_r>:
 8008278:	b538      	push	{r3, r4, r5, lr}
 800827a:	690b      	ldr	r3, [r1, #16]
 800827c:	4605      	mov	r5, r0
 800827e:	460c      	mov	r4, r1
 8008280:	b913      	cbnz	r3, 8008288 <_fflush_r+0x10>
 8008282:	2500      	movs	r5, #0
 8008284:	4628      	mov	r0, r5
 8008286:	bd38      	pop	{r3, r4, r5, pc}
 8008288:	b118      	cbz	r0, 8008292 <_fflush_r+0x1a>
 800828a:	6a03      	ldr	r3, [r0, #32]
 800828c:	b90b      	cbnz	r3, 8008292 <_fflush_r+0x1a>
 800828e:	f7fe fa49 	bl	8006724 <__sinit>
 8008292:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d0f3      	beq.n	8008282 <_fflush_r+0xa>
 800829a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800829c:	07d0      	lsls	r0, r2, #31
 800829e:	d404      	bmi.n	80082aa <_fflush_r+0x32>
 80082a0:	0599      	lsls	r1, r3, #22
 80082a2:	d402      	bmi.n	80082aa <_fflush_r+0x32>
 80082a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80082a6:	f7fe fb4e 	bl	8006946 <__retarget_lock_acquire_recursive>
 80082aa:	4628      	mov	r0, r5
 80082ac:	4621      	mov	r1, r4
 80082ae:	f7ff ff5f 	bl	8008170 <__sflush_r>
 80082b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80082b4:	07da      	lsls	r2, r3, #31
 80082b6:	4605      	mov	r5, r0
 80082b8:	d4e4      	bmi.n	8008284 <_fflush_r+0xc>
 80082ba:	89a3      	ldrh	r3, [r4, #12]
 80082bc:	059b      	lsls	r3, r3, #22
 80082be:	d4e1      	bmi.n	8008284 <_fflush_r+0xc>
 80082c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80082c2:	f7fe fb41 	bl	8006948 <__retarget_lock_release_recursive>
 80082c6:	e7dd      	b.n	8008284 <_fflush_r+0xc>

080082c8 <_putc_r>:
 80082c8:	b570      	push	{r4, r5, r6, lr}
 80082ca:	460d      	mov	r5, r1
 80082cc:	4614      	mov	r4, r2
 80082ce:	4606      	mov	r6, r0
 80082d0:	b118      	cbz	r0, 80082da <_putc_r+0x12>
 80082d2:	6a03      	ldr	r3, [r0, #32]
 80082d4:	b90b      	cbnz	r3, 80082da <_putc_r+0x12>
 80082d6:	f7fe fa25 	bl	8006724 <__sinit>
 80082da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80082dc:	07d8      	lsls	r0, r3, #31
 80082de:	d405      	bmi.n	80082ec <_putc_r+0x24>
 80082e0:	89a3      	ldrh	r3, [r4, #12]
 80082e2:	0599      	lsls	r1, r3, #22
 80082e4:	d402      	bmi.n	80082ec <_putc_r+0x24>
 80082e6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80082e8:	f7fe fb2d 	bl	8006946 <__retarget_lock_acquire_recursive>
 80082ec:	68a3      	ldr	r3, [r4, #8]
 80082ee:	3b01      	subs	r3, #1
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	60a3      	str	r3, [r4, #8]
 80082f4:	da05      	bge.n	8008302 <_putc_r+0x3a>
 80082f6:	69a2      	ldr	r2, [r4, #24]
 80082f8:	4293      	cmp	r3, r2
 80082fa:	db12      	blt.n	8008322 <_putc_r+0x5a>
 80082fc:	b2eb      	uxtb	r3, r5
 80082fe:	2b0a      	cmp	r3, #10
 8008300:	d00f      	beq.n	8008322 <_putc_r+0x5a>
 8008302:	6823      	ldr	r3, [r4, #0]
 8008304:	1c5a      	adds	r2, r3, #1
 8008306:	6022      	str	r2, [r4, #0]
 8008308:	701d      	strb	r5, [r3, #0]
 800830a:	b2ed      	uxtb	r5, r5
 800830c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800830e:	07da      	lsls	r2, r3, #31
 8008310:	d405      	bmi.n	800831e <_putc_r+0x56>
 8008312:	89a3      	ldrh	r3, [r4, #12]
 8008314:	059b      	lsls	r3, r3, #22
 8008316:	d402      	bmi.n	800831e <_putc_r+0x56>
 8008318:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800831a:	f7fe fb15 	bl	8006948 <__retarget_lock_release_recursive>
 800831e:	4628      	mov	r0, r5
 8008320:	bd70      	pop	{r4, r5, r6, pc}
 8008322:	4629      	mov	r1, r5
 8008324:	4622      	mov	r2, r4
 8008326:	4630      	mov	r0, r6
 8008328:	f000 f802 	bl	8008330 <__swbuf_r>
 800832c:	4605      	mov	r5, r0
 800832e:	e7ed      	b.n	800830c <_putc_r+0x44>

08008330 <__swbuf_r>:
 8008330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008332:	460e      	mov	r6, r1
 8008334:	4614      	mov	r4, r2
 8008336:	4605      	mov	r5, r0
 8008338:	b118      	cbz	r0, 8008342 <__swbuf_r+0x12>
 800833a:	6a03      	ldr	r3, [r0, #32]
 800833c:	b90b      	cbnz	r3, 8008342 <__swbuf_r+0x12>
 800833e:	f7fe f9f1 	bl	8006724 <__sinit>
 8008342:	69a3      	ldr	r3, [r4, #24]
 8008344:	60a3      	str	r3, [r4, #8]
 8008346:	89a3      	ldrh	r3, [r4, #12]
 8008348:	071a      	lsls	r2, r3, #28
 800834a:	d501      	bpl.n	8008350 <__swbuf_r+0x20>
 800834c:	6923      	ldr	r3, [r4, #16]
 800834e:	b943      	cbnz	r3, 8008362 <__swbuf_r+0x32>
 8008350:	4621      	mov	r1, r4
 8008352:	4628      	mov	r0, r5
 8008354:	f000 f82a 	bl	80083ac <__swsetup_r>
 8008358:	b118      	cbz	r0, 8008362 <__swbuf_r+0x32>
 800835a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800835e:	4638      	mov	r0, r7
 8008360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008362:	6823      	ldr	r3, [r4, #0]
 8008364:	6922      	ldr	r2, [r4, #16]
 8008366:	1a98      	subs	r0, r3, r2
 8008368:	6963      	ldr	r3, [r4, #20]
 800836a:	b2f6      	uxtb	r6, r6
 800836c:	4283      	cmp	r3, r0
 800836e:	4637      	mov	r7, r6
 8008370:	dc05      	bgt.n	800837e <__swbuf_r+0x4e>
 8008372:	4621      	mov	r1, r4
 8008374:	4628      	mov	r0, r5
 8008376:	f7ff ff7f 	bl	8008278 <_fflush_r>
 800837a:	2800      	cmp	r0, #0
 800837c:	d1ed      	bne.n	800835a <__swbuf_r+0x2a>
 800837e:	68a3      	ldr	r3, [r4, #8]
 8008380:	3b01      	subs	r3, #1
 8008382:	60a3      	str	r3, [r4, #8]
 8008384:	6823      	ldr	r3, [r4, #0]
 8008386:	1c5a      	adds	r2, r3, #1
 8008388:	6022      	str	r2, [r4, #0]
 800838a:	701e      	strb	r6, [r3, #0]
 800838c:	6962      	ldr	r2, [r4, #20]
 800838e:	1c43      	adds	r3, r0, #1
 8008390:	429a      	cmp	r2, r3
 8008392:	d004      	beq.n	800839e <__swbuf_r+0x6e>
 8008394:	89a3      	ldrh	r3, [r4, #12]
 8008396:	07db      	lsls	r3, r3, #31
 8008398:	d5e1      	bpl.n	800835e <__swbuf_r+0x2e>
 800839a:	2e0a      	cmp	r6, #10
 800839c:	d1df      	bne.n	800835e <__swbuf_r+0x2e>
 800839e:	4621      	mov	r1, r4
 80083a0:	4628      	mov	r0, r5
 80083a2:	f7ff ff69 	bl	8008278 <_fflush_r>
 80083a6:	2800      	cmp	r0, #0
 80083a8:	d0d9      	beq.n	800835e <__swbuf_r+0x2e>
 80083aa:	e7d6      	b.n	800835a <__swbuf_r+0x2a>

080083ac <__swsetup_r>:
 80083ac:	b538      	push	{r3, r4, r5, lr}
 80083ae:	4b29      	ldr	r3, [pc, #164]	@ (8008454 <__swsetup_r+0xa8>)
 80083b0:	4605      	mov	r5, r0
 80083b2:	6818      	ldr	r0, [r3, #0]
 80083b4:	460c      	mov	r4, r1
 80083b6:	b118      	cbz	r0, 80083c0 <__swsetup_r+0x14>
 80083b8:	6a03      	ldr	r3, [r0, #32]
 80083ba:	b90b      	cbnz	r3, 80083c0 <__swsetup_r+0x14>
 80083bc:	f7fe f9b2 	bl	8006724 <__sinit>
 80083c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083c4:	0719      	lsls	r1, r3, #28
 80083c6:	d422      	bmi.n	800840e <__swsetup_r+0x62>
 80083c8:	06da      	lsls	r2, r3, #27
 80083ca:	d407      	bmi.n	80083dc <__swsetup_r+0x30>
 80083cc:	2209      	movs	r2, #9
 80083ce:	602a      	str	r2, [r5, #0]
 80083d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80083d4:	81a3      	strh	r3, [r4, #12]
 80083d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80083da:	e033      	b.n	8008444 <__swsetup_r+0x98>
 80083dc:	0758      	lsls	r0, r3, #29
 80083de:	d512      	bpl.n	8008406 <__swsetup_r+0x5a>
 80083e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80083e2:	b141      	cbz	r1, 80083f6 <__swsetup_r+0x4a>
 80083e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80083e8:	4299      	cmp	r1, r3
 80083ea:	d002      	beq.n	80083f2 <__swsetup_r+0x46>
 80083ec:	4628      	mov	r0, r5
 80083ee:	f7ff f8fb 	bl	80075e8 <_free_r>
 80083f2:	2300      	movs	r3, #0
 80083f4:	6363      	str	r3, [r4, #52]	@ 0x34
 80083f6:	89a3      	ldrh	r3, [r4, #12]
 80083f8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80083fc:	81a3      	strh	r3, [r4, #12]
 80083fe:	2300      	movs	r3, #0
 8008400:	6063      	str	r3, [r4, #4]
 8008402:	6923      	ldr	r3, [r4, #16]
 8008404:	6023      	str	r3, [r4, #0]
 8008406:	89a3      	ldrh	r3, [r4, #12]
 8008408:	f043 0308 	orr.w	r3, r3, #8
 800840c:	81a3      	strh	r3, [r4, #12]
 800840e:	6923      	ldr	r3, [r4, #16]
 8008410:	b94b      	cbnz	r3, 8008426 <__swsetup_r+0x7a>
 8008412:	89a3      	ldrh	r3, [r4, #12]
 8008414:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008418:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800841c:	d003      	beq.n	8008426 <__swsetup_r+0x7a>
 800841e:	4621      	mov	r1, r4
 8008420:	4628      	mov	r0, r5
 8008422:	f000 f8c1 	bl	80085a8 <__smakebuf_r>
 8008426:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800842a:	f013 0201 	ands.w	r2, r3, #1
 800842e:	d00a      	beq.n	8008446 <__swsetup_r+0x9a>
 8008430:	2200      	movs	r2, #0
 8008432:	60a2      	str	r2, [r4, #8]
 8008434:	6962      	ldr	r2, [r4, #20]
 8008436:	4252      	negs	r2, r2
 8008438:	61a2      	str	r2, [r4, #24]
 800843a:	6922      	ldr	r2, [r4, #16]
 800843c:	b942      	cbnz	r2, 8008450 <__swsetup_r+0xa4>
 800843e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008442:	d1c5      	bne.n	80083d0 <__swsetup_r+0x24>
 8008444:	bd38      	pop	{r3, r4, r5, pc}
 8008446:	0799      	lsls	r1, r3, #30
 8008448:	bf58      	it	pl
 800844a:	6962      	ldrpl	r2, [r4, #20]
 800844c:	60a2      	str	r2, [r4, #8]
 800844e:	e7f4      	b.n	800843a <__swsetup_r+0x8e>
 8008450:	2000      	movs	r0, #0
 8008452:	e7f7      	b.n	8008444 <__swsetup_r+0x98>
 8008454:	2000001c 	.word	0x2000001c

08008458 <_sbrk_r>:
 8008458:	b538      	push	{r3, r4, r5, lr}
 800845a:	4d06      	ldr	r5, [pc, #24]	@ (8008474 <_sbrk_r+0x1c>)
 800845c:	2300      	movs	r3, #0
 800845e:	4604      	mov	r4, r0
 8008460:	4608      	mov	r0, r1
 8008462:	602b      	str	r3, [r5, #0]
 8008464:	f7f9 fd16 	bl	8001e94 <_sbrk>
 8008468:	1c43      	adds	r3, r0, #1
 800846a:	d102      	bne.n	8008472 <_sbrk_r+0x1a>
 800846c:	682b      	ldr	r3, [r5, #0]
 800846e:	b103      	cbz	r3, 8008472 <_sbrk_r+0x1a>
 8008470:	6023      	str	r3, [r4, #0]
 8008472:	bd38      	pop	{r3, r4, r5, pc}
 8008474:	200004cc 	.word	0x200004cc

08008478 <memcpy>:
 8008478:	440a      	add	r2, r1
 800847a:	4291      	cmp	r1, r2
 800847c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008480:	d100      	bne.n	8008484 <memcpy+0xc>
 8008482:	4770      	bx	lr
 8008484:	b510      	push	{r4, lr}
 8008486:	f811 4b01 	ldrb.w	r4, [r1], #1
 800848a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800848e:	4291      	cmp	r1, r2
 8008490:	d1f9      	bne.n	8008486 <memcpy+0xe>
 8008492:	bd10      	pop	{r4, pc}

08008494 <__assert_func>:
 8008494:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008496:	4614      	mov	r4, r2
 8008498:	461a      	mov	r2, r3
 800849a:	4b09      	ldr	r3, [pc, #36]	@ (80084c0 <__assert_func+0x2c>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	4605      	mov	r5, r0
 80084a0:	68d8      	ldr	r0, [r3, #12]
 80084a2:	b954      	cbnz	r4, 80084ba <__assert_func+0x26>
 80084a4:	4b07      	ldr	r3, [pc, #28]	@ (80084c4 <__assert_func+0x30>)
 80084a6:	461c      	mov	r4, r3
 80084a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80084ac:	9100      	str	r1, [sp, #0]
 80084ae:	462b      	mov	r3, r5
 80084b0:	4905      	ldr	r1, [pc, #20]	@ (80084c8 <__assert_func+0x34>)
 80084b2:	f000 f841 	bl	8008538 <fiprintf>
 80084b6:	f000 f8d5 	bl	8008664 <abort>
 80084ba:	4b04      	ldr	r3, [pc, #16]	@ (80084cc <__assert_func+0x38>)
 80084bc:	e7f4      	b.n	80084a8 <__assert_func+0x14>
 80084be:	bf00      	nop
 80084c0:	2000001c 	.word	0x2000001c
 80084c4:	08008ec6 	.word	0x08008ec6
 80084c8:	08008e98 	.word	0x08008e98
 80084cc:	08008e8b 	.word	0x08008e8b

080084d0 <_calloc_r>:
 80084d0:	b570      	push	{r4, r5, r6, lr}
 80084d2:	fba1 5402 	umull	r5, r4, r1, r2
 80084d6:	b93c      	cbnz	r4, 80084e8 <_calloc_r+0x18>
 80084d8:	4629      	mov	r1, r5
 80084da:	f7ff f8f9 	bl	80076d0 <_malloc_r>
 80084de:	4606      	mov	r6, r0
 80084e0:	b928      	cbnz	r0, 80084ee <_calloc_r+0x1e>
 80084e2:	2600      	movs	r6, #0
 80084e4:	4630      	mov	r0, r6
 80084e6:	bd70      	pop	{r4, r5, r6, pc}
 80084e8:	220c      	movs	r2, #12
 80084ea:	6002      	str	r2, [r0, #0]
 80084ec:	e7f9      	b.n	80084e2 <_calloc_r+0x12>
 80084ee:	462a      	mov	r2, r5
 80084f0:	4621      	mov	r1, r4
 80084f2:	f7fe f9aa 	bl	800684a <memset>
 80084f6:	e7f5      	b.n	80084e4 <_calloc_r+0x14>

080084f8 <__ascii_mbtowc>:
 80084f8:	b082      	sub	sp, #8
 80084fa:	b901      	cbnz	r1, 80084fe <__ascii_mbtowc+0x6>
 80084fc:	a901      	add	r1, sp, #4
 80084fe:	b142      	cbz	r2, 8008512 <__ascii_mbtowc+0x1a>
 8008500:	b14b      	cbz	r3, 8008516 <__ascii_mbtowc+0x1e>
 8008502:	7813      	ldrb	r3, [r2, #0]
 8008504:	600b      	str	r3, [r1, #0]
 8008506:	7812      	ldrb	r2, [r2, #0]
 8008508:	1e10      	subs	r0, r2, #0
 800850a:	bf18      	it	ne
 800850c:	2001      	movne	r0, #1
 800850e:	b002      	add	sp, #8
 8008510:	4770      	bx	lr
 8008512:	4610      	mov	r0, r2
 8008514:	e7fb      	b.n	800850e <__ascii_mbtowc+0x16>
 8008516:	f06f 0001 	mvn.w	r0, #1
 800851a:	e7f8      	b.n	800850e <__ascii_mbtowc+0x16>

0800851c <__ascii_wctomb>:
 800851c:	4603      	mov	r3, r0
 800851e:	4608      	mov	r0, r1
 8008520:	b141      	cbz	r1, 8008534 <__ascii_wctomb+0x18>
 8008522:	2aff      	cmp	r2, #255	@ 0xff
 8008524:	d904      	bls.n	8008530 <__ascii_wctomb+0x14>
 8008526:	228a      	movs	r2, #138	@ 0x8a
 8008528:	601a      	str	r2, [r3, #0]
 800852a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800852e:	4770      	bx	lr
 8008530:	700a      	strb	r2, [r1, #0]
 8008532:	2001      	movs	r0, #1
 8008534:	4770      	bx	lr
	...

08008538 <fiprintf>:
 8008538:	b40e      	push	{r1, r2, r3}
 800853a:	b503      	push	{r0, r1, lr}
 800853c:	4601      	mov	r1, r0
 800853e:	ab03      	add	r3, sp, #12
 8008540:	4805      	ldr	r0, [pc, #20]	@ (8008558 <fiprintf+0x20>)
 8008542:	f853 2b04 	ldr.w	r2, [r3], #4
 8008546:	6800      	ldr	r0, [r0, #0]
 8008548:	9301      	str	r3, [sp, #4]
 800854a:	f7ff fcf9 	bl	8007f40 <_vfiprintf_r>
 800854e:	b002      	add	sp, #8
 8008550:	f85d eb04 	ldr.w	lr, [sp], #4
 8008554:	b003      	add	sp, #12
 8008556:	4770      	bx	lr
 8008558:	2000001c 	.word	0x2000001c

0800855c <__swhatbuf_r>:
 800855c:	b570      	push	{r4, r5, r6, lr}
 800855e:	460c      	mov	r4, r1
 8008560:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008564:	2900      	cmp	r1, #0
 8008566:	b096      	sub	sp, #88	@ 0x58
 8008568:	4615      	mov	r5, r2
 800856a:	461e      	mov	r6, r3
 800856c:	da0d      	bge.n	800858a <__swhatbuf_r+0x2e>
 800856e:	89a3      	ldrh	r3, [r4, #12]
 8008570:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008574:	f04f 0100 	mov.w	r1, #0
 8008578:	bf14      	ite	ne
 800857a:	2340      	movne	r3, #64	@ 0x40
 800857c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008580:	2000      	movs	r0, #0
 8008582:	6031      	str	r1, [r6, #0]
 8008584:	602b      	str	r3, [r5, #0]
 8008586:	b016      	add	sp, #88	@ 0x58
 8008588:	bd70      	pop	{r4, r5, r6, pc}
 800858a:	466a      	mov	r2, sp
 800858c:	f000 f848 	bl	8008620 <_fstat_r>
 8008590:	2800      	cmp	r0, #0
 8008592:	dbec      	blt.n	800856e <__swhatbuf_r+0x12>
 8008594:	9901      	ldr	r1, [sp, #4]
 8008596:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800859a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800859e:	4259      	negs	r1, r3
 80085a0:	4159      	adcs	r1, r3
 80085a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80085a6:	e7eb      	b.n	8008580 <__swhatbuf_r+0x24>

080085a8 <__smakebuf_r>:
 80085a8:	898b      	ldrh	r3, [r1, #12]
 80085aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80085ac:	079d      	lsls	r5, r3, #30
 80085ae:	4606      	mov	r6, r0
 80085b0:	460c      	mov	r4, r1
 80085b2:	d507      	bpl.n	80085c4 <__smakebuf_r+0x1c>
 80085b4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80085b8:	6023      	str	r3, [r4, #0]
 80085ba:	6123      	str	r3, [r4, #16]
 80085bc:	2301      	movs	r3, #1
 80085be:	6163      	str	r3, [r4, #20]
 80085c0:	b003      	add	sp, #12
 80085c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085c4:	ab01      	add	r3, sp, #4
 80085c6:	466a      	mov	r2, sp
 80085c8:	f7ff ffc8 	bl	800855c <__swhatbuf_r>
 80085cc:	9f00      	ldr	r7, [sp, #0]
 80085ce:	4605      	mov	r5, r0
 80085d0:	4639      	mov	r1, r7
 80085d2:	4630      	mov	r0, r6
 80085d4:	f7ff f87c 	bl	80076d0 <_malloc_r>
 80085d8:	b948      	cbnz	r0, 80085ee <__smakebuf_r+0x46>
 80085da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085de:	059a      	lsls	r2, r3, #22
 80085e0:	d4ee      	bmi.n	80085c0 <__smakebuf_r+0x18>
 80085e2:	f023 0303 	bic.w	r3, r3, #3
 80085e6:	f043 0302 	orr.w	r3, r3, #2
 80085ea:	81a3      	strh	r3, [r4, #12]
 80085ec:	e7e2      	b.n	80085b4 <__smakebuf_r+0xc>
 80085ee:	89a3      	ldrh	r3, [r4, #12]
 80085f0:	6020      	str	r0, [r4, #0]
 80085f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085f6:	81a3      	strh	r3, [r4, #12]
 80085f8:	9b01      	ldr	r3, [sp, #4]
 80085fa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80085fe:	b15b      	cbz	r3, 8008618 <__smakebuf_r+0x70>
 8008600:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008604:	4630      	mov	r0, r6
 8008606:	f000 f81d 	bl	8008644 <_isatty_r>
 800860a:	b128      	cbz	r0, 8008618 <__smakebuf_r+0x70>
 800860c:	89a3      	ldrh	r3, [r4, #12]
 800860e:	f023 0303 	bic.w	r3, r3, #3
 8008612:	f043 0301 	orr.w	r3, r3, #1
 8008616:	81a3      	strh	r3, [r4, #12]
 8008618:	89a3      	ldrh	r3, [r4, #12]
 800861a:	431d      	orrs	r5, r3
 800861c:	81a5      	strh	r5, [r4, #12]
 800861e:	e7cf      	b.n	80085c0 <__smakebuf_r+0x18>

08008620 <_fstat_r>:
 8008620:	b538      	push	{r3, r4, r5, lr}
 8008622:	4d07      	ldr	r5, [pc, #28]	@ (8008640 <_fstat_r+0x20>)
 8008624:	2300      	movs	r3, #0
 8008626:	4604      	mov	r4, r0
 8008628:	4608      	mov	r0, r1
 800862a:	4611      	mov	r1, r2
 800862c:	602b      	str	r3, [r5, #0]
 800862e:	f7f9 fc08 	bl	8001e42 <_fstat>
 8008632:	1c43      	adds	r3, r0, #1
 8008634:	d102      	bne.n	800863c <_fstat_r+0x1c>
 8008636:	682b      	ldr	r3, [r5, #0]
 8008638:	b103      	cbz	r3, 800863c <_fstat_r+0x1c>
 800863a:	6023      	str	r3, [r4, #0]
 800863c:	bd38      	pop	{r3, r4, r5, pc}
 800863e:	bf00      	nop
 8008640:	200004cc 	.word	0x200004cc

08008644 <_isatty_r>:
 8008644:	b538      	push	{r3, r4, r5, lr}
 8008646:	4d06      	ldr	r5, [pc, #24]	@ (8008660 <_isatty_r+0x1c>)
 8008648:	2300      	movs	r3, #0
 800864a:	4604      	mov	r4, r0
 800864c:	4608      	mov	r0, r1
 800864e:	602b      	str	r3, [r5, #0]
 8008650:	f7f9 fc07 	bl	8001e62 <_isatty>
 8008654:	1c43      	adds	r3, r0, #1
 8008656:	d102      	bne.n	800865e <_isatty_r+0x1a>
 8008658:	682b      	ldr	r3, [r5, #0]
 800865a:	b103      	cbz	r3, 800865e <_isatty_r+0x1a>
 800865c:	6023      	str	r3, [r4, #0]
 800865e:	bd38      	pop	{r3, r4, r5, pc}
 8008660:	200004cc 	.word	0x200004cc

08008664 <abort>:
 8008664:	b508      	push	{r3, lr}
 8008666:	2006      	movs	r0, #6
 8008668:	f000 f82c 	bl	80086c4 <raise>
 800866c:	2001      	movs	r0, #1
 800866e:	f7f9 fb98 	bl	8001da2 <_exit>

08008672 <_raise_r>:
 8008672:	291f      	cmp	r1, #31
 8008674:	b538      	push	{r3, r4, r5, lr}
 8008676:	4605      	mov	r5, r0
 8008678:	460c      	mov	r4, r1
 800867a:	d904      	bls.n	8008686 <_raise_r+0x14>
 800867c:	2316      	movs	r3, #22
 800867e:	6003      	str	r3, [r0, #0]
 8008680:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008684:	bd38      	pop	{r3, r4, r5, pc}
 8008686:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008688:	b112      	cbz	r2, 8008690 <_raise_r+0x1e>
 800868a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800868e:	b94b      	cbnz	r3, 80086a4 <_raise_r+0x32>
 8008690:	4628      	mov	r0, r5
 8008692:	f000 f831 	bl	80086f8 <_getpid_r>
 8008696:	4622      	mov	r2, r4
 8008698:	4601      	mov	r1, r0
 800869a:	4628      	mov	r0, r5
 800869c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80086a0:	f000 b818 	b.w	80086d4 <_kill_r>
 80086a4:	2b01      	cmp	r3, #1
 80086a6:	d00a      	beq.n	80086be <_raise_r+0x4c>
 80086a8:	1c59      	adds	r1, r3, #1
 80086aa:	d103      	bne.n	80086b4 <_raise_r+0x42>
 80086ac:	2316      	movs	r3, #22
 80086ae:	6003      	str	r3, [r0, #0]
 80086b0:	2001      	movs	r0, #1
 80086b2:	e7e7      	b.n	8008684 <_raise_r+0x12>
 80086b4:	2100      	movs	r1, #0
 80086b6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80086ba:	4620      	mov	r0, r4
 80086bc:	4798      	blx	r3
 80086be:	2000      	movs	r0, #0
 80086c0:	e7e0      	b.n	8008684 <_raise_r+0x12>
	...

080086c4 <raise>:
 80086c4:	4b02      	ldr	r3, [pc, #8]	@ (80086d0 <raise+0xc>)
 80086c6:	4601      	mov	r1, r0
 80086c8:	6818      	ldr	r0, [r3, #0]
 80086ca:	f7ff bfd2 	b.w	8008672 <_raise_r>
 80086ce:	bf00      	nop
 80086d0:	2000001c 	.word	0x2000001c

080086d4 <_kill_r>:
 80086d4:	b538      	push	{r3, r4, r5, lr}
 80086d6:	4d07      	ldr	r5, [pc, #28]	@ (80086f4 <_kill_r+0x20>)
 80086d8:	2300      	movs	r3, #0
 80086da:	4604      	mov	r4, r0
 80086dc:	4608      	mov	r0, r1
 80086de:	4611      	mov	r1, r2
 80086e0:	602b      	str	r3, [r5, #0]
 80086e2:	f7f9 fb4e 	bl	8001d82 <_kill>
 80086e6:	1c43      	adds	r3, r0, #1
 80086e8:	d102      	bne.n	80086f0 <_kill_r+0x1c>
 80086ea:	682b      	ldr	r3, [r5, #0]
 80086ec:	b103      	cbz	r3, 80086f0 <_kill_r+0x1c>
 80086ee:	6023      	str	r3, [r4, #0]
 80086f0:	bd38      	pop	{r3, r4, r5, pc}
 80086f2:	bf00      	nop
 80086f4:	200004cc 	.word	0x200004cc

080086f8 <_getpid_r>:
 80086f8:	f7f9 bb3b 	b.w	8001d72 <_getpid>

080086fc <atan2>:
 80086fc:	f000 b800 	b.w	8008700 <__ieee754_atan2>

08008700 <__ieee754_atan2>:
 8008700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008704:	ec57 6b11 	vmov	r6, r7, d1
 8008708:	4273      	negs	r3, r6
 800870a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8008888 <__ieee754_atan2+0x188>
 800870e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8008712:	4333      	orrs	r3, r6
 8008714:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008718:	4543      	cmp	r3, r8
 800871a:	ec51 0b10 	vmov	r0, r1, d0
 800871e:	4635      	mov	r5, r6
 8008720:	d809      	bhi.n	8008736 <__ieee754_atan2+0x36>
 8008722:	4244      	negs	r4, r0
 8008724:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008728:	4304      	orrs	r4, r0
 800872a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800872e:	4544      	cmp	r4, r8
 8008730:	468e      	mov	lr, r1
 8008732:	4681      	mov	r9, r0
 8008734:	d907      	bls.n	8008746 <__ieee754_atan2+0x46>
 8008736:	4632      	mov	r2, r6
 8008738:	463b      	mov	r3, r7
 800873a:	f7f7 fdaf 	bl	800029c <__adddf3>
 800873e:	ec41 0b10 	vmov	d0, r0, r1
 8008742:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008746:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800874a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800874e:	4334      	orrs	r4, r6
 8008750:	d103      	bne.n	800875a <__ieee754_atan2+0x5a>
 8008752:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008756:	f000 b89b 	b.w	8008890 <atan>
 800875a:	17bc      	asrs	r4, r7, #30
 800875c:	f004 0402 	and.w	r4, r4, #2
 8008760:	ea53 0909 	orrs.w	r9, r3, r9
 8008764:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8008768:	d107      	bne.n	800877a <__ieee754_atan2+0x7a>
 800876a:	2c02      	cmp	r4, #2
 800876c:	d05f      	beq.n	800882e <__ieee754_atan2+0x12e>
 800876e:	2c03      	cmp	r4, #3
 8008770:	d1e5      	bne.n	800873e <__ieee754_atan2+0x3e>
 8008772:	a141      	add	r1, pc, #260	@ (adr r1, 8008878 <__ieee754_atan2+0x178>)
 8008774:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008778:	e7e1      	b.n	800873e <__ieee754_atan2+0x3e>
 800877a:	4315      	orrs	r5, r2
 800877c:	d106      	bne.n	800878c <__ieee754_atan2+0x8c>
 800877e:	f1be 0f00 	cmp.w	lr, #0
 8008782:	da5f      	bge.n	8008844 <__ieee754_atan2+0x144>
 8008784:	a13e      	add	r1, pc, #248	@ (adr r1, 8008880 <__ieee754_atan2+0x180>)
 8008786:	e9d1 0100 	ldrd	r0, r1, [r1]
 800878a:	e7d8      	b.n	800873e <__ieee754_atan2+0x3e>
 800878c:	4542      	cmp	r2, r8
 800878e:	d10f      	bne.n	80087b0 <__ieee754_atan2+0xb0>
 8008790:	4293      	cmp	r3, r2
 8008792:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 8008796:	d107      	bne.n	80087a8 <__ieee754_atan2+0xa8>
 8008798:	2c02      	cmp	r4, #2
 800879a:	d84c      	bhi.n	8008836 <__ieee754_atan2+0x136>
 800879c:	4b34      	ldr	r3, [pc, #208]	@ (8008870 <__ieee754_atan2+0x170>)
 800879e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80087a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80087a6:	e7ca      	b.n	800873e <__ieee754_atan2+0x3e>
 80087a8:	2c02      	cmp	r4, #2
 80087aa:	d848      	bhi.n	800883e <__ieee754_atan2+0x13e>
 80087ac:	4b31      	ldr	r3, [pc, #196]	@ (8008874 <__ieee754_atan2+0x174>)
 80087ae:	e7f6      	b.n	800879e <__ieee754_atan2+0x9e>
 80087b0:	4543      	cmp	r3, r8
 80087b2:	d0e4      	beq.n	800877e <__ieee754_atan2+0x7e>
 80087b4:	1a9b      	subs	r3, r3, r2
 80087b6:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 80087ba:	ea4f 5223 	mov.w	r2, r3, asr #20
 80087be:	da1e      	bge.n	80087fe <__ieee754_atan2+0xfe>
 80087c0:	2f00      	cmp	r7, #0
 80087c2:	da01      	bge.n	80087c8 <__ieee754_atan2+0xc8>
 80087c4:	323c      	adds	r2, #60	@ 0x3c
 80087c6:	db1e      	blt.n	8008806 <__ieee754_atan2+0x106>
 80087c8:	4632      	mov	r2, r6
 80087ca:	463b      	mov	r3, r7
 80087cc:	f7f8 f846 	bl	800085c <__aeabi_ddiv>
 80087d0:	ec41 0b10 	vmov	d0, r0, r1
 80087d4:	f000 f9f4 	bl	8008bc0 <fabs>
 80087d8:	f000 f85a 	bl	8008890 <atan>
 80087dc:	ec51 0b10 	vmov	r0, r1, d0
 80087e0:	2c01      	cmp	r4, #1
 80087e2:	d013      	beq.n	800880c <__ieee754_atan2+0x10c>
 80087e4:	2c02      	cmp	r4, #2
 80087e6:	d015      	beq.n	8008814 <__ieee754_atan2+0x114>
 80087e8:	2c00      	cmp	r4, #0
 80087ea:	d0a8      	beq.n	800873e <__ieee754_atan2+0x3e>
 80087ec:	a318      	add	r3, pc, #96	@ (adr r3, 8008850 <__ieee754_atan2+0x150>)
 80087ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087f2:	f7f7 fd51 	bl	8000298 <__aeabi_dsub>
 80087f6:	a318      	add	r3, pc, #96	@ (adr r3, 8008858 <__ieee754_atan2+0x158>)
 80087f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087fc:	e014      	b.n	8008828 <__ieee754_atan2+0x128>
 80087fe:	a118      	add	r1, pc, #96	@ (adr r1, 8008860 <__ieee754_atan2+0x160>)
 8008800:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008804:	e7ec      	b.n	80087e0 <__ieee754_atan2+0xe0>
 8008806:	2000      	movs	r0, #0
 8008808:	2100      	movs	r1, #0
 800880a:	e7e9      	b.n	80087e0 <__ieee754_atan2+0xe0>
 800880c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008810:	4619      	mov	r1, r3
 8008812:	e794      	b.n	800873e <__ieee754_atan2+0x3e>
 8008814:	a30e      	add	r3, pc, #56	@ (adr r3, 8008850 <__ieee754_atan2+0x150>)
 8008816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800881a:	f7f7 fd3d 	bl	8000298 <__aeabi_dsub>
 800881e:	4602      	mov	r2, r0
 8008820:	460b      	mov	r3, r1
 8008822:	a10d      	add	r1, pc, #52	@ (adr r1, 8008858 <__ieee754_atan2+0x158>)
 8008824:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008828:	f7f7 fd36 	bl	8000298 <__aeabi_dsub>
 800882c:	e787      	b.n	800873e <__ieee754_atan2+0x3e>
 800882e:	a10a      	add	r1, pc, #40	@ (adr r1, 8008858 <__ieee754_atan2+0x158>)
 8008830:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008834:	e783      	b.n	800873e <__ieee754_atan2+0x3e>
 8008836:	a10c      	add	r1, pc, #48	@ (adr r1, 8008868 <__ieee754_atan2+0x168>)
 8008838:	e9d1 0100 	ldrd	r0, r1, [r1]
 800883c:	e77f      	b.n	800873e <__ieee754_atan2+0x3e>
 800883e:	2000      	movs	r0, #0
 8008840:	2100      	movs	r1, #0
 8008842:	e77c      	b.n	800873e <__ieee754_atan2+0x3e>
 8008844:	a106      	add	r1, pc, #24	@ (adr r1, 8008860 <__ieee754_atan2+0x160>)
 8008846:	e9d1 0100 	ldrd	r0, r1, [r1]
 800884a:	e778      	b.n	800873e <__ieee754_atan2+0x3e>
 800884c:	f3af 8000 	nop.w
 8008850:	33145c07 	.word	0x33145c07
 8008854:	3ca1a626 	.word	0x3ca1a626
 8008858:	54442d18 	.word	0x54442d18
 800885c:	400921fb 	.word	0x400921fb
 8008860:	54442d18 	.word	0x54442d18
 8008864:	3ff921fb 	.word	0x3ff921fb
 8008868:	54442d18 	.word	0x54442d18
 800886c:	3fe921fb 	.word	0x3fe921fb
 8008870:	08008fe0 	.word	0x08008fe0
 8008874:	08008fc8 	.word	0x08008fc8
 8008878:	54442d18 	.word	0x54442d18
 800887c:	c00921fb 	.word	0xc00921fb
 8008880:	54442d18 	.word	0x54442d18
 8008884:	bff921fb 	.word	0xbff921fb
 8008888:	7ff00000 	.word	0x7ff00000
 800888c:	00000000 	.word	0x00000000

08008890 <atan>:
 8008890:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008894:	ec55 4b10 	vmov	r4, r5, d0
 8008898:	4bbf      	ldr	r3, [pc, #764]	@ (8008b98 <atan+0x308>)
 800889a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800889e:	429e      	cmp	r6, r3
 80088a0:	46ab      	mov	fp, r5
 80088a2:	d918      	bls.n	80088d6 <atan+0x46>
 80088a4:	4bbd      	ldr	r3, [pc, #756]	@ (8008b9c <atan+0x30c>)
 80088a6:	429e      	cmp	r6, r3
 80088a8:	d801      	bhi.n	80088ae <atan+0x1e>
 80088aa:	d109      	bne.n	80088c0 <atan+0x30>
 80088ac:	b144      	cbz	r4, 80088c0 <atan+0x30>
 80088ae:	4622      	mov	r2, r4
 80088b0:	462b      	mov	r3, r5
 80088b2:	4620      	mov	r0, r4
 80088b4:	4629      	mov	r1, r5
 80088b6:	f7f7 fcf1 	bl	800029c <__adddf3>
 80088ba:	4604      	mov	r4, r0
 80088bc:	460d      	mov	r5, r1
 80088be:	e006      	b.n	80088ce <atan+0x3e>
 80088c0:	f1bb 0f00 	cmp.w	fp, #0
 80088c4:	f340 812b 	ble.w	8008b1e <atan+0x28e>
 80088c8:	a597      	add	r5, pc, #604	@ (adr r5, 8008b28 <atan+0x298>)
 80088ca:	e9d5 4500 	ldrd	r4, r5, [r5]
 80088ce:	ec45 4b10 	vmov	d0, r4, r5
 80088d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088d6:	4bb2      	ldr	r3, [pc, #712]	@ (8008ba0 <atan+0x310>)
 80088d8:	429e      	cmp	r6, r3
 80088da:	d813      	bhi.n	8008904 <atan+0x74>
 80088dc:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 80088e0:	429e      	cmp	r6, r3
 80088e2:	d80c      	bhi.n	80088fe <atan+0x6e>
 80088e4:	a392      	add	r3, pc, #584	@ (adr r3, 8008b30 <atan+0x2a0>)
 80088e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ea:	4620      	mov	r0, r4
 80088ec:	4629      	mov	r1, r5
 80088ee:	f7f7 fcd5 	bl	800029c <__adddf3>
 80088f2:	4bac      	ldr	r3, [pc, #688]	@ (8008ba4 <atan+0x314>)
 80088f4:	2200      	movs	r2, #0
 80088f6:	f7f8 f917 	bl	8000b28 <__aeabi_dcmpgt>
 80088fa:	2800      	cmp	r0, #0
 80088fc:	d1e7      	bne.n	80088ce <atan+0x3e>
 80088fe:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8008902:	e029      	b.n	8008958 <atan+0xc8>
 8008904:	f000 f95c 	bl	8008bc0 <fabs>
 8008908:	4ba7      	ldr	r3, [pc, #668]	@ (8008ba8 <atan+0x318>)
 800890a:	429e      	cmp	r6, r3
 800890c:	ec55 4b10 	vmov	r4, r5, d0
 8008910:	f200 80bc 	bhi.w	8008a8c <atan+0x1fc>
 8008914:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8008918:	429e      	cmp	r6, r3
 800891a:	f200 809e 	bhi.w	8008a5a <atan+0x1ca>
 800891e:	4622      	mov	r2, r4
 8008920:	462b      	mov	r3, r5
 8008922:	4620      	mov	r0, r4
 8008924:	4629      	mov	r1, r5
 8008926:	f7f7 fcb9 	bl	800029c <__adddf3>
 800892a:	4b9e      	ldr	r3, [pc, #632]	@ (8008ba4 <atan+0x314>)
 800892c:	2200      	movs	r2, #0
 800892e:	f7f7 fcb3 	bl	8000298 <__aeabi_dsub>
 8008932:	2200      	movs	r2, #0
 8008934:	4606      	mov	r6, r0
 8008936:	460f      	mov	r7, r1
 8008938:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800893c:	4620      	mov	r0, r4
 800893e:	4629      	mov	r1, r5
 8008940:	f7f7 fcac 	bl	800029c <__adddf3>
 8008944:	4602      	mov	r2, r0
 8008946:	460b      	mov	r3, r1
 8008948:	4630      	mov	r0, r6
 800894a:	4639      	mov	r1, r7
 800894c:	f7f7 ff86 	bl	800085c <__aeabi_ddiv>
 8008950:	f04f 0a00 	mov.w	sl, #0
 8008954:	4604      	mov	r4, r0
 8008956:	460d      	mov	r5, r1
 8008958:	4622      	mov	r2, r4
 800895a:	462b      	mov	r3, r5
 800895c:	4620      	mov	r0, r4
 800895e:	4629      	mov	r1, r5
 8008960:	f7f7 fe52 	bl	8000608 <__aeabi_dmul>
 8008964:	4602      	mov	r2, r0
 8008966:	460b      	mov	r3, r1
 8008968:	4680      	mov	r8, r0
 800896a:	4689      	mov	r9, r1
 800896c:	f7f7 fe4c 	bl	8000608 <__aeabi_dmul>
 8008970:	a371      	add	r3, pc, #452	@ (adr r3, 8008b38 <atan+0x2a8>)
 8008972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008976:	4606      	mov	r6, r0
 8008978:	460f      	mov	r7, r1
 800897a:	f7f7 fe45 	bl	8000608 <__aeabi_dmul>
 800897e:	a370      	add	r3, pc, #448	@ (adr r3, 8008b40 <atan+0x2b0>)
 8008980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008984:	f7f7 fc8a 	bl	800029c <__adddf3>
 8008988:	4632      	mov	r2, r6
 800898a:	463b      	mov	r3, r7
 800898c:	f7f7 fe3c 	bl	8000608 <__aeabi_dmul>
 8008990:	a36d      	add	r3, pc, #436	@ (adr r3, 8008b48 <atan+0x2b8>)
 8008992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008996:	f7f7 fc81 	bl	800029c <__adddf3>
 800899a:	4632      	mov	r2, r6
 800899c:	463b      	mov	r3, r7
 800899e:	f7f7 fe33 	bl	8000608 <__aeabi_dmul>
 80089a2:	a36b      	add	r3, pc, #428	@ (adr r3, 8008b50 <atan+0x2c0>)
 80089a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089a8:	f7f7 fc78 	bl	800029c <__adddf3>
 80089ac:	4632      	mov	r2, r6
 80089ae:	463b      	mov	r3, r7
 80089b0:	f7f7 fe2a 	bl	8000608 <__aeabi_dmul>
 80089b4:	a368      	add	r3, pc, #416	@ (adr r3, 8008b58 <atan+0x2c8>)
 80089b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ba:	f7f7 fc6f 	bl	800029c <__adddf3>
 80089be:	4632      	mov	r2, r6
 80089c0:	463b      	mov	r3, r7
 80089c2:	f7f7 fe21 	bl	8000608 <__aeabi_dmul>
 80089c6:	a366      	add	r3, pc, #408	@ (adr r3, 8008b60 <atan+0x2d0>)
 80089c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089cc:	f7f7 fc66 	bl	800029c <__adddf3>
 80089d0:	4642      	mov	r2, r8
 80089d2:	464b      	mov	r3, r9
 80089d4:	f7f7 fe18 	bl	8000608 <__aeabi_dmul>
 80089d8:	a363      	add	r3, pc, #396	@ (adr r3, 8008b68 <atan+0x2d8>)
 80089da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089de:	4680      	mov	r8, r0
 80089e0:	4689      	mov	r9, r1
 80089e2:	4630      	mov	r0, r6
 80089e4:	4639      	mov	r1, r7
 80089e6:	f7f7 fe0f 	bl	8000608 <__aeabi_dmul>
 80089ea:	a361      	add	r3, pc, #388	@ (adr r3, 8008b70 <atan+0x2e0>)
 80089ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089f0:	f7f7 fc52 	bl	8000298 <__aeabi_dsub>
 80089f4:	4632      	mov	r2, r6
 80089f6:	463b      	mov	r3, r7
 80089f8:	f7f7 fe06 	bl	8000608 <__aeabi_dmul>
 80089fc:	a35e      	add	r3, pc, #376	@ (adr r3, 8008b78 <atan+0x2e8>)
 80089fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a02:	f7f7 fc49 	bl	8000298 <__aeabi_dsub>
 8008a06:	4632      	mov	r2, r6
 8008a08:	463b      	mov	r3, r7
 8008a0a:	f7f7 fdfd 	bl	8000608 <__aeabi_dmul>
 8008a0e:	a35c      	add	r3, pc, #368	@ (adr r3, 8008b80 <atan+0x2f0>)
 8008a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a14:	f7f7 fc40 	bl	8000298 <__aeabi_dsub>
 8008a18:	4632      	mov	r2, r6
 8008a1a:	463b      	mov	r3, r7
 8008a1c:	f7f7 fdf4 	bl	8000608 <__aeabi_dmul>
 8008a20:	a359      	add	r3, pc, #356	@ (adr r3, 8008b88 <atan+0x2f8>)
 8008a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a26:	f7f7 fc37 	bl	8000298 <__aeabi_dsub>
 8008a2a:	4632      	mov	r2, r6
 8008a2c:	463b      	mov	r3, r7
 8008a2e:	f7f7 fdeb 	bl	8000608 <__aeabi_dmul>
 8008a32:	4602      	mov	r2, r0
 8008a34:	460b      	mov	r3, r1
 8008a36:	4640      	mov	r0, r8
 8008a38:	4649      	mov	r1, r9
 8008a3a:	f7f7 fc2f 	bl	800029c <__adddf3>
 8008a3e:	4622      	mov	r2, r4
 8008a40:	462b      	mov	r3, r5
 8008a42:	f7f7 fde1 	bl	8000608 <__aeabi_dmul>
 8008a46:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 8008a4a:	4602      	mov	r2, r0
 8008a4c:	460b      	mov	r3, r1
 8008a4e:	d148      	bne.n	8008ae2 <atan+0x252>
 8008a50:	4620      	mov	r0, r4
 8008a52:	4629      	mov	r1, r5
 8008a54:	f7f7 fc20 	bl	8000298 <__aeabi_dsub>
 8008a58:	e72f      	b.n	80088ba <atan+0x2a>
 8008a5a:	4b52      	ldr	r3, [pc, #328]	@ (8008ba4 <atan+0x314>)
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	4620      	mov	r0, r4
 8008a60:	4629      	mov	r1, r5
 8008a62:	f7f7 fc19 	bl	8000298 <__aeabi_dsub>
 8008a66:	4b4f      	ldr	r3, [pc, #316]	@ (8008ba4 <atan+0x314>)
 8008a68:	4606      	mov	r6, r0
 8008a6a:	460f      	mov	r7, r1
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	4620      	mov	r0, r4
 8008a70:	4629      	mov	r1, r5
 8008a72:	f7f7 fc13 	bl	800029c <__adddf3>
 8008a76:	4602      	mov	r2, r0
 8008a78:	460b      	mov	r3, r1
 8008a7a:	4630      	mov	r0, r6
 8008a7c:	4639      	mov	r1, r7
 8008a7e:	f7f7 feed 	bl	800085c <__aeabi_ddiv>
 8008a82:	f04f 0a01 	mov.w	sl, #1
 8008a86:	4604      	mov	r4, r0
 8008a88:	460d      	mov	r5, r1
 8008a8a:	e765      	b.n	8008958 <atan+0xc8>
 8008a8c:	4b47      	ldr	r3, [pc, #284]	@ (8008bac <atan+0x31c>)
 8008a8e:	429e      	cmp	r6, r3
 8008a90:	d21c      	bcs.n	8008acc <atan+0x23c>
 8008a92:	4b47      	ldr	r3, [pc, #284]	@ (8008bb0 <atan+0x320>)
 8008a94:	2200      	movs	r2, #0
 8008a96:	4620      	mov	r0, r4
 8008a98:	4629      	mov	r1, r5
 8008a9a:	f7f7 fbfd 	bl	8000298 <__aeabi_dsub>
 8008a9e:	4b44      	ldr	r3, [pc, #272]	@ (8008bb0 <atan+0x320>)
 8008aa0:	4606      	mov	r6, r0
 8008aa2:	460f      	mov	r7, r1
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	4620      	mov	r0, r4
 8008aa8:	4629      	mov	r1, r5
 8008aaa:	f7f7 fdad 	bl	8000608 <__aeabi_dmul>
 8008aae:	4b3d      	ldr	r3, [pc, #244]	@ (8008ba4 <atan+0x314>)
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	f7f7 fbf3 	bl	800029c <__adddf3>
 8008ab6:	4602      	mov	r2, r0
 8008ab8:	460b      	mov	r3, r1
 8008aba:	4630      	mov	r0, r6
 8008abc:	4639      	mov	r1, r7
 8008abe:	f7f7 fecd 	bl	800085c <__aeabi_ddiv>
 8008ac2:	f04f 0a02 	mov.w	sl, #2
 8008ac6:	4604      	mov	r4, r0
 8008ac8:	460d      	mov	r5, r1
 8008aca:	e745      	b.n	8008958 <atan+0xc8>
 8008acc:	4622      	mov	r2, r4
 8008ace:	462b      	mov	r3, r5
 8008ad0:	4938      	ldr	r1, [pc, #224]	@ (8008bb4 <atan+0x324>)
 8008ad2:	2000      	movs	r0, #0
 8008ad4:	f7f7 fec2 	bl	800085c <__aeabi_ddiv>
 8008ad8:	f04f 0a03 	mov.w	sl, #3
 8008adc:	4604      	mov	r4, r0
 8008ade:	460d      	mov	r5, r1
 8008ae0:	e73a      	b.n	8008958 <atan+0xc8>
 8008ae2:	4b35      	ldr	r3, [pc, #212]	@ (8008bb8 <atan+0x328>)
 8008ae4:	4e35      	ldr	r6, [pc, #212]	@ (8008bbc <atan+0x32c>)
 8008ae6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aee:	f7f7 fbd3 	bl	8000298 <__aeabi_dsub>
 8008af2:	4622      	mov	r2, r4
 8008af4:	462b      	mov	r3, r5
 8008af6:	f7f7 fbcf 	bl	8000298 <__aeabi_dsub>
 8008afa:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8008afe:	4602      	mov	r2, r0
 8008b00:	460b      	mov	r3, r1
 8008b02:	e9d6 0100 	ldrd	r0, r1, [r6]
 8008b06:	f7f7 fbc7 	bl	8000298 <__aeabi_dsub>
 8008b0a:	f1bb 0f00 	cmp.w	fp, #0
 8008b0e:	4604      	mov	r4, r0
 8008b10:	460d      	mov	r5, r1
 8008b12:	f6bf aedc 	bge.w	80088ce <atan+0x3e>
 8008b16:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008b1a:	461d      	mov	r5, r3
 8008b1c:	e6d7      	b.n	80088ce <atan+0x3e>
 8008b1e:	a51c      	add	r5, pc, #112	@ (adr r5, 8008b90 <atan+0x300>)
 8008b20:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008b24:	e6d3      	b.n	80088ce <atan+0x3e>
 8008b26:	bf00      	nop
 8008b28:	54442d18 	.word	0x54442d18
 8008b2c:	3ff921fb 	.word	0x3ff921fb
 8008b30:	8800759c 	.word	0x8800759c
 8008b34:	7e37e43c 	.word	0x7e37e43c
 8008b38:	e322da11 	.word	0xe322da11
 8008b3c:	3f90ad3a 	.word	0x3f90ad3a
 8008b40:	24760deb 	.word	0x24760deb
 8008b44:	3fa97b4b 	.word	0x3fa97b4b
 8008b48:	a0d03d51 	.word	0xa0d03d51
 8008b4c:	3fb10d66 	.word	0x3fb10d66
 8008b50:	c54c206e 	.word	0xc54c206e
 8008b54:	3fb745cd 	.word	0x3fb745cd
 8008b58:	920083ff 	.word	0x920083ff
 8008b5c:	3fc24924 	.word	0x3fc24924
 8008b60:	5555550d 	.word	0x5555550d
 8008b64:	3fd55555 	.word	0x3fd55555
 8008b68:	2c6a6c2f 	.word	0x2c6a6c2f
 8008b6c:	bfa2b444 	.word	0xbfa2b444
 8008b70:	52defd9a 	.word	0x52defd9a
 8008b74:	3fadde2d 	.word	0x3fadde2d
 8008b78:	af749a6d 	.word	0xaf749a6d
 8008b7c:	3fb3b0f2 	.word	0x3fb3b0f2
 8008b80:	fe231671 	.word	0xfe231671
 8008b84:	3fbc71c6 	.word	0x3fbc71c6
 8008b88:	9998ebc4 	.word	0x9998ebc4
 8008b8c:	3fc99999 	.word	0x3fc99999
 8008b90:	54442d18 	.word	0x54442d18
 8008b94:	bff921fb 	.word	0xbff921fb
 8008b98:	440fffff 	.word	0x440fffff
 8008b9c:	7ff00000 	.word	0x7ff00000
 8008ba0:	3fdbffff 	.word	0x3fdbffff
 8008ba4:	3ff00000 	.word	0x3ff00000
 8008ba8:	3ff2ffff 	.word	0x3ff2ffff
 8008bac:	40038000 	.word	0x40038000
 8008bb0:	3ff80000 	.word	0x3ff80000
 8008bb4:	bff00000 	.word	0xbff00000
 8008bb8:	08008ff8 	.word	0x08008ff8
 8008bbc:	08009018 	.word	0x08009018

08008bc0 <fabs>:
 8008bc0:	ec51 0b10 	vmov	r0, r1, d0
 8008bc4:	4602      	mov	r2, r0
 8008bc6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008bca:	ec43 2b10 	vmov	d0, r2, r3
 8008bce:	4770      	bx	lr

08008bd0 <_init>:
 8008bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bd2:	bf00      	nop
 8008bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bd6:	bc08      	pop	{r3}
 8008bd8:	469e      	mov	lr, r3
 8008bda:	4770      	bx	lr

08008bdc <_fini>:
 8008bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bde:	bf00      	nop
 8008be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008be2:	bc08      	pop	{r3}
 8008be4:	469e      	mov	lr, r3
 8008be6:	4770      	bx	lr
